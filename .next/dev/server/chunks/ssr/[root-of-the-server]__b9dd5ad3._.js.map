{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Windows/Documents/AIGP/aigp/services/geminiService.ts"],"sourcesContent":["import { GoogleGenAI, Type } from \"@google/genai\";\n\n// ✅ Checagem da chave de API\nif (!process.env.GEMINI_API_KEY) {\n  console.error(\"❌ [GeminiService] Variável de ambiente GEMINI_API_KEY não configurada!\");\n} else {\n  console.log(\"✅ [GeminiService] GEMINI_API_KEY detectada com sucesso.\");\n}\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY as string });\n\n// ✅ URL e chave de autenticação da API remota\nconst REMOTE_API_URL = process.env.REMOTE_POST_URL || \"https://www.iatioben.com.br/api/remote-post\";\nconst REMOTE_API_KEY = process.env.REMOTE_POST_API_KEY;\n\n// ====================================================================\n// 🕊️ 1. Criação do artigo jornalístico (texto bruto)\n// ====================================================================\nexport const writeNewsArticle = async (topic: string, language: string, focusKeywords: string): Promise<string> => {\n  console.log(\"🕊️ [writeNewsArticle] Iniciando geração do artigo...\");\n  console.log(`[writeNewsArticle] Tema: ${topic}`);\n  console.log(`[writeNewsArticle] Idioma: ${language}`);\n  console.log(`[writeNewsArticle] Palavras-chave: ${focusKeywords}`);\n\n  try {\n    const prompt = `\nVocê é um jornalista católico de aproximadamente 25 anos, com um dom especial para contar histórias inspiradoras sobre os Santos da Igreja Católica. \nVocê escreve para o Blog Tio Ben — um blog católico jovem e envolvente, que busca evangelizar e inspirar seus leitores através da vida dos Santos. \n\nSeu estilo é leve, natural e empolgante — como um amigo que sabe muito sobre a fé e compartilha histórias de forma calorosa e verdadeira. \nNão use gírias ou expressões populares demais, mas evite também a linguagem excessivamente formal. \nSeu texto deve soar autêntico, humano e profundamente católico. \n\n🔎 **Fontes e Verdade Doutrinal:**\n- Suas referências principais são documentos e fontes oficiais da Igreja Católica, especialmente o site do Vaticano (vatican.va), o Missal Romano e o Diretório dos Santos.\n- Nunca invente fatos. Se não houver informação sobre algum aspecto, apenas omita. \n- Toda a narrativa deve estar em plena comunhão com o Magistério e a Tradição da Igreja.\n\n🪔 **Estrutura do Artigo (SEO e Conteúdo):**\nO artigo deve ter:\n1. **Título** criativo e inspirador.\n2. **Subtítulo** curto e cativante.\n3. **Seção do Dia de Celebração** — contendo a **Liturgia do Dia** (1ª Leitura, 2ª Leitura — se houver —, Salmo e Evangelho).\n4. **Introdução envolvente**, que desperte a curiosidade do leitor e o conecte espiritualmente com o Santo.\n5. **Corpo do texto** dividido em seções com subtítulos claros:\n   - 🌍 *Origem e nascimento*: onde e quando nasceu, contexto histórico.\n   - ✝️ *Caminho de fé e missão*: principais fatos da vida, vocação, virtudes.\n   - 🙏 *Milagres e testemunhos*: fatos reconhecidos pela Igreja ou pela tradição.\n   - 📅 *Dia de celebração*: data litúrgica e sentido espiritual.\n   - 🕊️ *Padroeiro e devoções*: se for padroeiro de algo, explique com clareza.\n   - 📖 *Oração ao Santo* (caso exista oficialmente na tradição).\n   - 💡 *Lição de vida*: o que sua história ensina para os cristãos de hoje, especialmente os jovens.\n6. **Conclusão inspiradora**, que motive o leitor a buscar uma vida mais santa e próxima de Deus.\n\n✨ **Recursos estilísticos:**\n- Use **emojis** com moderação para dar leveza e simpatia ao texto (ex: 🙏, ✝️, 🌹, 📖, 💡, 🕊️).\n- Use **listas e tópicos** quando fizer sentido.\n- Destaque palavras-chave importantes com **negrito**.\n- Os subtítulos devem ser marcados com '##' (Markdown) para SEO e clareza visual.\n- O texto deve ter uma **densidade equilibrada de palavras-chave** e uma **meta description natural**.\n\n🧠 **SEO e Palavras-chave:**\nDurante a escrita, tente incorporar de forma natural e relevante as seguintes palavras-chave: ${focusKeywords}. \nNão force a inclusão se não parecer natural; priorize a fluidez e o sentido espiritual do texto.\n\n📰 **Instrução de Escrita:**\nEscreva um artigo cativante e detalhado sobre \"${topic}\". \nO artigo deve ter um título claro, uma introdução envolvente, subtítulos temáticos, corpo bem estruturado e uma conclusão edificante. \nO tom deve ser inspirador e próximo, adequado para jovens católicos que buscam crescer na fé. \nO idioma do artigo deve ser: ${language}.\n`;\n;\n\n    console.log(\"✍️ [writeNewsArticle] Enviando prompt para o modelo gemini-2.5-pro...\");\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      contents: [{ parts: [{ text: prompt }] }],\n    });\n\n    console.log(\"✅ [writeNewsArticle] Artigo gerado com sucesso.\");\n    return response.text;\n  } catch (error) {\n    console.error(\"❌ [writeNewsArticle] Erro:\", error);\n    throw new Error(\"Falha ao gerar o artigo de notícia pela IA.\");\n  }\n};\n\n// ====================================================================\n// 🎨 2. Conversão para HTML semântico\n// ====================================================================\nexport const formatArticleToHtml = async (articleText: string): Promise<string> => {\n  console.log(\"🎨 [formatArticleToHtml] Iniciando formatação do artigo...\");\n  console.log(\"[formatArticleToHtml] Tamanho do texto recebido:\", articleText.length);\n\n  try {\n    const prompt = `\nVocê é um assistente editorial e web designer católico especializado em formatação de artigos para o Blog Tio Ben. \nSeu papel é receber um texto em linguagem natural — uma matéria sobre a vida de um santo — e convertê-la em um artigo HTML completo, elegante e semanticamente otimizado para SEO e responsividade.\n\nO texto da matéria chega no seguinte parâmetro:  \n${articleText}\n\n⚜️ **Contexto:**\nO artigo original foi escrito por outro agente (um jornalista católico) e já segue as tradições da Igreja e o tom espiritual do Blog Tio Ben. \nSua tarefa NÃO é reescrever o conteúdo, mas formatá-lo em HTML conforme o modelo abaixo, adaptando títulos, subtítulos e seções com estrutura semântica e estilização coerente com TailwindCSS, conforme o padrão do site.\n\n---\n\n🧱 **ESTRUTURA BASE (modelo obrigatório):**\nO HTML deve sempre seguir este esqueleto principal:\n\n<article class=\"post-santo max-w-3xl mx-auto p-4 sm lg bg-white font-sans text-gray-800 leading-relaxed min-h-screen\">\n\n  <!-- 🔍 Bloco SEO: Data da Celebração e Link para Liturgia -->\n  <section id=\"data-celebracao\" class=\"mb-8 p-4 bg-indigo-50 border border-indigo-100 rounded-lg\">\n    <h1 class=\"text-3xl font-extrabold text-indigo-700 mb-2\">[Nome do Santo] – [Data de Celebração]</h1>\n    <p class=\"text-gray-700 text-base mb-3\">\n      No dia <time datetime=\"[aaaa-mm-dd]\">[data por extenso]</time>, a Igreja celebra \n      <strong class=\"text-indigo-600\">[Nome do Santo]</strong>. \n      [Breve resumo sobre o santo e o significado do dia.]\n      Acompanhe também a \n      <a href=\"https://www.iatioben.com.br/liturgia-diaria/[dd-mm-yyyy]\" \n         class=\"text-indigo-600 font-semibold hover:underline\" \n         target=\"_blank\" \n         rel=\"noopener noreferrer\">\n        Liturgia Diária de [data]\n      </a>.\n    </p>\n  </section>\n\n  <header class=\"mb-10 border-b border-indigo-200 pb-4\">\n    <h2 class=\"text-3xl sm font-extrabold text-indigo-700 mb-2 leading-tight\">[Título principal do artigo]</h2>\n    <p class=\"introducao text-lg text-gray-600 italic\">[Parágrafo introdutório]</p>\n  </header>\n\n  <!-- Seções temáticas -->\n  <section id=\"[slug-secao]\" aria-labelledby=\"[titulo-secao]\" class=\"mb-10 pt-4 border-b border-gray-100 pb-6\">\n    <h3 id=\"[titulo-secao]\" class=\"dia-liturgia text-2xl font-bold text-gray-900 mb-3 sm\">\n      <span class=\"text-indigo-500 mr-2\">[emoji]</span> [Título da seção]\n    </h3>\n    <p class=\"mb-4\">[Parágrafo 1]</p>\n    <p class=\"mb-4\">[Parágrafo 2]</p>\n  </section>\n\n  <!-- Seções finais -->\n  <section id=\"resumo-seo\" aria-labelledby=\"titulo-resumo\" class=\"resumo-post p-5 border border-indigo-100 rounded-lg mb-10 bg-indigo-50\">\n    <h3 id=\"titulo-resumo\" class=\"text-xl font-bold text-indigo-700 mb-3\">✨ Ficha Técnica (SEO)</h3>\n    <ul class=\"lista-resumo space-y-2 text-sm\">\n      <li><strong class=\"font-semibold text-gray-700\">Tema central:</strong> [resumo do tema]</li>\n      <li><strong class=\"font-semibold text-gray-700\">Foco:</strong> [descrição resumida do foco]</li>\n    </ul>\n  </section>\n\n  <footer class=\"rodape-post mt-10 pt-6 border-t border-gray-200\">\n    <h3 class=\"chamada-acao text-xl font-bold text-gray-900 mb-3\">🔗 Conecte Fé e Humanismo</h3>\n    <p class=\"text-gray-600\">\n      Inspire-se em <strong class=\"text-indigo-600\">[Nome do Santo]</strong> e viva sua fé com coragem, esperança e amor.\n    </p>\n  </footer>\n</article>\n\n---\n\n🧩 **INSTRUÇÕES DE CONVERSÃO E FORMATAÇÃO:**\n\n1. Use o conteúdo recebido em \\`${articleText}\\` para preencher todas as seções do modelo.\n2. Identifique automaticamente introdução, corpo e conclusão e distribua em seções coerentes.\n3. Utilize **emojis temáticos católicos** nos títulos (👶🕊️📖💡🌟❤️🙏📅).\n4. Gere **IDs semânticos** para cada seção (ex: infancia-formacao, milagres, legado, oracao, lição-de-vida etc.).\n5. As classes Tailwind devem ser **mantidas exatamente como no modelo.**\n6. O HTML deve ser **responsivo, mobile first e semanticamente estruturado.**\n7. Todos os links externos devem usar **target=\"_blank\" e rel=\"noopener noreferrer\".**\n8. Formate datas com o atributo \\`datetime=\"yyyy-mm-dd\"\\`.\n9. Destaque termos importantes com **<strong>** e **<em>**.\n10. Crie uma seção **\"Ficha Técnica (SEO)\"** ao final com resumo e foco do texto.\n\n---\n\n🔗 **LINKS DE CONTEXTO INTELIGENTES (IA Tio Ben):**\nDurante a formatação, **identifique expressões, nomes ou fatos que possam despertar curiosidade** e converta-os em links que direcionem para a pesquisa na IA Tio Ben.  \nUse o formato:\n\n<a href=\"https://www.iatioben.com.br/?texto=[texto%20codificado]\" \n   class=\"text-indigo-600 hover:underline font-medium\" \n   target=\"_blank\" \n   rel=\"noopener noreferrer\">\n   [expressão clicável]\n</a>\n\nExemplo:  \nTransforme “Concílio Vaticano II” em  \n<a href=\"https://www.iatioben.com.br/?texto=Concílio%20Vaticano%20II\" ...>Concílio Vaticano II</a>\n\nCrie **entre 3 e 5 links** desse tipo por artigo, de forma natural e fluida, sem quebrar o contexto.\n\n---\n\n⚙️ **Boas práticas de SEO:**\n- Título principal único e envolvente (\\`<h1>\\`).  \n- Subtítulos hierárquicos (\\`<h2>\\`, \\`<h3>\\`).  \n- Tags semânticas corretas (\\`<strong>\\`, \\`<em>\\`, \\`<time>\\`, \\`<a>\\`).  \n- Estrutura HTML limpa e validada.  \n- Parágrafos curtos e escaneáveis.  \n- Palavras-chave mantidas naturalmente.\n\n---\n\n🧭 **Instrução final:**\nReceba o conteúdo no parâmetro \\`${articleText}\\` e retorne **somente o HTML final completo e formatado** no padrão acima, pronto para publicação no site www.iatioben.com.br.  \nNão adicione explicações nem comentários — apenas gere o HTML final.\n`;\n\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: [{ parts: [{ text: prompt }] }],\n    });\n\n    let htmlContent = response.text || \"\";\n    if (htmlContent.startsWith(\"```html\")) htmlContent = htmlContent.slice(7);\n    if (htmlContent.endsWith(\"```\")) htmlContent = htmlContent.slice(0, -3);\n\n    console.log(\"✅ [formatArticleToHtml] HTML gerado com sucesso. Tamanho:\", htmlContent.length);\n    return htmlContent.trim();\n  } catch (error) {\n    console.error(\"❌ [formatArticleToHtml] Erro ao gerar HTML:\", error);\n    throw new Error(\"Falha ao formatar o artigo para HTML.\");\n  }\n};\n\n// ====================================================================\n// 🔍 3. Extração de metadados SEO\n// ====================================================================\nexport const analyzeSeoAndExtractMetadata = async (\n  articleText: string,\n  focusKeywords: string\n): Promise<{ keywords: string[]; metaDescription: string }> => {\n  console.log(\"🔍 [analyzeSeoAndExtractMetadata] Iniciando análise SEO...\");\n\n  try {\n    const prompt = `\nVocê é um editor católico do Blog Tio Ben, responsável por revisar artigos espirituais sobre a vida dos Santos e otimizar seu conteúdo para SEO — sem jamais perder o tom humano, devocional e inspirador do texto original.\n\n🕊️ Sua missão é analisar o artigo abaixo e gerar um **objeto JSON** com duas chaves:\n- \"keywords\": uma lista com 5 a 10 palavras-chave que melhor representam o artigo e sua espiritualidade, valorizando temas católicos e expressões de fé.\n- \"metaDescription\": uma breve descrição (máx. 160 caracteres) que resuma a essência do artigo de forma cativante, fiel à mensagem e ao estilo do texto, como se fosse o resumo que aparece no Google.  \n  Ela deve soar natural, acolhedora e levemente poética — como uma frase que desperta fé e curiosidade, sem parecer comercial.\n\n🪔 Dicas de estilo:\n- Mantenha o mesmo tom usado no artigo: devocional, alegre, próximo e cheio de esperança.\n- Prefira frases que transmitam luz, fé, virtude e exemplo de vida.\n- Não use linguagem técnica ou publicitária.\n- Inspire o leitor a clicar, mas sem perder a reverência e autenticidade.\n\nPalavras-chave foco do blog: ${focusKeywords}\n\n📰 Artigo a analisar:\n---\n${articleText}\n---\n\nRetorne **somente o JSON** no formato:\n{\n  \"keywords\": [\"palavra1\", \"palavra2\", ...],\n  \"metaDescription\": \"texto descritivo cativante\"\n}\n`;\n\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: [{ parts: [{ text: prompt }] }],\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: Type.OBJECT,\n          properties: {\n            keywords: { type: Type.ARRAY, items: { type: Type.STRING } },\n            metaDescription: { type: Type.STRING },\n          },\n        },\n      },\n    });\n\n    const result = JSON.parse(response.text);\n    console.log(\"✅ [analyzeSeoAndExtractMetadata] SEO extraído:\", result);\n    return {\n      keywords: result.keywords || [],\n      metaDescription: result.metaDescription || \"\",\n    };\n  } catch (error) {\n    console.error(\"❌ [analyzeSeoAndExtractMetadata] Erro SEO:\", error);\n    return { keywords: [], metaDescription: \"Não foi possível gerar a meta descrição.\" };\n  }\n};\n\n// ====================================================================\n// 🚀 4. Fluxo completo: gerar → formatar → analisar → publicar remotamente\n// ====================================================================\nexport const generateAndPublishArticle = async (\n  topic: string,\n  language: string,\n  focusKeywords: string,\n  categoryId: string,\n  categoryName = \"Santos\"\n): Promise<void> => {\n  console.log(\"🚀 [generateAndPublishArticle] Iniciando pipeline completo...\");\n  try {\n    // 1️⃣ Gera o artigo textual\n    const articleText = await writeNewsArticle(topic, language, focusKeywords);\n\n    // 2️⃣ Converte para HTML\n    const htmlArticle = await formatArticleToHtml(articleText);\n\n    // 3️⃣ Extrai SEO\n    const { keywords, metaDescription } = await analyzeSeoAndExtractMetadata(articleText, focusKeywords);\n\n    // 4️⃣ Prepara os dados para envio remoto\n    const slug = topic\n      .toLowerCase()\n      .normalize(\"NFD\")\n      .replace(/[\\u0300-\\u036f]/g, \"\")\n      .replace(/[^\\w\\s-]/g, \"\")\n      .replace(/[\\s_-]+/g, \"-\")\n      .replace(/^-+|-+$/g, \"\");\n\n    const DEFAULT_CATEGORY_ID = \"ba7adc02-de35-4405-b3f3-7391947d6281\";\n    const DEFAULT_CATEGORY_NAME = \"Santos\"; // ou \"Notícias\", conforme sua estrutura\n\n    const payload = {\n      title: topic,\n      slug,\n      content: htmlArticle,      \n      categoryId: DEFAULT_CATEGORY_ID, // ✅ Categoria fixa válida no Neon\n      categoryName: DEFAULT_CATEGORY_NAME,\n      keywords: keywords.join(\", \"),\n      metaDescription,\n      publishDate: new Date().toISOString(),\n      isActive: true,\n    };\n\n    console.log(\"📦 [generateAndPublishArticle] Payload preparado:\", payload);\n\n    if (!REMOTE_API_URL || !REMOTE_API_KEY) {\n      console.warn(\"⚠️ [generateAndPublishArticle] Configuração remota ausente, pulando publicação.\");\n      return;\n    }\n\n    // 5️⃣ Envia para o outro site\n    console.log(`🌍 [generateAndPublishArticle] Enviando para ${REMOTE_API_URL} ...`);\n\n    const res = await fetch(REMOTE_API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": REMOTE_API_KEY!,\n      },\n      body: JSON.stringify(payload),\n    });\n\n    const result = await res.json();\n    if (!res.ok) throw new Error(`Falha na publicação remota: ${result.message}`);\n\n    console.log(\"✅ [generateAndPublishArticle] Post publicado com sucesso:\", result);\n  } catch (error) {\n    console.error(\"❌ [generateAndPublishArticle] Erro geral:\", error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 469, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Windows/Documents/AIGP/aigp/services/db.ts"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\nimport { ArtigoNoticia } from '../types';\n\nif (!process.env.POSTGRES_URL) {\n  throw new Error(\"Variável de ambiente POSTGRES_URL não definida.\");\n}\n\nconst sql = neon(process.env.POSTGRES_URL);\n\n// Mapeia a linha do banco de dados (snake_case) para o objeto ArtigoNoticia (camelCase)\nconst mapRowToArticle = (row: any): ArtigoNoticia => ({\n  id: String(row.id),\n  generationDate: row.generation_date,\n  title: row.title,\n  rawContent: row.raw_content,\n  formattedContent: row.formatted_content,\n  published: row.published,\n  keywords: row.keywords || [],\n  metaDescription: row.meta_description || '',\n});\n\n/**\n * Cria a tabela 'articles' no banco de dados se ela não existir.\n */\nexport async function setupDatabase() {\n  try {\n    await sql`\n      CREATE TABLE IF NOT EXISTS articles (\n        id SERIAL PRIMARY KEY,\n        generation_date TIMESTAMPTZ NOT NULL,\n        title TEXT NOT NULL,\n        raw_content TEXT NOT NULL,\n        formatted_content TEXT NOT NULL,\n        published BOOLEAN NOT NULL DEFAULT false,\n        keywords TEXT[],\n        meta_description TEXT\n      );\n    `;\n    console.log(\"Configuração do banco de dados bem-sucedida: tabela 'articles' verificada.\");\n  } catch (error) {\n    console.error(\"Falha na configuração do banco de dados:\", error);\n    throw new Error(\"Falha ao configurar a tabela do banco de dados.\");\n  }\n}\n\n/**\n * Salva um novo artigo no banco de dados.\n * @param {ArtigoNoticia} article O artigo a ser salvo.\n * @returns {Promise<ArtigoNoticia>} O artigo salvo com o ID gerado pelo banco de dados.\n */\nexport async function saveArticle(article: ArtigoNoticia): Promise<ArtigoNoticia> {\n  try {\n    const { generationDate, title, rawContent, formattedContent, keywords, metaDescription } = article;\n    const result = await sql`\n      INSERT INTO articles (generation_date, title, raw_content, formatted_content, published, keywords, meta_description)\n      VALUES (${generationDate}, ${title}, ${rawContent}, ${formattedContent}, true, ${keywords}, ${metaDescription})\n      RETURNING *;\n    `;\n    if (result.length === 0) {\n        throw new Error(\"Falha ao salvar o artigo, nenhum resultado retornado do banco de dados.\");\n    }\n    return mapRowToArticle(result[0]);\n  } catch (error) {\n    console.error(\"Erro ao salvar o artigo no banco de dados:\", error);\n    throw new Error(\"Falha ao salvar o artigo.\");\n  }\n}\n\n/**\n * Busca todos os artigos do banco de dados, ordenados por data de geração.\n * @returns {Promise<ArtigoNoticia[]>} Uma lista de todos os artigos salvos.\n */\nexport async function getArticles(): Promise<ArtigoNoticia[]> {\n  try {\n    const rows = await sql`\n      SELECT * FROM articles ORDER BY generation_date DESC;\n    `;\n    return rows.map(mapRowToArticle);\n  } catch (error) {\n    console.error(\"Erro ao buscar artigos do banco de dados:\", error);\n    throw new Error(\"Falha ao buscar os artigos.\");\n  }\n}"],"names":[],"mappings":";;;;;;;;AAAA;;AAGA,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,MAAM,IAAA,8JAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;AAEzC,wFAAwF;AACxF,MAAM,kBAAkB,CAAC,MAA4B,CAAC;QACpD,IAAI,OAAO,IAAI,EAAE;QACjB,gBAAgB,IAAI,eAAe;QACnC,OAAO,IAAI,KAAK;QAChB,YAAY,IAAI,WAAW;QAC3B,kBAAkB,IAAI,iBAAiB;QACvC,WAAW,IAAI,SAAS;QACxB,UAAU,IAAI,QAAQ,IAAI,EAAE;QAC5B,iBAAiB,IAAI,gBAAgB,IAAI;IAC3C,CAAC;AAKM,eAAe;IACpB,IAAI;QACF,MAAM,GAAG,CAAC;;;;;;;;;;;IAWV,CAAC;QACD,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,MAAM,IAAI,MAAM;IAClB;AACF;AAOO,eAAe,YAAY,OAAsB;IACtD,IAAI;QACF,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,UAAU,EAAE,gBAAgB,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG;QAC3F,MAAM,SAAS,MAAM,GAAG,CAAC;;cAEf,EAAE,eAAe,EAAE,EAAE,MAAM,EAAE,EAAE,WAAW,EAAE,EAAE,iBAAiB,QAAQ,EAAE,SAAS,EAAE,EAAE,gBAAgB;;IAEhH,CAAC;QACD,IAAI,OAAO,MAAM,KAAK,GAAG;YACrB,MAAM,IAAI,MAAM;QACpB;QACA,OAAO,gBAAgB,MAAM,CAAC,EAAE;IAClC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8CAA8C;QAC5D,MAAM,IAAI,MAAM;IAClB;AACF;AAMO,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,MAAM,GAAG,CAAC;;IAEvB,CAAC;QACD,OAAO,KAAK,GAAG,CAAC;IAClB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6CAA6C;QAC3D,MAAM,IAAI,MAAM;IAClB;AACF","debugId":null}},
    {"offset": {"line": 546, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Windows/Documents/AIGP/aigp/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { revalidatePath } from 'next/cache';\nimport * as geminiService from '../services/geminiService';\nimport * as dbService from '../services/db';\nimport { ArtigoNoticia } from '../types';\n\nexport async function generateAndSaveArticleAction(topic: string, language: string, focusKeywords: string): Promise<ArtigoNoticia> {\n  try {\n    // 2. IA Escritora de Notícias\n    const rawContent = await geminiService.writeNewsArticle(topic, language, focusKeywords);\n\n    // 3. IA Formatadora de HTML\n    const formattedContent = await geminiService.formatArticleToHtml(rawContent);\n\n    // 4. IA Analista de SEO\n    const { keywords, metaDescription } = await geminiService.analyzeSeoAndExtractMetadata(rawContent, focusKeywords);\n    \n    const articleToSave: Omit<ArtigoNoticia, 'id'> = {\n      title: topic,\n      rawContent,\n      formattedContent,\n      generationDate: new Date().toISOString(),\n      published: false,\n      keywords,\n      metaDescription,\n    };\n\n    // 5. Salvar no Banco de Dados\n    const savedArticle = await dbService.saveArticle(articleToSave);\n\n    // Revalida o cache da página de histórico para que o novo artigo apareça\n    revalidatePath('/dashboard/history');\n\n    return {\n      ...savedArticle,\n      published: true\n    };\n  } catch (error) {\n    console.error(\"Erro na Server Action generateAndSaveArticleAction:\", error);\n    // Lança o erro para que o componente cliente possa tratá-lo\n    throw new Error(`Falha ao gerar e salvar o artigo: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\nexport async function getArticlesAction(): Promise<ArtigoNoticia[]> {\n    try {\n        await dbService.setupDatabase(); // Garante que a tabela exista\n        const articles = await dbService.getArticles();\n        return articles;\n    } catch (error) {\n        console.error(\"Erro na Server Action getArticlesAction:\", error);\n        return [];\n    }\n}"],"names":[],"mappings":";;;;;;;AAEA;AACA;AACA;;;;;;AAGO,eAAe,6BAA6B,KAAa,EAAE,QAAgB,EAAE,aAAqB;IACvG,IAAI;QACF,8BAA8B;QAC9B,MAAM,aAAa,MAAM,6IAA8B,CAAC,OAAO,UAAU;QAEzE,4BAA4B;QAC5B,MAAM,mBAAmB,MAAM,gJAAiC,CAAC;QAEjE,wBAAwB;QACxB,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,MAAM,yJAA0C,CAAC,YAAY;QAEnG,MAAM,gBAA2C;YAC/C,OAAO;YACP;YACA;YACA,gBAAgB,IAAI,OAAO,WAAW;YACtC,WAAW;YACX;YACA;QACF;QAEA,8BAA8B;QAC9B,MAAM,eAAe,MAAM,6HAAqB,CAAC;QAEjD,yEAAyE;QACzE,IAAA,+IAAc,EAAC;QAEf,OAAO;YACL,GAAG,YAAY;YACf,WAAW;QACb;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uDAAuD;QACrE,4DAA4D;QAC5D,MAAM,IAAI,MAAM,CAAC,kCAAkC,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO,QAAQ;IAC/G;AACF;AAEO,eAAe;IAClB,IAAI;QACA,MAAM,+HAAuB,IAAI,8BAA8B;QAC/D,MAAM,WAAW,MAAM,6HAAqB;QAC5C,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,OAAO,EAAE;IACb;AACJ;;;IA/CsB;IAsCA;;AAtCA,+OAAA;AAsCA,+OAAA","debugId":null}},
    {"offset": {"line": 613, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Windows/Documents/AIGP/aigp/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateAndSaveArticleAction as '706f4b7a5ed7f1fae5ee8764b8d255b14b6a91c300'} from 'ACTIONS_MODULE0'\nexport {getArticlesAction as '00121f9c30c5223351207fd8b448259ca46c676c50'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}}]
}