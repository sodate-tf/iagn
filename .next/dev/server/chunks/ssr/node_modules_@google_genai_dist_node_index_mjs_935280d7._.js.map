{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@google/genai/dist/node/index.mjs","sources":["file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/_base_url.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/_common.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/_base_transformers.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/converters/_operations_converters.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/types.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/_transformers.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/converters/_batches_converters.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/pagers.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/batches.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/converters/_caches_converters.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/caches.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/chats.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/errors.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/converters/_files_converters.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/files.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/converters/_live_converters.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/converters/_models_converters.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/_api_client.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/mcp/_mcp.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/music.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/live.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/_afc.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/models.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/operations.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/converters/_tokens_converters.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/tokens.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/node/_node_auth.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/node/_node_downloader.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/node/_node_websocket.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/converters/_tunings_converters.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/tunings.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/cross/_cross_uploader.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/node/_node_uploader.ts","file:///C:/Users/Windows/Documents/AIGP/aigp/node_modules/%40google/genai/src/node/node_client.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {HttpOptions} from './types.js';\n\nlet _defaultBaseGeminiUrl: string | undefined = undefined;\nlet _defaultBaseVertexUrl: string | undefined = undefined;\n\n/**\n * Parameters for setting the base URLs for the Gemini API and Vertex AI API.\n */\nexport interface BaseUrlParameters {\n  geminiUrl?: string;\n  vertexUrl?: string;\n}\n\n/**\n * Overrides the base URLs for the Gemini API and Vertex AI API.\n *\n * @remarks This function should be called before initializing the SDK. If the\n * base URLs are set after initializing the SDK, the base URLs will not be\n * updated. Base URLs provided in the HttpOptions will also take precedence over\n * URLs set here.\n *\n * @example\n * ```ts\n * import {GoogleGenAI, setDefaultBaseUrls} from '@google/genai';\n * // Override the base URL for the Gemini API.\n * setDefaultBaseUrls({geminiUrl:'https://gemini.google.com'});\n *\n * // Override the base URL for the Vertex AI API.\n * setDefaultBaseUrls({vertexUrl: 'https://vertexai.googleapis.com'});\n *\n * const ai = new GoogleGenAI({apiKey: 'GEMINI_API_KEY'});\n * ```\n */\nexport function setDefaultBaseUrls(baseUrlParams: BaseUrlParameters) {\n  _defaultBaseGeminiUrl = baseUrlParams.geminiUrl;\n  _defaultBaseVertexUrl = baseUrlParams.vertexUrl;\n}\n\n/**\n * Returns the default base URLs for the Gemini API and Vertex AI API.\n */\nexport function getDefaultBaseUrls(): BaseUrlParameters {\n  return {\n    geminiUrl: _defaultBaseGeminiUrl,\n    vertexUrl: _defaultBaseVertexUrl,\n  };\n}\n\n/**\n * Returns the default base URL based on the following priority:\n *   1. Base URLs set via HttpOptions.\n *   2. Base URLs set via the latest call to setDefaultBaseUrls.\n *   3. Base URLs set via environment variables.\n */\nexport function getBaseUrl(\n  httpOptions: HttpOptions | undefined,\n  vertexai: boolean | undefined,\n  vertexBaseUrlFromEnv: string | undefined,\n  geminiBaseUrlFromEnv: string | undefined,\n): string | undefined {\n  if (!httpOptions?.baseUrl) {\n    const defaultBaseUrls = getDefaultBaseUrls();\n    if (vertexai) {\n      return defaultBaseUrls.vertexUrl ?? vertexBaseUrlFromEnv;\n    } else {\n      return defaultBaseUrls.geminiUrl ?? geminiBaseUrlFromEnv;\n    }\n  }\n\n  return httpOptions.baseUrl;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport class BaseModule {}\n\nexport function formatMap(\n  templateString: string,\n  valueMap: Record<string, unknown>,\n): string {\n  // Use a regular expression to find all placeholders in the template string\n  const regex = /\\{([^}]+)\\}/g;\n\n  // Replace each placeholder with its corresponding value from the valueMap\n  return templateString.replace(regex, (match, key) => {\n    if (Object.prototype.hasOwnProperty.call(valueMap, key)) {\n      const value = valueMap[key];\n      // Convert the value to a string if it's not a string already\n      return value !== undefined && value !== null ? String(value) : '';\n    } else {\n      // Handle missing keys\n      throw new Error(`Key '${key}' not found in valueMap.`);\n    }\n  });\n}\n\nexport function setValueByPath(\n  data: Record<string, unknown>,\n  keys: string[],\n  value: unknown,\n): void {\n  for (let i = 0; i < keys.length - 1; i++) {\n    const key = keys[i];\n\n    if (key.endsWith('[]')) {\n      const keyName = key.slice(0, -2);\n      if (!(keyName in data)) {\n        if (Array.isArray(value)) {\n          data[keyName] = Array.from({length: value.length}, () => ({}));\n        } else {\n          throw new Error(`Value must be a list given an array path ${key}`);\n        }\n      }\n\n      if (Array.isArray(data[keyName])) {\n        const arrayData = data[keyName] as Array<unknown>;\n\n        if (Array.isArray(value)) {\n          for (let j = 0; j < arrayData.length; j++) {\n            const entry = arrayData[j] as Record<string, unknown>;\n            setValueByPath(entry, keys.slice(i + 1), value[j]);\n          }\n        } else {\n          for (const d of arrayData) {\n            setValueByPath(\n              d as Record<string, unknown>,\n              keys.slice(i + 1),\n              value,\n            );\n          }\n        }\n      }\n      return;\n    } else if (key.endsWith('[0]')) {\n      const keyName = key.slice(0, -3);\n      if (!(keyName in data)) {\n        data[keyName] = [{}];\n      }\n      const arrayData = (data as Record<string, unknown>)[keyName];\n      setValueByPath(\n        (arrayData as Array<Record<string, unknown>>)[0],\n        keys.slice(i + 1),\n        value,\n      );\n      return;\n    }\n\n    if (!data[key] || typeof data[key] !== 'object') {\n      data[key] = {};\n    }\n\n    data = data[key] as Record<string, unknown>;\n  }\n\n  const keyToSet = keys[keys.length - 1];\n  const existingData = data[keyToSet];\n\n  if (existingData !== undefined) {\n    if (\n      !value ||\n      (typeof value === 'object' && Object.keys(value).length === 0)\n    ) {\n      return;\n    }\n\n    if (value === existingData) {\n      return;\n    }\n\n    if (\n      typeof existingData === 'object' &&\n      typeof value === 'object' &&\n      existingData !== null &&\n      value !== null\n    ) {\n      Object.assign(existingData, value);\n    } else {\n      throw new Error(`Cannot set value for an existing key. Key: ${keyToSet}`);\n    }\n  } else {\n    if (\n      keyToSet === '_self' &&\n      typeof value === 'object' &&\n      value !== null &&\n      !Array.isArray(value)\n    ) {\n      const valueAsRecord = value as Record<string, unknown>;\n\n      Object.assign(data, valueAsRecord);\n    } else {\n      data[keyToSet] = value;\n    }\n  }\n}\n\nexport function getValueByPath(\n  data: unknown,\n  keys: string[],\n  defaultValue: unknown = undefined,\n): unknown {\n  try {\n    if (keys.length === 1 && keys[0] === '_self') {\n      return data;\n    }\n\n    for (let i = 0; i < keys.length; i++) {\n      if (typeof data !== 'object' || data === null) {\n        return defaultValue;\n      }\n\n      const key = keys[i];\n      if (key.endsWith('[]')) {\n        const keyName = key.slice(0, -2);\n        if (keyName in data) {\n          const arrayData = (data as Record<string, unknown>)[keyName];\n          if (!Array.isArray(arrayData)) {\n            return defaultValue;\n          }\n          return arrayData.map((d) =>\n            getValueByPath(d, keys.slice(i + 1), defaultValue),\n          );\n        } else {\n          return defaultValue;\n        }\n      } else {\n        data = (data as Record<string, unknown>)[key];\n      }\n    }\n\n    return data;\n  } catch (error) {\n    if (error instanceof TypeError) {\n      return defaultValue;\n    }\n    throw error;\n  }\n}\n\n/**\n * Moves values from source paths to destination paths.\n *\n * Examples:\n *   moveValueByPath(\n *     {'requests': [{'content': v1}, {'content': v2}]},\n *     {'requests[].*': 'requests[].request.*'}\n *   )\n *     -> {'requests': [{'request': {'content': v1}}, {'request': {'content': v2}}]}\n */\nexport function moveValueByPath(\n  data: unknown,\n  paths: Record<string, string>,\n): void {\n  for (const [sourcePath, destPath] of Object.entries(paths)) {\n    const sourceKeys = sourcePath.split('.');\n    const destKeys = destPath.split('.');\n\n    // Determine keys to exclude from wildcard to avoid cyclic references\n    const excludeKeys = new Set<string>();\n    let wildcardIdx = -1;\n    for (let i = 0; i < sourceKeys.length; i++) {\n      if (sourceKeys[i] === '*') {\n        wildcardIdx = i;\n        break;\n      }\n    }\n\n    if (wildcardIdx !== -1 && destKeys.length > wildcardIdx) {\n      // Extract the intermediate key between source and dest paths\n      // Example: source=['requests[]', '*'], dest=['requests[]', 'request', '*']\n      // We want to exclude 'request'\n      for (let i = wildcardIdx; i < destKeys.length; i++) {\n        const key = destKeys[i];\n        if (key !== '*' && !key.endsWith('[]') && !key.endsWith('[0]')) {\n          excludeKeys.add(key);\n        }\n      }\n    }\n\n    _moveValueRecursive(data, sourceKeys, destKeys, 0, excludeKeys);\n  }\n}\n\n/**\n * Recursively moves values from source path to destination path.\n */\nfunction _moveValueRecursive(\n  data: unknown,\n  sourceKeys: string[],\n  destKeys: string[],\n  keyIdx: number,\n  excludeKeys: Set<string>,\n): void {\n  if (keyIdx >= sourceKeys.length) {\n    return;\n  }\n\n  if (typeof data !== 'object' || data === null) {\n    return;\n  }\n\n  const key = sourceKeys[keyIdx];\n\n  if (key.endsWith('[]')) {\n    const keyName = key.slice(0, -2);\n    const dataRecord = data as Record<string, unknown>;\n    if (keyName in dataRecord && Array.isArray(dataRecord[keyName])) {\n      for (const item of dataRecord[keyName] as Array<unknown>) {\n        _moveValueRecursive(\n          item,\n          sourceKeys,\n          destKeys,\n          keyIdx + 1,\n          excludeKeys,\n        );\n      }\n    }\n  } else if (key === '*') {\n    // wildcard - move all fields\n    if (typeof data === 'object' && data !== null && !Array.isArray(data)) {\n      const dataRecord = data as Record<string, unknown>;\n      const keysToMove = Object.keys(dataRecord).filter(\n        (k) => !k.startsWith('_') && !excludeKeys.has(k),\n      );\n\n      const valuesToMove: Record<string, unknown> = {};\n      for (const k of keysToMove) {\n        valuesToMove[k] = dataRecord[k];\n      }\n\n      // Set values at destination\n      for (const [k, v] of Object.entries(valuesToMove)) {\n        const newDestKeys: string[] = [];\n        for (const dk of destKeys.slice(keyIdx)) {\n          if (dk === '*') {\n            newDestKeys.push(k);\n          } else {\n            newDestKeys.push(dk);\n          }\n        }\n        setValueByPath(dataRecord, newDestKeys, v);\n      }\n\n      for (const k of keysToMove) {\n        delete dataRecord[k];\n      }\n    }\n  } else {\n    // Navigate to next level\n    const dataRecord = data as Record<string, unknown>;\n    if (key in dataRecord) {\n      _moveValueRecursive(\n        dataRecord[key],\n        sourceKeys,\n        destKeys,\n        keyIdx + 1,\n        excludeKeys,\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport function tBytes(fromBytes: string | unknown): string {\n  if (typeof fromBytes !== 'string') {\n    throw new Error('fromImageBytes must be a string');\n  }\n  // TODO(b/389133914): Remove dummy bytes converter.\n  return fromBytes;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport * as t from '../_base_transformers.js';\nimport * as common from '../_common.js';\nimport type * as types from '../types.js';\n\nexport function fetchPredictOperationParametersToMldev(\n  fromObject: types.FetchPredictOperationParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['operationName']) !== undefined) {\n    throw new Error('operationName parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['resourceName']) !== undefined) {\n    throw new Error('resourceName parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['config']) !== undefined) {\n    throw new Error('config parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function fetchPredictOperationParametersToVertex(\n  fromObject: types.FetchPredictOperationParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromOperationName = common.getValueByPath(fromObject, [\n    'operationName',\n  ]);\n  if (fromOperationName != null) {\n    common.setValueByPath(toObject, ['operationName'], fromOperationName);\n  }\n\n  const fromResourceName = common.getValueByPath(fromObject, ['resourceName']);\n  if (fromResourceName != null) {\n    common.setValueByPath(toObject, ['_url', 'resourceName'], fromResourceName);\n  }\n\n  return toObject;\n}\n\nexport function generateVideosOperationFromMldev(\n  fromObject: types.GenerateVideosOperation,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);\n  if (fromMetadata != null) {\n    common.setValueByPath(toObject, ['metadata'], fromMetadata);\n  }\n\n  const fromDone = common.getValueByPath(fromObject, ['done']);\n  if (fromDone != null) {\n    common.setValueByPath(toObject, ['done'], fromDone);\n  }\n\n  const fromError = common.getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    common.setValueByPath(toObject, ['error'], fromError);\n  }\n\n  const fromResponse = common.getValueByPath(fromObject, [\n    'response',\n    'generateVideoResponse',\n  ]);\n  if (fromResponse != null) {\n    common.setValueByPath(\n      toObject,\n      ['response'],\n      generateVideosResponseFromMldev(fromResponse),\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateVideosOperationFromVertex(\n  fromObject: types.GenerateVideosOperation,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);\n  if (fromMetadata != null) {\n    common.setValueByPath(toObject, ['metadata'], fromMetadata);\n  }\n\n  const fromDone = common.getValueByPath(fromObject, ['done']);\n  if (fromDone != null) {\n    common.setValueByPath(toObject, ['done'], fromDone);\n  }\n\n  const fromError = common.getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    common.setValueByPath(toObject, ['error'], fromError);\n  }\n\n  const fromResponse = common.getValueByPath(fromObject, ['response']);\n  if (fromResponse != null) {\n    common.setValueByPath(\n      toObject,\n      ['response'],\n      generateVideosResponseFromVertex(fromResponse),\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateVideosResponseFromMldev(\n  fromObject: types.GenerateVideosResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGeneratedVideos = common.getValueByPath(fromObject, [\n    'generatedSamples',\n  ]);\n  if (fromGeneratedVideos != null) {\n    let transformedList = fromGeneratedVideos;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return generatedVideoFromMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['generatedVideos'], transformedList);\n  }\n\n  const fromRaiMediaFilteredCount = common.getValueByPath(fromObject, [\n    'raiMediaFilteredCount',\n  ]);\n  if (fromRaiMediaFilteredCount != null) {\n    common.setValueByPath(\n      toObject,\n      ['raiMediaFilteredCount'],\n      fromRaiMediaFilteredCount,\n    );\n  }\n\n  const fromRaiMediaFilteredReasons = common.getValueByPath(fromObject, [\n    'raiMediaFilteredReasons',\n  ]);\n  if (fromRaiMediaFilteredReasons != null) {\n    common.setValueByPath(\n      toObject,\n      ['raiMediaFilteredReasons'],\n      fromRaiMediaFilteredReasons,\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateVideosResponseFromVertex(\n  fromObject: types.GenerateVideosResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGeneratedVideos = common.getValueByPath(fromObject, ['videos']);\n  if (fromGeneratedVideos != null) {\n    let transformedList = fromGeneratedVideos;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return generatedVideoFromVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['generatedVideos'], transformedList);\n  }\n\n  const fromRaiMediaFilteredCount = common.getValueByPath(fromObject, [\n    'raiMediaFilteredCount',\n  ]);\n  if (fromRaiMediaFilteredCount != null) {\n    common.setValueByPath(\n      toObject,\n      ['raiMediaFilteredCount'],\n      fromRaiMediaFilteredCount,\n    );\n  }\n\n  const fromRaiMediaFilteredReasons = common.getValueByPath(fromObject, [\n    'raiMediaFilteredReasons',\n  ]);\n  if (fromRaiMediaFilteredReasons != null) {\n    common.setValueByPath(\n      toObject,\n      ['raiMediaFilteredReasons'],\n      fromRaiMediaFilteredReasons,\n    );\n  }\n\n  return toObject;\n}\n\nexport function generatedVideoFromMldev(\n  fromObject: types.GeneratedVideo,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVideo = common.getValueByPath(fromObject, ['video']);\n  if (fromVideo != null) {\n    common.setValueByPath(toObject, ['video'], videoFromMldev(fromVideo));\n  }\n\n  return toObject;\n}\n\nexport function generatedVideoFromVertex(\n  fromObject: types.GeneratedVideo,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVideo = common.getValueByPath(fromObject, ['_self']);\n  if (fromVideo != null) {\n    common.setValueByPath(toObject, ['video'], videoFromVertex(fromVideo));\n  }\n\n  return toObject;\n}\n\nexport function getOperationParametersToMldev(\n  fromObject: types.GetOperationParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromOperationName = common.getValueByPath(fromObject, [\n    'operationName',\n  ]);\n  if (fromOperationName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'operationName'],\n      fromOperationName,\n    );\n  }\n\n  return toObject;\n}\n\nexport function getOperationParametersToVertex(\n  fromObject: types.GetOperationParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromOperationName = common.getValueByPath(fromObject, [\n    'operationName',\n  ]);\n  if (fromOperationName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'operationName'],\n      fromOperationName,\n    );\n  }\n\n  return toObject;\n}\n\nexport function videoFromMldev(\n  fromObject: types.Video,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromUri = common.getValueByPath(fromObject, ['uri']);\n  if (fromUri != null) {\n    common.setValueByPath(toObject, ['uri'], fromUri);\n  }\n\n  const fromVideoBytes = common.getValueByPath(fromObject, ['encodedVideo']);\n  if (fromVideoBytes != null) {\n    common.setValueByPath(toObject, ['videoBytes'], t.tBytes(fromVideoBytes));\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['encoding']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function videoFromVertex(\n  fromObject: types.Video,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromUri = common.getValueByPath(fromObject, ['gcsUri']);\n  if (fromUri != null) {\n    common.setValueByPath(toObject, ['uri'], fromUri);\n  }\n\n  const fromVideoBytes = common.getValueByPath(fromObject, [\n    'bytesBase64Encoded',\n  ]);\n  if (fromVideoBytes != null) {\n    common.setValueByPath(toObject, ['videoBytes'], t.tBytes(fromVideoBytes));\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport type {ReferenceImageAPIInternal} from './_internal_types.js';\nimport {\n  generateVideosOperationFromMldev,\n  generateVideosOperationFromVertex,\n} from './converters/_operations_converters.js';\n\n/** Required. Outcome of the code execution. */\nexport enum Outcome {\n  /**\n   * Unspecified status. This value should not be used.\n   */\n  OUTCOME_UNSPECIFIED = 'OUTCOME_UNSPECIFIED',\n  /**\n   * Code execution completed successfully.\n   */\n  OUTCOME_OK = 'OUTCOME_OK',\n  /**\n   * Code execution finished but with a failure. `stderr` should contain the reason.\n   */\n  OUTCOME_FAILED = 'OUTCOME_FAILED',\n  /**\n   * Code execution ran for too long, and was cancelled. There may or may not be a partial output present.\n   */\n  OUTCOME_DEADLINE_EXCEEDED = 'OUTCOME_DEADLINE_EXCEEDED',\n}\n\n/** Required. Programming language of the `code`. */\nexport enum Language {\n  /**\n   * Unspecified language. This value should not be used.\n   */\n  LANGUAGE_UNSPECIFIED = 'LANGUAGE_UNSPECIFIED',\n  /**\n   * Python >= 3.10, with numpy and simpy available.\n   */\n  PYTHON = 'PYTHON',\n}\n\n/** Specifies how the response should be scheduled in the conversation. */\nexport enum FunctionResponseScheduling {\n  /**\n   * This value is unused.\n   */\n  SCHEDULING_UNSPECIFIED = 'SCHEDULING_UNSPECIFIED',\n  /**\n   * Only add the result to the conversation context, do not interrupt or trigger generation.\n   */\n  SILENT = 'SILENT',\n  /**\n   * Add the result to the conversation context, and prompt to generate output without interrupting ongoing generation.\n   */\n  WHEN_IDLE = 'WHEN_IDLE',\n  /**\n   * Add the result to the conversation context, interrupt ongoing generation and prompt to generate output.\n   */\n  INTERRUPT = 'INTERRUPT',\n}\n\n/** Optional. The type of the data. */\nexport enum Type {\n  /**\n   * Not specified, should not be used.\n   */\n  TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED',\n  /**\n   * OpenAPI string type\n   */\n  STRING = 'STRING',\n  /**\n   * OpenAPI number type\n   */\n  NUMBER = 'NUMBER',\n  /**\n   * OpenAPI integer type\n   */\n  INTEGER = 'INTEGER',\n  /**\n   * OpenAPI boolean type\n   */\n  BOOLEAN = 'BOOLEAN',\n  /**\n   * OpenAPI array type\n   */\n  ARRAY = 'ARRAY',\n  /**\n   * OpenAPI object type\n   */\n  OBJECT = 'OBJECT',\n  /**\n   * Null type\n   */\n  NULL = 'NULL',\n}\n\n/** Required. Harm category. */\nexport enum HarmCategory {\n  /**\n   * The harm category is unspecified.\n   */\n  HARM_CATEGORY_UNSPECIFIED = 'HARM_CATEGORY_UNSPECIFIED',\n  /**\n   * The harm category is harassment.\n   */\n  HARM_CATEGORY_HARASSMENT = 'HARM_CATEGORY_HARASSMENT',\n  /**\n   * The harm category is hate speech.\n   */\n  HARM_CATEGORY_HATE_SPEECH = 'HARM_CATEGORY_HATE_SPEECH',\n  /**\n   * The harm category is sexually explicit content.\n   */\n  HARM_CATEGORY_SEXUALLY_EXPLICIT = 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n  /**\n   * The harm category is dangerous content.\n   */\n  HARM_CATEGORY_DANGEROUS_CONTENT = 'HARM_CATEGORY_DANGEROUS_CONTENT',\n  /**\n   * Deprecated: Election filter is not longer supported. The harm category is civic integrity.\n   */\n  HARM_CATEGORY_CIVIC_INTEGRITY = 'HARM_CATEGORY_CIVIC_INTEGRITY',\n  /**\n   * The harm category is image hate. This enum value is not supported in Gemini API.\n   */\n  HARM_CATEGORY_IMAGE_HATE = 'HARM_CATEGORY_IMAGE_HATE',\n  /**\n   * The harm category is image dangerous content. This enum value is not supported in Gemini API.\n   */\n  HARM_CATEGORY_IMAGE_DANGEROUS_CONTENT = 'HARM_CATEGORY_IMAGE_DANGEROUS_CONTENT',\n  /**\n   * The harm category is image harassment. This enum value is not supported in Gemini API.\n   */\n  HARM_CATEGORY_IMAGE_HARASSMENT = 'HARM_CATEGORY_IMAGE_HARASSMENT',\n  /**\n   * The harm category is image sexually explicit content. This enum value is not supported in Gemini API.\n   */\n  HARM_CATEGORY_IMAGE_SEXUALLY_EXPLICIT = 'HARM_CATEGORY_IMAGE_SEXUALLY_EXPLICIT',\n  /**\n   * The harm category is for jailbreak prompts. This enum value is not supported in Gemini API.\n   */\n  HARM_CATEGORY_JAILBREAK = 'HARM_CATEGORY_JAILBREAK',\n}\n\n/** Optional. Specify if the threshold is used for probability or severity score. If not specified, the threshold is used for probability score. */\nexport enum HarmBlockMethod {\n  /**\n   * The harm block method is unspecified.\n   */\n  HARM_BLOCK_METHOD_UNSPECIFIED = 'HARM_BLOCK_METHOD_UNSPECIFIED',\n  /**\n   * The harm block method uses both probability and severity scores.\n   */\n  SEVERITY = 'SEVERITY',\n  /**\n   * The harm block method uses the probability score.\n   */\n  PROBABILITY = 'PROBABILITY',\n}\n\n/** Required. The harm block threshold. */\nexport enum HarmBlockThreshold {\n  /**\n   * Unspecified harm block threshold.\n   */\n  HARM_BLOCK_THRESHOLD_UNSPECIFIED = 'HARM_BLOCK_THRESHOLD_UNSPECIFIED',\n  /**\n   * Block low threshold and above (i.e. block more).\n   */\n  BLOCK_LOW_AND_ABOVE = 'BLOCK_LOW_AND_ABOVE',\n  /**\n   * Block medium threshold and above.\n   */\n  BLOCK_MEDIUM_AND_ABOVE = 'BLOCK_MEDIUM_AND_ABOVE',\n  /**\n   * Block only high threshold (i.e. block less).\n   */\n  BLOCK_ONLY_HIGH = 'BLOCK_ONLY_HIGH',\n  /**\n   * Block none.\n   */\n  BLOCK_NONE = 'BLOCK_NONE',\n  /**\n   * Turn off the safety filter.\n   */\n  OFF = 'OFF',\n}\n\n/** The mode of the predictor to be used in dynamic retrieval. */\nexport enum Mode {\n  /**\n   * Always trigger retrieval.\n   */\n  MODE_UNSPECIFIED = 'MODE_UNSPECIFIED',\n  /**\n   * Run retrieval only when system decides it is necessary.\n   */\n  MODE_DYNAMIC = 'MODE_DYNAMIC',\n}\n\n/** Type of auth scheme. */\nexport enum AuthType {\n  AUTH_TYPE_UNSPECIFIED = 'AUTH_TYPE_UNSPECIFIED',\n  /**\n   * No Auth.\n   */\n  NO_AUTH = 'NO_AUTH',\n  /**\n   * API Key Auth.\n   */\n  API_KEY_AUTH = 'API_KEY_AUTH',\n  /**\n   * HTTP Basic Auth.\n   */\n  HTTP_BASIC_AUTH = 'HTTP_BASIC_AUTH',\n  /**\n   * Google Service Account Auth.\n   */\n  GOOGLE_SERVICE_ACCOUNT_AUTH = 'GOOGLE_SERVICE_ACCOUNT_AUTH',\n  /**\n   * OAuth auth.\n   */\n  OAUTH = 'OAUTH',\n  /**\n   * OpenID Connect (OIDC) Auth.\n   */\n  OIDC_AUTH = 'OIDC_AUTH',\n}\n\n/** The API spec that the external API implements. */\nexport enum ApiSpec {\n  /**\n   * Unspecified API spec. This value should not be used.\n   */\n  API_SPEC_UNSPECIFIED = 'API_SPEC_UNSPECIFIED',\n  /**\n   * Simple search API spec.\n   */\n  SIMPLE_SEARCH = 'SIMPLE_SEARCH',\n  /**\n   * Elastic search API spec.\n   */\n  ELASTIC_SEARCH = 'ELASTIC_SEARCH',\n}\n\n/** Status of the url retrieval. */\nexport enum UrlRetrievalStatus {\n  /**\n   * Default value. This value is unused\n   */\n  URL_RETRIEVAL_STATUS_UNSPECIFIED = 'URL_RETRIEVAL_STATUS_UNSPECIFIED',\n  /**\n   * Url retrieval is successful.\n   */\n  URL_RETRIEVAL_STATUS_SUCCESS = 'URL_RETRIEVAL_STATUS_SUCCESS',\n  /**\n   * Url retrieval is failed due to error.\n   */\n  URL_RETRIEVAL_STATUS_ERROR = 'URL_RETRIEVAL_STATUS_ERROR',\n  /**\n   * Url retrieval is failed because the content is behind paywall.\n   */\n  URL_RETRIEVAL_STATUS_PAYWALL = 'URL_RETRIEVAL_STATUS_PAYWALL',\n  /**\n   * Url retrieval is failed because the content is unsafe.\n   */\n  URL_RETRIEVAL_STATUS_UNSAFE = 'URL_RETRIEVAL_STATUS_UNSAFE',\n}\n\n/** Output only. The reason why the model stopped generating tokens.\n\nIf empty, the model has not stopped generating the tokens. */\nexport enum FinishReason {\n  /**\n   * The finish reason is unspecified.\n   */\n  FINISH_REASON_UNSPECIFIED = 'FINISH_REASON_UNSPECIFIED',\n  /**\n   * Token generation reached a natural stopping point or a configured stop sequence.\n   */\n  STOP = 'STOP',\n  /**\n   * Token generation reached the configured maximum output tokens.\n   */\n  MAX_TOKENS = 'MAX_TOKENS',\n  /**\n   * Token generation stopped because the content potentially contains safety violations. NOTE: When streaming, [content][] is empty if content filters blocks the output.\n   */\n  SAFETY = 'SAFETY',\n  /**\n   * The token generation stopped because of potential recitation.\n   */\n  RECITATION = 'RECITATION',\n  /**\n   * The token generation stopped because of using an unsupported language.\n   */\n  LANGUAGE = 'LANGUAGE',\n  /**\n   * All other reasons that stopped the token generation.\n   */\n  OTHER = 'OTHER',\n  /**\n   * Token generation stopped because the content contains forbidden terms.\n   */\n  BLOCKLIST = 'BLOCKLIST',\n  /**\n   * Token generation stopped for potentially containing prohibited content.\n   */\n  PROHIBITED_CONTENT = 'PROHIBITED_CONTENT',\n  /**\n   * Token generation stopped because the content potentially contains Sensitive Personally Identifiable Information (SPII).\n   */\n  SPII = 'SPII',\n  /**\n   * The function call generated by the model is invalid.\n   */\n  MALFORMED_FUNCTION_CALL = 'MALFORMED_FUNCTION_CALL',\n  /**\n   * Token generation stopped because generated images have safety violations.\n   */\n  IMAGE_SAFETY = 'IMAGE_SAFETY',\n  /**\n   * The tool call generated by the model is invalid.\n   */\n  UNEXPECTED_TOOL_CALL = 'UNEXPECTED_TOOL_CALL',\n  /**\n   * Image generation stopped because the generated images have prohibited content.\n   */\n  IMAGE_PROHIBITED_CONTENT = 'IMAGE_PROHIBITED_CONTENT',\n  /**\n   * The model was expected to generate an image, but none was generated.\n   */\n  NO_IMAGE = 'NO_IMAGE',\n}\n\n/** Output only. Harm probability levels in the content. */\nexport enum HarmProbability {\n  /**\n   * Harm probability unspecified.\n   */\n  HARM_PROBABILITY_UNSPECIFIED = 'HARM_PROBABILITY_UNSPECIFIED',\n  /**\n   * Negligible level of harm.\n   */\n  NEGLIGIBLE = 'NEGLIGIBLE',\n  /**\n   * Low level of harm.\n   */\n  LOW = 'LOW',\n  /**\n   * Medium level of harm.\n   */\n  MEDIUM = 'MEDIUM',\n  /**\n   * High level of harm.\n   */\n  HIGH = 'HIGH',\n}\n\n/** Output only. Harm severity levels in the content. */\nexport enum HarmSeverity {\n  /**\n   * Harm severity unspecified.\n   */\n  HARM_SEVERITY_UNSPECIFIED = 'HARM_SEVERITY_UNSPECIFIED',\n  /**\n   * Negligible level of harm severity.\n   */\n  HARM_SEVERITY_NEGLIGIBLE = 'HARM_SEVERITY_NEGLIGIBLE',\n  /**\n   * Low level of harm severity.\n   */\n  HARM_SEVERITY_LOW = 'HARM_SEVERITY_LOW',\n  /**\n   * Medium level of harm severity.\n   */\n  HARM_SEVERITY_MEDIUM = 'HARM_SEVERITY_MEDIUM',\n  /**\n   * High level of harm severity.\n   */\n  HARM_SEVERITY_HIGH = 'HARM_SEVERITY_HIGH',\n}\n\n/** Output only. The reason why the prompt was blocked. */\nexport enum BlockedReason {\n  /**\n   * The blocked reason is unspecified.\n   */\n  BLOCKED_REASON_UNSPECIFIED = 'BLOCKED_REASON_UNSPECIFIED',\n  /**\n   * The prompt was blocked for safety reasons.\n   */\n  SAFETY = 'SAFETY',\n  /**\n   * The prompt was blocked for other reasons. For example, it may be due to the prompt's language, or because it contains other harmful content.\n   */\n  OTHER = 'OTHER',\n  /**\n   * The prompt was blocked because it contains a term from the terminology blocklist.\n   */\n  BLOCKLIST = 'BLOCKLIST',\n  /**\n   * The prompt was blocked because it contains prohibited content.\n   */\n  PROHIBITED_CONTENT = 'PROHIBITED_CONTENT',\n  /**\n   * The prompt was blocked because it contains content that is unsafe for image generation.\n   */\n  IMAGE_SAFETY = 'IMAGE_SAFETY',\n  /**\n   * The prompt was blocked by Model Armor. This enum value is not supported in Gemini API.\n   */\n  MODEL_ARMOR = 'MODEL_ARMOR',\n  /**\n   * The prompt was blocked as a jailbreak attempt. This enum value is not supported in Gemini API.\n   */\n  JAILBREAK = 'JAILBREAK',\n}\n\n/** Output only. Traffic type. This shows whether a request consumes Pay-As-You-Go or Provisioned Throughput quota. */\nexport enum TrafficType {\n  /**\n   * Unspecified request traffic type.\n   */\n  TRAFFIC_TYPE_UNSPECIFIED = 'TRAFFIC_TYPE_UNSPECIFIED',\n  /**\n   * Type for Pay-As-You-Go traffic.\n   */\n  ON_DEMAND = 'ON_DEMAND',\n  /**\n   * Type for Provisioned Throughput traffic.\n   */\n  PROVISIONED_THROUGHPUT = 'PROVISIONED_THROUGHPUT',\n}\n\n/** Server content modalities. */\nexport enum Modality {\n  /**\n   * The modality is unspecified.\n   */\n  MODALITY_UNSPECIFIED = 'MODALITY_UNSPECIFIED',\n  /**\n   * Indicates the model should return text\n   */\n  TEXT = 'TEXT',\n  /**\n   * Indicates the model should return images.\n   */\n  IMAGE = 'IMAGE',\n  /**\n   * Indicates the model should return audio.\n   */\n  AUDIO = 'AUDIO',\n}\n\n/** The media resolution to use. */\nexport enum MediaResolution {\n  /**\n   * Media resolution has not been set\n   */\n  MEDIA_RESOLUTION_UNSPECIFIED = 'MEDIA_RESOLUTION_UNSPECIFIED',\n  /**\n   * Media resolution set to low (64 tokens).\n   */\n  MEDIA_RESOLUTION_LOW = 'MEDIA_RESOLUTION_LOW',\n  /**\n   * Media resolution set to medium (256 tokens).\n   */\n  MEDIA_RESOLUTION_MEDIUM = 'MEDIA_RESOLUTION_MEDIUM',\n  /**\n   * Media resolution set to high (zoomed reframing with 256 tokens).\n   */\n  MEDIA_RESOLUTION_HIGH = 'MEDIA_RESOLUTION_HIGH',\n}\n\n/** Job state. */\nexport enum JobState {\n  /**\n   * The job state is unspecified.\n   */\n  JOB_STATE_UNSPECIFIED = 'JOB_STATE_UNSPECIFIED',\n  /**\n   * The job has been just created or resumed and processing has not yet begun.\n   */\n  JOB_STATE_QUEUED = 'JOB_STATE_QUEUED',\n  /**\n   * The service is preparing to run the job.\n   */\n  JOB_STATE_PENDING = 'JOB_STATE_PENDING',\n  /**\n   * The job is in progress.\n   */\n  JOB_STATE_RUNNING = 'JOB_STATE_RUNNING',\n  /**\n   * The job completed successfully.\n   */\n  JOB_STATE_SUCCEEDED = 'JOB_STATE_SUCCEEDED',\n  /**\n   * The job failed.\n   */\n  JOB_STATE_FAILED = 'JOB_STATE_FAILED',\n  /**\n   * The job is being cancelled. From this state the job may only go to either `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED` or `JOB_STATE_CANCELLED`.\n   */\n  JOB_STATE_CANCELLING = 'JOB_STATE_CANCELLING',\n  /**\n   * The job has been cancelled.\n   */\n  JOB_STATE_CANCELLED = 'JOB_STATE_CANCELLED',\n  /**\n   * The job has been stopped, and can be resumed.\n   */\n  JOB_STATE_PAUSED = 'JOB_STATE_PAUSED',\n  /**\n   * The job has expired.\n   */\n  JOB_STATE_EXPIRED = 'JOB_STATE_EXPIRED',\n  /**\n   * The job is being updated. Only jobs in the `JOB_STATE_RUNNING` state can be updated. After updating, the job goes back to the `JOB_STATE_RUNNING` state.\n   */\n  JOB_STATE_UPDATING = 'JOB_STATE_UPDATING',\n  /**\n   * The job is partially succeeded, some results may be missing due to errors.\n   */\n  JOB_STATE_PARTIALLY_SUCCEEDED = 'JOB_STATE_PARTIALLY_SUCCEEDED',\n}\n\n/** Tuning mode. */\nexport enum TuningMode {\n  /**\n   * Tuning mode is unspecified.\n   */\n  TUNING_MODE_UNSPECIFIED = 'TUNING_MODE_UNSPECIFIED',\n  /**\n   * Full fine-tuning mode.\n   */\n  TUNING_MODE_FULL = 'TUNING_MODE_FULL',\n  /**\n   * PEFT adapter tuning mode.\n   */\n  TUNING_MODE_PEFT_ADAPTER = 'TUNING_MODE_PEFT_ADAPTER',\n}\n\n/** Optional. Adapter size for tuning. */\nexport enum AdapterSize {\n  /**\n   * Adapter size is unspecified.\n   */\n  ADAPTER_SIZE_UNSPECIFIED = 'ADAPTER_SIZE_UNSPECIFIED',\n  /**\n   * Adapter size 1.\n   */\n  ADAPTER_SIZE_ONE = 'ADAPTER_SIZE_ONE',\n  /**\n   * Adapter size 2.\n   */\n  ADAPTER_SIZE_TWO = 'ADAPTER_SIZE_TWO',\n  /**\n   * Adapter size 4.\n   */\n  ADAPTER_SIZE_FOUR = 'ADAPTER_SIZE_FOUR',\n  /**\n   * Adapter size 8.\n   */\n  ADAPTER_SIZE_EIGHT = 'ADAPTER_SIZE_EIGHT',\n  /**\n   * Adapter size 16.\n   */\n  ADAPTER_SIZE_SIXTEEN = 'ADAPTER_SIZE_SIXTEEN',\n  /**\n   * Adapter size 32.\n   */\n  ADAPTER_SIZE_THIRTY_TWO = 'ADAPTER_SIZE_THIRTY_TWO',\n}\n\n/** Optional. The tuning task. Either I2V or T2V. */\nexport enum TuningTask {\n  /**\n   * Default value. This value is unused.\n   */\n  TUNING_TASK_UNSPECIFIED = 'TUNING_TASK_UNSPECIFIED',\n  /**\n   * Tuning task for image to video.\n   */\n  TUNING_TASK_I2V = 'TUNING_TASK_I2V',\n  /**\n   * Tuning task for text to video.\n   */\n  TUNING_TASK_T2V = 'TUNING_TASK_T2V',\n}\n\n/** Options for feature selection preference. */\nexport enum FeatureSelectionPreference {\n  FEATURE_SELECTION_PREFERENCE_UNSPECIFIED = 'FEATURE_SELECTION_PREFERENCE_UNSPECIFIED',\n  PRIORITIZE_QUALITY = 'PRIORITIZE_QUALITY',\n  BALANCED = 'BALANCED',\n  PRIORITIZE_COST = 'PRIORITIZE_COST',\n}\n\n/** Defines the function behavior. Defaults to `BLOCKING`. */\nexport enum Behavior {\n  /**\n   * This value is unused.\n   */\n  UNSPECIFIED = 'UNSPECIFIED',\n  /**\n   * If set, the system will wait to receive the function response before continuing the conversation.\n   */\n  BLOCKING = 'BLOCKING',\n  /**\n   * If set, the system will not wait to receive the function response. Instead, it will attempt to handle function responses as they become available while maintaining the conversation between the user and the model.\n   */\n  NON_BLOCKING = 'NON_BLOCKING',\n}\n\n/** Config for the dynamic retrieval config mode. */\nexport enum DynamicRetrievalConfigMode {\n  /**\n   * Always trigger retrieval.\n   */\n  MODE_UNSPECIFIED = 'MODE_UNSPECIFIED',\n  /**\n   * Run retrieval only when system decides it is necessary.\n   */\n  MODE_DYNAMIC = 'MODE_DYNAMIC',\n}\n\n/** The environment being operated. */\nexport enum Environment {\n  /**\n   * Defaults to browser.\n   */\n  ENVIRONMENT_UNSPECIFIED = 'ENVIRONMENT_UNSPECIFIED',\n  /**\n   * Operates in a web browser.\n   */\n  ENVIRONMENT_BROWSER = 'ENVIRONMENT_BROWSER',\n}\n\n/** Config for the function calling config mode. */\nexport enum FunctionCallingConfigMode {\n  /**\n   * The function calling config mode is unspecified. Should not be used.\n   */\n  MODE_UNSPECIFIED = 'MODE_UNSPECIFIED',\n  /**\n   * Default model behavior, model decides to predict either function calls or natural language response.\n   */\n  AUTO = 'AUTO',\n  /**\n   * Model is constrained to always predicting function calls only. If \"allowed_function_names\" are set, the predicted function calls will be limited to any one of \"allowed_function_names\", else the predicted function calls will be any one of the provided \"function_declarations\".\n   */\n  ANY = 'ANY',\n  /**\n   * Model will not predict any function calls. Model behavior is same as when not passing any function declarations.\n   */\n  NONE = 'NONE',\n  /**\n   * Model decides to predict either a function call or a natural language response, but will validate function calls with constrained decoding. If \"allowed_function_names\" are set, the predicted function call will be limited to any one of \"allowed_function_names\", else the predicted function call will be any one of the provided \"function_declarations\".\n   */\n  VALIDATED = 'VALIDATED',\n}\n\n/** Enum that controls the safety filter level for objectionable content. */\nexport enum SafetyFilterLevel {\n  BLOCK_LOW_AND_ABOVE = 'BLOCK_LOW_AND_ABOVE',\n  BLOCK_MEDIUM_AND_ABOVE = 'BLOCK_MEDIUM_AND_ABOVE',\n  BLOCK_ONLY_HIGH = 'BLOCK_ONLY_HIGH',\n  BLOCK_NONE = 'BLOCK_NONE',\n}\n\n/** Enum that controls the generation of people. */\nexport enum PersonGeneration {\n  /**\n   * Block generation of images of people.\n   */\n  DONT_ALLOW = 'DONT_ALLOW',\n  /**\n   * Generate images of adults, but not children.\n   */\n  ALLOW_ADULT = 'ALLOW_ADULT',\n  /**\n   * Generate images that include adults and children.\n   */\n  ALLOW_ALL = 'ALLOW_ALL',\n}\n\n/** Enum that specifies the language of the text in the prompt. */\nexport enum ImagePromptLanguage {\n  /**\n   * Auto-detect the language.\n   */\n  auto = 'auto',\n  /**\n   * English\n   */\n  en = 'en',\n  /**\n   * Japanese\n   */\n  ja = 'ja',\n  /**\n   * Korean\n   */\n  ko = 'ko',\n  /**\n   * Hindi\n   */\n  hi = 'hi',\n  /**\n   * Chinese\n   */\n  zh = 'zh',\n  /**\n   * Portuguese\n   */\n  pt = 'pt',\n  /**\n   * Spanish\n   */\n  es = 'es',\n}\n\n/** Enum representing the mask mode of a mask reference image. */\nexport enum MaskReferenceMode {\n  MASK_MODE_DEFAULT = 'MASK_MODE_DEFAULT',\n  MASK_MODE_USER_PROVIDED = 'MASK_MODE_USER_PROVIDED',\n  MASK_MODE_BACKGROUND = 'MASK_MODE_BACKGROUND',\n  MASK_MODE_FOREGROUND = 'MASK_MODE_FOREGROUND',\n  MASK_MODE_SEMANTIC = 'MASK_MODE_SEMANTIC',\n}\n\n/** Enum representing the control type of a control reference image. */\nexport enum ControlReferenceType {\n  CONTROL_TYPE_DEFAULT = 'CONTROL_TYPE_DEFAULT',\n  CONTROL_TYPE_CANNY = 'CONTROL_TYPE_CANNY',\n  CONTROL_TYPE_SCRIBBLE = 'CONTROL_TYPE_SCRIBBLE',\n  CONTROL_TYPE_FACE_MESH = 'CONTROL_TYPE_FACE_MESH',\n}\n\n/** Enum representing the subject type of a subject reference image. */\nexport enum SubjectReferenceType {\n  SUBJECT_TYPE_DEFAULT = 'SUBJECT_TYPE_DEFAULT',\n  SUBJECT_TYPE_PERSON = 'SUBJECT_TYPE_PERSON',\n  SUBJECT_TYPE_ANIMAL = 'SUBJECT_TYPE_ANIMAL',\n  SUBJECT_TYPE_PRODUCT = 'SUBJECT_TYPE_PRODUCT',\n}\n\n/** Enum representing the editing mode. */\nexport enum EditMode {\n  EDIT_MODE_DEFAULT = 'EDIT_MODE_DEFAULT',\n  EDIT_MODE_INPAINT_REMOVAL = 'EDIT_MODE_INPAINT_REMOVAL',\n  EDIT_MODE_INPAINT_INSERTION = 'EDIT_MODE_INPAINT_INSERTION',\n  EDIT_MODE_OUTPAINT = 'EDIT_MODE_OUTPAINT',\n  EDIT_MODE_CONTROLLED_EDITING = 'EDIT_MODE_CONTROLLED_EDITING',\n  EDIT_MODE_STYLE = 'EDIT_MODE_STYLE',\n  EDIT_MODE_BGSWAP = 'EDIT_MODE_BGSWAP',\n  EDIT_MODE_PRODUCT_IMAGE = 'EDIT_MODE_PRODUCT_IMAGE',\n}\n\n/** Enum that represents the segmentation mode. */\nexport enum SegmentMode {\n  FOREGROUND = 'FOREGROUND',\n  BACKGROUND = 'BACKGROUND',\n  PROMPT = 'PROMPT',\n  SEMANTIC = 'SEMANTIC',\n  INTERACTIVE = 'INTERACTIVE',\n}\n\n/** Enum for the reference type of a video generation reference image. */\nexport enum VideoGenerationReferenceType {\n  /**\n   * A reference image that provides assets to the generated video,\n      such as the scene, an object, a character, etc.\n   */\n  ASSET = 'ASSET',\n  /**\n   * A reference image that provides aesthetics including colors,\n      lighting, texture, etc., to be used as the style of the generated video,\n      such as 'anime', 'photography', 'origami', etc.\n   */\n  STYLE = 'STYLE',\n}\n\n/** Enum for the mask mode of a video generation mask. */\nexport enum VideoGenerationMaskMode {\n  /**\n   * The image mask contains a masked rectangular region which is\n      applied on the first frame of the input video. The object described in\n      the prompt is inserted into this region and will appear in subsequent\n      frames.\n   */\n  INSERT = 'INSERT',\n  /**\n   * The image mask is used to determine an object in the\n      first video frame to track. This object is removed from the video.\n   */\n  REMOVE = 'REMOVE',\n  /**\n   * The image mask is used to determine a region in the\n      video. Objects in this region will be removed.\n   */\n  REMOVE_STATIC = 'REMOVE_STATIC',\n  /**\n   * The image mask contains a masked rectangular region where\n      the input video will go. The remaining area will be generated. Video\n      masks are not supported.\n   */\n  OUTPAINT = 'OUTPAINT',\n}\n\n/** Enum that controls the compression quality of the generated videos. */\nexport enum VideoCompressionQuality {\n  /**\n   * Optimized video compression quality. This will produce videos\n      with a compressed, smaller file size.\n   */\n  OPTIMIZED = 'OPTIMIZED',\n  /**\n   * Lossless video compression quality. This will produce videos\n      with a larger file size.\n   */\n  LOSSLESS = 'LOSSLESS',\n}\n\n/** State for the lifecycle of a File. */\nexport enum FileState {\n  STATE_UNSPECIFIED = 'STATE_UNSPECIFIED',\n  PROCESSING = 'PROCESSING',\n  ACTIVE = 'ACTIVE',\n  FAILED = 'FAILED',\n}\n\n/** Source of the File. */\nexport enum FileSource {\n  SOURCE_UNSPECIFIED = 'SOURCE_UNSPECIFIED',\n  UPLOADED = 'UPLOADED',\n  GENERATED = 'GENERATED',\n}\n\n/** The reason why the turn is complete. */\nexport enum TurnCompleteReason {\n  /**\n   * Default value. Reason is unspecified.\n   */\n  TURN_COMPLETE_REASON_UNSPECIFIED = 'TURN_COMPLETE_REASON_UNSPECIFIED',\n  /**\n   * The function call generated by the model is invalid.\n   */\n  MALFORMED_FUNCTION_CALL = 'MALFORMED_FUNCTION_CALL',\n  /**\n   * The response is rejected by the model.\n   */\n  RESPONSE_REJECTED = 'RESPONSE_REJECTED',\n  /**\n   * Needs more input from the user.\n   */\n  NEED_MORE_INPUT = 'NEED_MORE_INPUT',\n}\n\n/** Server content modalities. */\nexport enum MediaModality {\n  /**\n   * The modality is unspecified.\n   */\n  MODALITY_UNSPECIFIED = 'MODALITY_UNSPECIFIED',\n  /**\n   * Plain text.\n   */\n  TEXT = 'TEXT',\n  /**\n   * Images.\n   */\n  IMAGE = 'IMAGE',\n  /**\n   * Video.\n   */\n  VIDEO = 'VIDEO',\n  /**\n   * Audio.\n   */\n  AUDIO = 'AUDIO',\n  /**\n   * Document, e.g. PDF.\n   */\n  DOCUMENT = 'DOCUMENT',\n}\n\n/** Start of speech sensitivity. */\nexport enum StartSensitivity {\n  /**\n   * The default is START_SENSITIVITY_LOW.\n   */\n  START_SENSITIVITY_UNSPECIFIED = 'START_SENSITIVITY_UNSPECIFIED',\n  /**\n   * Automatic detection will detect the start of speech more often.\n   */\n  START_SENSITIVITY_HIGH = 'START_SENSITIVITY_HIGH',\n  /**\n   * Automatic detection will detect the start of speech less often.\n   */\n  START_SENSITIVITY_LOW = 'START_SENSITIVITY_LOW',\n}\n\n/** End of speech sensitivity. */\nexport enum EndSensitivity {\n  /**\n   * The default is END_SENSITIVITY_LOW.\n   */\n  END_SENSITIVITY_UNSPECIFIED = 'END_SENSITIVITY_UNSPECIFIED',\n  /**\n   * Automatic detection ends speech more often.\n   */\n  END_SENSITIVITY_HIGH = 'END_SENSITIVITY_HIGH',\n  /**\n   * Automatic detection ends speech less often.\n   */\n  END_SENSITIVITY_LOW = 'END_SENSITIVITY_LOW',\n}\n\n/** The different ways of handling user activity. */\nexport enum ActivityHandling {\n  /**\n   * If unspecified, the default behavior is `START_OF_ACTIVITY_INTERRUPTS`.\n   */\n  ACTIVITY_HANDLING_UNSPECIFIED = 'ACTIVITY_HANDLING_UNSPECIFIED',\n  /**\n   * If true, start of activity will interrupt the model's response (also called \"barge in\"). The model's current response will be cut-off in the moment of the interruption. This is the default behavior.\n   */\n  START_OF_ACTIVITY_INTERRUPTS = 'START_OF_ACTIVITY_INTERRUPTS',\n  /**\n   * The model's response will not be interrupted.\n   */\n  NO_INTERRUPTION = 'NO_INTERRUPTION',\n}\n\n/** Options about which input is included in the user's turn. */\nexport enum TurnCoverage {\n  /**\n   * If unspecified, the default behavior is `TURN_INCLUDES_ONLY_ACTIVITY`.\n   */\n  TURN_COVERAGE_UNSPECIFIED = 'TURN_COVERAGE_UNSPECIFIED',\n  /**\n   * The users turn only includes activity since the last turn, excluding inactivity (e.g. silence on the audio stream). This is the default behavior.\n   */\n  TURN_INCLUDES_ONLY_ACTIVITY = 'TURN_INCLUDES_ONLY_ACTIVITY',\n  /**\n   * The users turn includes all realtime input since the last turn, including inactivity (e.g. silence on the audio stream).\n   */\n  TURN_INCLUDES_ALL_INPUT = 'TURN_INCLUDES_ALL_INPUT',\n}\n\n/** Scale of the generated music. */\nexport enum Scale {\n  /**\n   * Default value. This value is unused.\n   */\n  SCALE_UNSPECIFIED = 'SCALE_UNSPECIFIED',\n  /**\n   * C major or A minor.\n   */\n  C_MAJOR_A_MINOR = 'C_MAJOR_A_MINOR',\n  /**\n   * Db major or Bb minor.\n   */\n  D_FLAT_MAJOR_B_FLAT_MINOR = 'D_FLAT_MAJOR_B_FLAT_MINOR',\n  /**\n   * D major or B minor.\n   */\n  D_MAJOR_B_MINOR = 'D_MAJOR_B_MINOR',\n  /**\n   * Eb major or C minor\n   */\n  E_FLAT_MAJOR_C_MINOR = 'E_FLAT_MAJOR_C_MINOR',\n  /**\n   * E major or Db minor.\n   */\n  E_MAJOR_D_FLAT_MINOR = 'E_MAJOR_D_FLAT_MINOR',\n  /**\n   * F major or D minor.\n   */\n  F_MAJOR_D_MINOR = 'F_MAJOR_D_MINOR',\n  /**\n   * Gb major or Eb minor.\n   */\n  G_FLAT_MAJOR_E_FLAT_MINOR = 'G_FLAT_MAJOR_E_FLAT_MINOR',\n  /**\n   * G major or E minor.\n   */\n  G_MAJOR_E_MINOR = 'G_MAJOR_E_MINOR',\n  /**\n   * Ab major or F minor.\n   */\n  A_FLAT_MAJOR_F_MINOR = 'A_FLAT_MAJOR_F_MINOR',\n  /**\n   * A major or Gb minor.\n   */\n  A_MAJOR_G_FLAT_MINOR = 'A_MAJOR_G_FLAT_MINOR',\n  /**\n   * Bb major or G minor.\n   */\n  B_FLAT_MAJOR_G_MINOR = 'B_FLAT_MAJOR_G_MINOR',\n  /**\n   * B major or Ab minor.\n   */\n  B_MAJOR_A_FLAT_MINOR = 'B_MAJOR_A_FLAT_MINOR',\n}\n\n/** The mode of music generation. */\nexport enum MusicGenerationMode {\n  /**\n   * Rely on the server default generation mode.\n   */\n  MUSIC_GENERATION_MODE_UNSPECIFIED = 'MUSIC_GENERATION_MODE_UNSPECIFIED',\n  /**\n   * Steer text prompts to regions of latent space with higher quality\n      music.\n   */\n  QUALITY = 'QUALITY',\n  /**\n   * Steer text prompts to regions of latent space with a larger\n      diversity of music.\n   */\n  DIVERSITY = 'DIVERSITY',\n  /**\n   * Steer text prompts to regions of latent space more likely to\n      generate music with vocals.\n   */\n  VOCALIZATION = 'VOCALIZATION',\n}\n\n/** The playback control signal to apply to the music generation. */\nexport enum LiveMusicPlaybackControl {\n  /**\n   * This value is unused.\n   */\n  PLAYBACK_CONTROL_UNSPECIFIED = 'PLAYBACK_CONTROL_UNSPECIFIED',\n  /**\n   * Start generating the music.\n   */\n  PLAY = 'PLAY',\n  /**\n   * Hold the music generation. Use PLAY to resume from the current position.\n   */\n  PAUSE = 'PAUSE',\n  /**\n   * Stop the music generation and reset the context (prompts retained).\n      Use PLAY to restart the music generation.\n   */\n  STOP = 'STOP',\n  /**\n   * Reset the context of the music generation without stopping it.\n      Retains the current prompts and config.\n   */\n  RESET_CONTEXT = 'RESET_CONTEXT',\n}\n\n/** Describes how the video in the Part should be used by the model. */\nexport declare interface VideoMetadata {\n  /** The frame rate of the video sent to the model. If not specified, the\n        default value will be 1.0. The fps range is (0.0, 24.0]. */\n  fps?: number;\n  /** Optional. The end offset of the video. */\n  endOffset?: string;\n  /** Optional. The start offset of the video. */\n  startOffset?: string;\n}\n\n/** Content blob. */\nexport declare interface Blob {\n  /** Optional. Display name of the blob. Used to provide a label or filename to distinguish blobs. This field is not currently used in the Gemini GenerateContent calls. */\n  displayName?: string;\n  /** Required. Raw bytes.\n   * @remarks Encoded as base64 string. */\n  data?: string;\n  /** Required. The IANA standard MIME type of the source data. */\n  mimeType?: string;\n}\n\n/** URI based data. */\nexport declare interface FileData {\n  /** Optional. Display name of the file data. Used to provide a label or filename to distinguish file datas. It is not currently used in the Gemini GenerateContent calls. */\n  displayName?: string;\n  /** Required. URI. */\n  fileUri?: string;\n  /** Required. The IANA standard MIME type of the source data. */\n  mimeType?: string;\n}\n\n/** A function call. */\nexport declare interface FunctionCall {\n  /** The unique id of the function call. If populated, the client to execute the\n   `function_call` and return the response with the matching `id`. */\n  id?: string;\n  /** Optional. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details. */\n  args?: Record<string, unknown>;\n  /** Required. The name of the function to call. Matches [FunctionDeclaration.name]. */\n  name?: string;\n}\n\n/** Result of executing the [ExecutableCode]. Only generated when using the [CodeExecution] tool, and always follows a `part` containing the [ExecutableCode]. */\nexport declare interface CodeExecutionResult {\n  /** Required. Outcome of the code execution. */\n  outcome?: Outcome;\n  /** Optional. Contains stdout when code execution is successful, stderr or other description otherwise. */\n  output?: string;\n}\n\n/** Code generated by the model that is meant to be executed, and the result returned to the model. Generated when using the [CodeExecution] tool, in which the code will be automatically executed, and a corresponding [CodeExecutionResult] will also be generated. */\nexport declare interface ExecutableCode {\n  /** Required. The code to be executed. */\n  code?: string;\n  /** Required. Programming language of the `code`. */\n  language?: Language;\n}\n\n/** Raw media bytes for function response.\n\nText should not be sent as raw bytes, use the FunctionResponse.response\nfield. */\nexport class FunctionResponseBlob {\n  /** Required. The IANA standard MIME type of the source data. */\n  mimeType?: string;\n  /** Required. Inline media bytes.\n   * @remarks Encoded as base64 string. */\n  data?: string;\n}\n\n/** URI based data for function response. */\nexport class FunctionResponseFileData {\n  /** Required. URI. */\n  fileUri?: string;\n  /** Required. The IANA standard MIME type of the source data. */\n  mimeType?: string;\n}\n\n/** A datatype containing media that is part of a `FunctionResponse` message.\n\nA `FunctionResponsePart` consists of data which has an associated datatype. A\n`FunctionResponsePart` can only contain one of the accepted types in\n`FunctionResponsePart.data`.\n\nA `FunctionResponsePart` must have a fixed IANA MIME type identifying the\ntype and subtype of the media if the `inline_data` field is filled with raw\nbytes. */\nexport class FunctionResponsePart {\n  /** Optional. Inline media bytes. */\n  inlineData?: FunctionResponseBlob;\n  /** Optional. URI based data. */\n  fileData?: FunctionResponseFileData;\n}\n/**\n * Creates a `FunctionResponsePart` object from a `base64` encoded `string`.\n */\nexport function createFunctionResponsePartFromBase64(\n  data: string,\n  mimeType: string,\n): FunctionResponsePart {\n  return {\n    inlineData: {\n      data: data,\n      mimeType: mimeType,\n    },\n  };\n}\n/**\n * Creates a `FunctionResponsePart` object from a `URI` string.\n */\nexport function createFunctionResponsePartFromUri(\n  uri: string,\n  mimeType: string,\n): FunctionResponsePart {\n  return {\n    fileData: {\n      fileUri: uri,\n      mimeType: mimeType,\n    },\n  };\n}\n\n/** A function response. */\nexport class FunctionResponse {\n  /** Signals that function call continues, and more responses will be returned, turning the function call into a generator. Is only applicable to NON_BLOCKING function calls (see FunctionDeclaration.behavior for details), ignored otherwise. If false, the default, future responses will not be considered. Is only applicable to NON_BLOCKING function calls, is ignored otherwise. If set to false, future responses will not be considered. It is allowed to return empty `response` with `will_continue=False` to signal that the function call is finished. */\n  willContinue?: boolean;\n  /** Specifies how the response should be scheduled in the conversation. Only applicable to NON_BLOCKING function calls, is ignored otherwise. Defaults to WHEN_IDLE. */\n  scheduling?: FunctionResponseScheduling;\n  /** List of parts that constitute a function response. Each part may\n      have a different IANA MIME type. */\n  parts?: FunctionResponsePart[];\n  /** Optional. The id of the function call this response is for. Populated by the client to match the corresponding function call `id`. */\n  id?: string;\n  /** Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name]. */\n  name?: string;\n  /** Required. The function response in JSON object format. Use \"output\" key to specify function output and \"error\" key to specify error details (if any). If \"output\" and \"error\" keys are not specified, then whole \"response\" is treated as function output. */\n  response?: Record<string, unknown>;\n}\n\n/** A datatype containing media content.\n\nExactly one field within a Part should be set, representing the specific type\nof content being conveyed. Using multiple fields within the same `Part`\ninstance is considered invalid. */\nexport declare interface Part {\n  /** Metadata for a given video. */\n  videoMetadata?: VideoMetadata;\n  /** Indicates if the part is thought from the model. */\n  thought?: boolean;\n  /** Optional. Inlined bytes data. */\n  inlineData?: Blob;\n  /** Optional. URI based data. */\n  fileData?: FileData;\n  /** An opaque signature for the thought so it can be reused in subsequent requests.\n   * @remarks Encoded as base64 string. */\n  thoughtSignature?: string;\n  /** A predicted [FunctionCall] returned from the model that contains a string\n      representing the [FunctionDeclaration.name] and a structured JSON object\n      containing the parameters and their values. */\n  functionCall?: FunctionCall;\n  /** Optional. Result of executing the [ExecutableCode]. */\n  codeExecutionResult?: CodeExecutionResult;\n  /** Optional. Code generated by the model that is meant to be executed. */\n  executableCode?: ExecutableCode;\n  /** Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model. */\n  functionResponse?: FunctionResponse;\n  /** Optional. Text part (can be code). */\n  text?: string;\n}\n/**\n * Creates a `Part` object from a `URI` string.\n */\nexport function createPartFromUri(uri: string, mimeType: string): Part {\n  return {\n    fileData: {\n      fileUri: uri,\n      mimeType: mimeType,\n    },\n  };\n}\n/**\n * Creates a `Part` object from a `text` string.\n */\nexport function createPartFromText(text: string): Part {\n  return {\n    text: text,\n  };\n}\n/**\n * Creates a `Part` object from a `FunctionCall` object.\n */\nexport function createPartFromFunctionCall(\n  name: string,\n  args: Record<string, unknown>,\n): Part {\n  return {\n    functionCall: {\n      name: name,\n      args: args,\n    },\n  };\n}\n/**\n * Creates a `Part` object from a `FunctionResponse` object.\n */\nexport function createPartFromFunctionResponse(\n  id: string,\n  name: string,\n  response: Record<string, unknown>,\n  parts: FunctionResponsePart[] = [],\n): Part {\n  return {\n    functionResponse: {\n      id: id,\n      name: name,\n      response: response,\n      ...(parts.length > 0 && {parts}),\n    },\n  };\n}\n/**\n * Creates a `Part` object from a `base64` encoded `string`.\n */\nexport function createPartFromBase64(data: string, mimeType: string): Part {\n  return {\n    inlineData: {\n      data: data,\n      mimeType: mimeType,\n    },\n  };\n}\n/**\n * Creates a `Part` object from the `outcome` and `output` of a `CodeExecutionResult` object.\n */\nexport function createPartFromCodeExecutionResult(\n  outcome: Outcome,\n  output: string,\n): Part {\n  return {\n    codeExecutionResult: {\n      outcome: outcome,\n      output: output,\n    },\n  };\n}\n/**\n * Creates a `Part` object from the `code` and `language` of an `ExecutableCode` object.\n */\nexport function createPartFromExecutableCode(\n  code: string,\n  language: Language,\n): Part {\n  return {\n    executableCode: {\n      code: code,\n      language: language,\n    },\n  };\n}\n\n/** Contains the multi-part content of a message. */\nexport declare interface Content {\n  /** List of parts that constitute a single message. Each part may have\n      a different IANA MIME type. */\n  parts?: Part[];\n  /** Optional. The producer of the content. Must be either 'user' or\n      'model'. Useful to set for multi-turn conversations, otherwise can be\n      empty. If role is not specified, SDK will determine the role. */\n  role?: string;\n}\nfunction _isPart(obj: unknown): obj is Part {\n  if (typeof obj === 'object' && obj !== null) {\n    return (\n      'fileData' in obj ||\n      'text' in obj ||\n      'functionCall' in obj ||\n      'functionResponse' in obj ||\n      'inlineData' in obj ||\n      'videoMetadata' in obj ||\n      'codeExecutionResult' in obj ||\n      'executableCode' in obj\n    );\n  }\n  return false;\n}\nfunction _toParts(partOrString: PartListUnion | string): Part[] {\n  const parts: Part[] = [];\n  if (typeof partOrString === 'string') {\n    parts.push(createPartFromText(partOrString));\n  } else if (_isPart(partOrString)) {\n    parts.push(partOrString);\n  } else if (Array.isArray(partOrString)) {\n    if (partOrString.length === 0) {\n      throw new Error('partOrString cannot be an empty array');\n    }\n    for (const part of partOrString) {\n      if (typeof part === 'string') {\n        parts.push(createPartFromText(part));\n      } else if (_isPart(part)) {\n        parts.push(part);\n      } else {\n        throw new Error('element in PartUnion must be a Part object or string');\n      }\n    }\n  } else {\n    throw new Error('partOrString must be a Part object, string, or array');\n  }\n  return parts;\n}\n/**\n * Creates a `Content` object with a user role from a `PartListUnion` object or `string`.\n */\nexport function createUserContent(\n  partOrString: PartListUnion | string,\n): Content {\n  return {\n    role: 'user',\n    parts: _toParts(partOrString),\n  };\n}\n\n/**\n * Creates a `Content` object with a model role from a `PartListUnion` object or `string`.\n */\nexport function createModelContent(\n  partOrString: PartListUnion | string,\n): Content {\n  return {\n    role: 'model',\n    parts: _toParts(partOrString),\n  };\n}\n/** HTTP options to be used in each of the requests. */\nexport declare interface HttpOptions {\n  /** The base URL for the AI platform service endpoint. */\n  baseUrl?: string;\n  /** Specifies the version of the API to use. */\n  apiVersion?: string;\n  /** Additional HTTP headers to be sent with the request. */\n  headers?: Record<string, string>;\n  /** Timeout for the request in milliseconds. */\n  timeout?: number;\n  /** Extra parameters to add to the request body.\n      The structure must match the backend API's request structure.\n      - VertexAI backend API docs: https://cloud.google.com/vertex-ai/docs/reference/rest\n      - GeminiAPI backend API docs: https://ai.google.dev/api/rest */\n  extraBody?: Record<string, unknown>;\n}\n\n/** Schema is used to define the format of input/output data.\n\nRepresents a select subset of an [OpenAPI 3.0 schema\nobject](https://spec.openapis.org/oas/v3.0.3#schema-object). More fields may\nbe added in the future as needed. */\nexport declare interface Schema {\n  /** Optional. The value should be validated against any (one or more) of the subschemas in the list. */\n  anyOf?: Schema[];\n  /** Optional. Default value of the data. */\n  default?: unknown;\n  /** Optional. The description of the data. */\n  description?: string;\n  /** Optional. Possible values of the element of primitive type with enum format. Examples: 1. We can define direction as : {type:STRING, format:enum, enum:[\"EAST\", NORTH\", \"SOUTH\", \"WEST\"]} 2. We can define apartment number as : {type:INTEGER, format:enum, enum:[\"101\", \"201\", \"301\"]} */\n  enum?: string[];\n  /** Optional. Example of the object. Will only populated when the object is the root. */\n  example?: unknown;\n  /** Optional. The format of the data. Supported formats: for NUMBER type: \"float\", \"double\" for INTEGER type: \"int32\", \"int64\" for STRING type: \"email\", \"byte\", etc */\n  format?: string;\n  /** Optional. SCHEMA FIELDS FOR TYPE ARRAY Schema of the elements of Type.ARRAY. */\n  items?: Schema;\n  /** Optional. Maximum number of the elements for Type.ARRAY. */\n  maxItems?: string;\n  /** Optional. Maximum length of the Type.STRING */\n  maxLength?: string;\n  /** Optional. Maximum number of the properties for Type.OBJECT. */\n  maxProperties?: string;\n  /** Optional. Maximum value of the Type.INTEGER and Type.NUMBER */\n  maximum?: number;\n  /** Optional. Minimum number of the elements for Type.ARRAY. */\n  minItems?: string;\n  /** Optional. SCHEMA FIELDS FOR TYPE STRING Minimum length of the Type.STRING */\n  minLength?: string;\n  /** Optional. Minimum number of the properties for Type.OBJECT. */\n  minProperties?: string;\n  /** Optional. SCHEMA FIELDS FOR TYPE INTEGER and NUMBER Minimum value of the Type.INTEGER and Type.NUMBER */\n  minimum?: number;\n  /** Optional. Indicates if the value may be null. */\n  nullable?: boolean;\n  /** Optional. Pattern of the Type.STRING to restrict a string to a regular expression. */\n  pattern?: string;\n  /** Optional. SCHEMA FIELDS FOR TYPE OBJECT Properties of Type.OBJECT. */\n  properties?: Record<string, Schema>;\n  /** Optional. The order of the properties. Not a standard field in open api spec. Only used to support the order of the properties. */\n  propertyOrdering?: string[];\n  /** Optional. Required properties of Type.OBJECT. */\n  required?: string[];\n  /** Optional. The title of the Schema. */\n  title?: string;\n  /** Optional. The type of the data. */\n  type?: Type;\n}\n\n/** Config for model selection. */\nexport declare interface ModelSelectionConfig {\n  /** Options for feature selection preference. */\n  featureSelectionPreference?: FeatureSelectionPreference;\n}\n\n/** Safety settings. */\nexport declare interface SafetySetting {\n  /** Determines if the harm block method uses probability or probability\n      and severity scores. */\n  method?: HarmBlockMethod;\n  /** Required. Harm category. */\n  category?: HarmCategory;\n  /** Required. The harm block threshold. */\n  threshold?: HarmBlockThreshold;\n}\n\n/** Defines a function that the model can generate JSON inputs for.\n\nThe inputs are based on `OpenAPI 3.0 specifications\n<https://spec.openapis.org/oas/v3.0.3>`_. */\nexport declare interface FunctionDeclaration {\n  /** Defines the function behavior. */\n  behavior?: Behavior;\n  /** Optional. Description and purpose of the function. Model uses it to decide how and whether to call the function. */\n  description?: string;\n  /** Required. The name of the function to call. Must start with a letter or an underscore. Must be a-z, A-Z, 0-9, or contain underscores, dots and dashes, with a maximum length of 64. */\n  name?: string;\n  /** Optional. Describes the parameters to this function in JSON Schema Object format. Reflects the Open API 3.03 Parameter Object. string Key: the name of the parameter. Parameter names are case sensitive. Schema Value: the Schema defining the type used for the parameter. For function with no parameters, this can be left unset. Parameter names must start with a letter or an underscore and must only contain chars a-z, A-Z, 0-9, or underscores with a maximum length of 64. Example with 1 required and 1 optional parameter: type: OBJECT properties: param1: type: STRING param2: type: INTEGER required: - param1 */\n  parameters?: Schema;\n  /** Optional. Describes the parameters to the function in JSON Schema format. The schema must describe an object where the properties are the parameters to the function. For example: ``` { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\" }, \"age\": { \"type\": \"integer\" } }, \"additionalProperties\": false, \"required\": [\"name\", \"age\"], \"propertyOrdering\": [\"name\", \"age\"] } ``` This field is mutually exclusive with `parameters`. */\n  parametersJsonSchema?: unknown;\n  /** Optional. Describes the output from this function in JSON Schema format. Reflects the Open API 3.03 Response Object. The Schema defines the type used for the response value of the function. */\n  response?: Schema;\n  /** Optional. Describes the output from this function in JSON Schema format. The value specified by the schema is the response value of the function. This field is mutually exclusive with `response`. */\n  responseJsonSchema?: unknown;\n}\n\n/** Represents a time interval, encoded as a start time (inclusive) and an end time (exclusive).\n\nThe start time must be less than or equal to the end time.\nWhen the start equals the end time, the interval is an empty interval.\n(matches no time)\nWhen both start and end are unspecified, the interval matches any time. */\nexport declare interface Interval {\n  /** The start time of the interval. */\n  startTime?: string;\n  /** The end time of the interval. */\n  endTime?: string;\n}\n\n/** Tool to support Google Search in Model. Powered by Google. */\nexport declare interface GoogleSearch {\n  /** Optional. Filter search results to a specific time range.\n      If customers set a start time, they must set an end time (and vice versa).\n       */\n  timeRangeFilter?: Interval;\n  /** Optional. List of domains to be excluded from the search results. The default limit is 2000 domains. Example: [\"amazon.com\", \"facebook.com\"]. This field is not supported in Gemini API. */\n  excludeDomains?: string[];\n}\n\n/** Describes the options to customize dynamic retrieval. */\nexport declare interface DynamicRetrievalConfig {\n  /** The mode of the predictor to be used in dynamic retrieval. */\n  mode?: DynamicRetrievalConfigMode;\n  /** Optional. The threshold to be used in dynamic retrieval. If not set, a system default value is used. */\n  dynamicThreshold?: number;\n}\n\n/** Tool to retrieve public web data for grounding, powered by Google. */\nexport declare interface GoogleSearchRetrieval {\n  /** Specifies the dynamic retrieval configuration for the given source. */\n  dynamicRetrievalConfig?: DynamicRetrievalConfig;\n}\n\n/** Tool to search public web data, powered by Vertex AI Search and Sec4 compliance. */\nexport declare interface EnterpriseWebSearch {\n  /** Optional. List of domains to be excluded from the search results. The default limit is 2000 domains. */\n  excludeDomains?: string[];\n}\n\n/** Config for authentication with API key. */\nexport declare interface ApiKeyConfig {\n  /** The API key to be used in the request directly. */\n  apiKeyString?: string;\n}\n\n/** Config for Google Service Account Authentication. This data type is not supported in Gemini API. */\nexport declare interface AuthConfigGoogleServiceAccountConfig {\n  /** Optional. The service account that the extension execution service runs as. - If the service account is specified, the `iam.serviceAccounts.getAccessToken` permission should be granted to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) on the specified service account. - If not specified, the Vertex AI Extension Service Agent will be used to execute the Extension. */\n  serviceAccount?: string;\n}\n\n/** Config for HTTP Basic Authentication. This data type is not supported in Gemini API. */\nexport declare interface AuthConfigHttpBasicAuthConfig {\n  /** Required. The name of the SecretManager secret version resource storing the base64 encoded credentials. Format: `projects/{project}/secrets/{secrete}/versions/{version}` - If specified, the `secretmanager.versions.access` permission should be granted to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) on the specified resource. */\n  credentialSecret?: string;\n}\n\n/** Config for user oauth. This data type is not supported in Gemini API. */\nexport declare interface AuthConfigOauthConfig {\n  /** Access token for extension endpoint. Only used to propagate token from [[ExecuteExtensionRequest.runtime_auth_config]] at request time. */\n  accessToken?: string;\n  /** The service account used to generate access tokens for executing the Extension. - If the service account is specified, the `iam.serviceAccounts.getAccessToken` permission should be granted to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) on the provided service account. */\n  serviceAccount?: string;\n}\n\n/** Config for user OIDC auth. This data type is not supported in Gemini API. */\nexport declare interface AuthConfigOidcConfig {\n  /** OpenID Connect formatted ID token for extension endpoint. Only used to propagate token from [[ExecuteExtensionRequest.runtime_auth_config]] at request time. */\n  idToken?: string;\n  /** The service account used to generate an OpenID Connect (OIDC)-compatible JWT token signed by the Google OIDC Provider (accounts.google.com) for extension endpoint (https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-oidc). - The audience for the token will be set to the URL in the server url defined in the OpenApi spec. - If the service account is provided, the service account should grant `iam.serviceAccounts.getOpenIdToken` permission to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents). */\n  serviceAccount?: string;\n}\n\n/** Auth configuration to run the extension. */\nexport declare interface AuthConfig {\n  /** Config for API key auth. */\n  apiKeyConfig?: ApiKeyConfig;\n  /** Type of auth scheme. */\n  authType?: AuthType;\n  /** Config for Google Service Account auth. */\n  googleServiceAccountConfig?: AuthConfigGoogleServiceAccountConfig;\n  /** Config for HTTP Basic auth. */\n  httpBasicAuthConfig?: AuthConfigHttpBasicAuthConfig;\n  /** Config for user oauth. */\n  oauthConfig?: AuthConfigOauthConfig;\n  /** Config for user OIDC auth. */\n  oidcConfig?: AuthConfigOidcConfig;\n}\n\n/** Tool to support Google Maps in Model. */\nexport declare interface GoogleMaps {\n  /** Optional. Auth config for the Google Maps tool. */\n  authConfig?: AuthConfig;\n  /** Optional. If true, include the widget context token in the response. */\n  enableWidget?: boolean;\n}\n\n/** Tool to support URL context retrieval. */\nexport declare interface UrlContext {}\n\n/** Tool to support computer use. */\nexport declare interface ComputerUse {\n  /** Required. The environment being operated. */\n  environment?: Environment;\n  /** By default, predefined functions are included in the final model call.\n    Some of them can be explicitly excluded from being automatically included.\n    This can serve two purposes:\n      1. Using a more restricted / different action space.\n      2. Improving the definitions / instructions of predefined functions. */\n  excludedPredefinedFunctions?: string[];\n}\n\n/** The API secret. This data type is not supported in Gemini API. */\nexport declare interface ApiAuthApiKeyConfig {\n  /** Required. The SecretManager secret version resource name storing API key. e.g. projects/{project}/secrets/{secret}/versions/{version} */\n  apiKeySecretVersion?: string;\n  /** The API key string. Either this or `api_key_secret_version` must be set. */\n  apiKeyString?: string;\n}\n\n/** The generic reusable api auth config. Deprecated. Please use AuthConfig (google/cloud/aiplatform/master/auth.proto) instead. This data type is not supported in Gemini API. */\nexport declare interface ApiAuth {\n  /** The API secret. */\n  apiKeyConfig?: ApiAuthApiKeyConfig;\n}\n\n/** The search parameters to use for the ELASTIC_SEARCH spec. This data type is not supported in Gemini API. */\nexport declare interface ExternalApiElasticSearchParams {\n  /** The ElasticSearch index to use. */\n  index?: string;\n  /** Optional. Number of hits (chunks) to request. When specified, it is passed to Elasticsearch as the `num_hits` param. */\n  numHits?: number;\n  /** The ElasticSearch search template to use. */\n  searchTemplate?: string;\n}\n\n/** The search parameters to use for SIMPLE_SEARCH spec. This data type is not supported in Gemini API. */\nexport declare interface ExternalApiSimpleSearchParams {}\n\n/** Retrieve from data source powered by external API for grounding. The external API is not owned by Google, but need to follow the pre-defined API spec. This data type is not supported in Gemini API. */\nexport declare interface ExternalApi {\n  /** The authentication config to access the API. Deprecated. Please use auth_config instead. */\n  apiAuth?: ApiAuth;\n  /** The API spec that the external API implements. */\n  apiSpec?: ApiSpec;\n  /** The authentication config to access the API. */\n  authConfig?: AuthConfig;\n  /** Parameters for the elastic search API. */\n  elasticSearchParams?: ExternalApiElasticSearchParams;\n  /** The endpoint of the external API. The system will call the API at this endpoint to retrieve the data for grounding. Example: https://acme.com:443/search */\n  endpoint?: string;\n  /** Parameters for the simple search API. */\n  simpleSearchParams?: ExternalApiSimpleSearchParams;\n}\n\n/** Define data stores within engine to filter on in a search call and configurations for those data stores. For more information, see https://cloud.google.com/generative-ai-app-builder/docs/reference/rpc/google.cloud.discoveryengine.v1#datastorespec. This data type is not supported in Gemini API. */\nexport declare interface VertexAISearchDataStoreSpec {\n  /** Full resource name of DataStore, such as Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore}` */\n  dataStore?: string;\n  /** Optional. Filter specification to filter documents in the data store specified by data_store field. For more information on filtering, see [Filtering](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata) */\n  filter?: string;\n}\n\n/** Retrieve from Vertex AI Search datastore or engine for grounding. datastore and engine are mutually exclusive. See https://cloud.google.com/products/agent-builder. This data type is not supported in Gemini API. */\nexport declare interface VertexAISearch {\n  /** Specifications that define the specific DataStores to be searched, along with configurations for those data stores. This is only considered for Engines with multiple data stores. It should only be set if engine is used. */\n  dataStoreSpecs?: VertexAISearchDataStoreSpec[];\n  /** Optional. Fully-qualified Vertex AI Search data store resource ID. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore}` */\n  datastore?: string;\n  /** Optional. Fully-qualified Vertex AI Search engine resource ID. Format: `projects/{project}/locations/{location}/collections/{collection}/engines/{engine}` */\n  engine?: string;\n  /** Optional. Filter strings to be passed to the search API. */\n  filter?: string;\n  /** Optional. Number of search results to return per query. The default value is 10. The maximumm allowed value is 10. */\n  maxResults?: number;\n}\n\n/** The definition of the Rag resource. This data type is not supported in Gemini API. */\nexport declare interface VertexRagStoreRagResource {\n  /** Optional. RagCorpora resource name. Format: `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}` */\n  ragCorpus?: string;\n  /** Optional. rag_file_id. The files should be in the same rag_corpus set in rag_corpus field. */\n  ragFileIds?: string[];\n}\n\n/** Config for filters. This data type is not supported in Gemini API. */\nexport declare interface RagRetrievalConfigFilter {\n  /** Optional. String for metadata filtering. */\n  metadataFilter?: string;\n  /** Optional. Only returns contexts with vector distance smaller than the threshold. */\n  vectorDistanceThreshold?: number;\n  /** Optional. Only returns contexts with vector similarity larger than the threshold. */\n  vectorSimilarityThreshold?: number;\n}\n\n/** Config for Hybrid Search. This data type is not supported in Gemini API. */\nexport declare interface RagRetrievalConfigHybridSearch {\n  /** Optional. Alpha value controls the weight between dense and sparse vector search results. The range is [0, 1], while 0 means sparse vector search only and 1 means dense vector search only. The default value is 0.5 which balances sparse and dense vector search equally. */\n  alpha?: number;\n}\n\n/** Config for LlmRanker. This data type is not supported in Gemini API. */\nexport declare interface RagRetrievalConfigRankingLlmRanker {\n  /** Optional. The model name used for ranking. See [Supported models](https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/inference#supported-models). */\n  modelName?: string;\n}\n\n/** Config for Rank Service. This data type is not supported in Gemini API. */\nexport declare interface RagRetrievalConfigRankingRankService {\n  /** Optional. The model name of the rank service. Format: `semantic-ranker-512@latest` */\n  modelName?: string;\n}\n\n/** Config for ranking and reranking. This data type is not supported in Gemini API. */\nexport declare interface RagRetrievalConfigRanking {\n  /** Optional. Config for LlmRanker. */\n  llmRanker?: RagRetrievalConfigRankingLlmRanker;\n  /** Optional. Config for Rank Service. */\n  rankService?: RagRetrievalConfigRankingRankService;\n}\n\n/** Specifies the context retrieval config. This data type is not supported in Gemini API. */\nexport declare interface RagRetrievalConfig {\n  /** Optional. Config for filters. */\n  filter?: RagRetrievalConfigFilter;\n  /** Optional. Config for Hybrid Search. */\n  hybridSearch?: RagRetrievalConfigHybridSearch;\n  /** Optional. Config for ranking and reranking. */\n  ranking?: RagRetrievalConfigRanking;\n  /** Optional. The number of contexts to retrieve. */\n  topK?: number;\n}\n\n/** Retrieve from Vertex RAG Store for grounding. This data type is not supported in Gemini API. */\nexport declare interface VertexRagStore {\n  /** Optional. Deprecated. Please use rag_resources instead. */\n  ragCorpora?: string[];\n  /** Optional. The representation of the rag source. It can be used to specify corpus only or ragfiles. Currently only support one corpus or multiple files from one corpus. In the future we may open up multiple corpora support. */\n  ragResources?: VertexRagStoreRagResource[];\n  /** Optional. The retrieval config for the Rag query. */\n  ragRetrievalConfig?: RagRetrievalConfig;\n  /** Optional. Number of top k results to return from the selected corpora. */\n  similarityTopK?: number;\n  /** Optional. Currently only supported for Gemini Multimodal Live API. In Gemini Multimodal Live API, if `store_context` bool is specified, Gemini will leverage it to automatically memorize the interactions between the client and Gemini, and retrieve context when needed to augment the response generation for users' ongoing and future interactions. */\n  storeContext?: boolean;\n  /** Optional. Only return results with vector distance smaller than the threshold. */\n  vectorDistanceThreshold?: number;\n}\n\n/** Defines a retrieval tool that model can call to access external knowledge. This data type is not supported in Gemini API. */\nexport declare interface Retrieval {\n  /** Optional. Deprecated. This option is no longer supported. */\n  disableAttribution?: boolean;\n  /** Use data source powered by external API for grounding. */\n  externalApi?: ExternalApi;\n  /** Set to use data source powered by Vertex AI Search. */\n  vertexAiSearch?: VertexAISearch;\n  /** Set to use data source powered by Vertex RAG store. User data is uploaded via the VertexRagDataService. */\n  vertexRagStore?: VertexRagStore;\n}\n\n/** Tool that executes code generated by the model, and automatically returns the result to the model. See also [ExecutableCode]and [CodeExecutionResult] which are input and output to this tool. This data type is not supported in Gemini API. */\nexport declare interface ToolCodeExecution {}\n\n/** Tool details of a tool that the model may use to generate a response. */\nexport declare interface Tool {\n  /** List of function declarations that the tool supports. */\n  functionDeclarations?: FunctionDeclaration[];\n  /** Optional. Retrieval tool type. System will always execute the provided retrieval tool(s) to get external knowledge to answer the prompt. Retrieval results are presented to the model for generation. This field is not supported in Gemini API. */\n  retrieval?: Retrieval;\n  /** Optional. Google Search tool type. Specialized retrieval tool\n      that is powered by Google Search. */\n  googleSearch?: GoogleSearch;\n  /** Optional. GoogleSearchRetrieval tool type. Specialized retrieval tool that is powered by Google search. */\n  googleSearchRetrieval?: GoogleSearchRetrieval;\n  /** Optional. Enterprise web search tool type. Specialized retrieval\n      tool that is powered by Vertex AI Search and Sec4 compliance. */\n  enterpriseWebSearch?: EnterpriseWebSearch;\n  /** Optional. Google Maps tool type. Specialized retrieval tool\n      that is powered by Google Maps. */\n  googleMaps?: GoogleMaps;\n  /** Optional. Tool to support URL context retrieval. */\n  urlContext?: UrlContext;\n  /** Optional. Tool to support the model interacting directly with the\n      computer. If enabled, it automatically populates computer-use specific\n      Function Declarations. */\n  computerUse?: ComputerUse;\n  /** Optional. CodeExecution tool type. Enables the model to execute code as part of generation. */\n  codeExecution?: ToolCodeExecution;\n}\n\n/** Function calling config. */\nexport declare interface FunctionCallingConfig {\n  /** Optional. Function calling mode. */\n  mode?: FunctionCallingConfigMode;\n  /** Optional. Function names to call. Only set when the Mode is ANY. Function names should match [FunctionDeclaration.name]. With mode set to ANY, model will predict a function call from the set of function names provided. */\n  allowedFunctionNames?: string[];\n}\n\n/** An object that represents a latitude/longitude pair.\n\nThis is expressed as a pair of doubles to represent degrees latitude and\ndegrees longitude. Unless specified otherwise, this object must conform to the\n<a href=\"https://en.wikipedia.org/wiki/World_Geodetic_System#1984_version\">\nWGS84 standard</a>. Values must be within normalized ranges. */\nexport declare interface LatLng {\n  /** The latitude in degrees. It must be in the range [-90.0, +90.0]. */\n  latitude?: number;\n  /** The longitude in degrees. It must be in the range [-180.0, +180.0] */\n  longitude?: number;\n}\n\n/** Retrieval config.\n */\nexport declare interface RetrievalConfig {\n  /** Optional. The location of the user. */\n  latLng?: LatLng;\n  /** The language code of the user. */\n  languageCode?: string;\n}\n\n/** Tool config.\n\nThis config is shared for all tools provided in the request. */\nexport declare interface ToolConfig {\n  /** Optional. Function calling config. */\n  functionCallingConfig?: FunctionCallingConfig;\n  /** Optional. Retrieval config. */\n  retrievalConfig?: RetrievalConfig;\n}\n\n/** The configuration for the prebuilt speaker to use. */\nexport declare interface PrebuiltVoiceConfig {\n  /** The name of the prebuilt voice to use. */\n  voiceName?: string;\n}\n\n/** The configuration for the voice to use. */\nexport declare interface VoiceConfig {\n  /** The configuration for the speaker to use.\n   */\n  prebuiltVoiceConfig?: PrebuiltVoiceConfig;\n}\n\n/** The configuration for the speaker to use. */\nexport declare interface SpeakerVoiceConfig {\n  /** The name of the speaker to use. Should be the same as in the\n          prompt. */\n  speaker?: string;\n  /** The configuration for the voice to use. */\n  voiceConfig?: VoiceConfig;\n}\n\n/** The configuration for the multi-speaker setup. */\nexport declare interface MultiSpeakerVoiceConfig {\n  /** The configuration for the speaker to use. */\n  speakerVoiceConfigs?: SpeakerVoiceConfig[];\n}\n\n/** The speech generation configuration. */\nexport declare interface SpeechConfig {\n  /** The configuration for the speaker to use.\n   */\n  voiceConfig?: VoiceConfig;\n  /** The configuration for the multi-speaker setup.\n          It is mutually exclusive with the voice_config field.\n           */\n  multiSpeakerVoiceConfig?: MultiSpeakerVoiceConfig;\n  /** Language code (ISO 639. e.g. en-US) for the speech synthesization.\n      Only available for Live API.\n       */\n  languageCode?: string;\n}\n\n/** The configuration for automatic function calling. */\nexport declare interface AutomaticFunctionCallingConfig {\n  /** Whether to disable automatic function calling.\n      If not set or set to False, will enable automatic function calling.\n      If set to True, will disable automatic function calling.\n       */\n  disable?: boolean;\n  /** If automatic function calling is enabled,\n      maximum number of remote calls for automatic function calling.\n      This number should be a positive integer.\n      If not set, SDK will set maximum number of remote calls to 10.\n       */\n  maximumRemoteCalls?: number;\n  /** If automatic function calling is enabled,\n      whether to ignore call history to the response.\n      If not set, SDK will set ignore_call_history to false,\n      and will append the call history to\n      GenerateContentResponse.automatic_function_calling_history.\n       */\n  ignoreCallHistory?: boolean;\n}\n\n/** The thinking features configuration. */\nexport declare interface ThinkingConfig {\n  /** Indicates whether to include thoughts in the response. If true, thoughts are returned only if the model supports thought and thoughts are available.\n   */\n  includeThoughts?: boolean;\n  /** Indicates the thinking budget in tokens. 0 is DISABLED. -1 is AUTOMATIC. The default values and allowed ranges are model dependent.\n   */\n  thinkingBudget?: number;\n}\n\n/** The image generation configuration to be used in GenerateContentConfig. */\nexport declare interface ImageConfig {\n  /** Aspect ratio of the generated images. Supported values are\n      \"1:1\", \"2:3\", \"3:2\", \"3:4\", \"4:3\", \"9:16\", \"16:9\", and \"21:9\". */\n  aspectRatio?: string;\n}\n\n/** When automated routing is specified, the routing will be determined by the pretrained routing model and customer provided model routing preference. This data type is not supported in Gemini API. */\nexport declare interface GenerationConfigRoutingConfigAutoRoutingMode {\n  /** The model routing preference. */\n  modelRoutingPreference?:\n    | 'UNKNOWN'\n    | 'PRIORITIZE_QUALITY'\n    | 'BALANCED'\n    | 'PRIORITIZE_COST';\n}\n\n/** When manual routing is set, the specified model will be used directly. This data type is not supported in Gemini API. */\nexport declare interface GenerationConfigRoutingConfigManualRoutingMode {\n  /** The model name to use. Only the public LLM models are accepted. See [Supported models](https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/inference#supported-models). */\n  modelName?: string;\n}\n\n/** The configuration for routing the request to a specific model. This data type is not supported in Gemini API. */\nexport declare interface GenerationConfigRoutingConfig {\n  /** Automated routing. */\n  autoMode?: GenerationConfigRoutingConfigAutoRoutingMode;\n  /** Manual routing. */\n  manualMode?: GenerationConfigRoutingConfigManualRoutingMode;\n}\n\n/** Optional model configuration parameters.\n\nFor more information, see `Content generation parameters\n<https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/content-generation-parameters>`_. */\nexport declare interface GenerateContentConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** Instructions for the model to steer it toward better performance.\n      For example, \"Answer as concisely as possible\" or \"Don't use technical\n      terms in your response\".\n       */\n  systemInstruction?: ContentUnion;\n  /** Value that controls the degree of randomness in token selection.\n      Lower temperatures are good for prompts that require a less open-ended or\n      creative response, while higher temperatures can lead to more diverse or\n      creative results.\n       */\n  temperature?: number;\n  /** Tokens are selected from the most to least probable until the sum\n      of their probabilities equals this value. Use a lower value for less\n      random responses and a higher value for more random responses.\n       */\n  topP?: number;\n  /** For each token selection step, the ``top_k`` tokens with the\n      highest probabilities are sampled. Then tokens are further filtered based\n      on ``top_p`` with the final token selected using temperature sampling. Use\n      a lower number for less random responses and a higher number for more\n      random responses.\n       */\n  topK?: number;\n  /** Number of response variations to return.\n   */\n  candidateCount?: number;\n  /** Maximum number of tokens that can be generated in the response.\n   */\n  maxOutputTokens?: number;\n  /** List of strings that tells the model to stop generating text if one\n      of the strings is encountered in the response.\n       */\n  stopSequences?: string[];\n  /** Whether to return the log probabilities of the tokens that were\n      chosen by the model at each step.\n       */\n  responseLogprobs?: boolean;\n  /** Number of top candidate tokens to return the log probabilities for\n      at each generation step.\n       */\n  logprobs?: number;\n  /** Positive values penalize tokens that already appear in the\n      generated text, increasing the probability of generating more diverse\n      content.\n       */\n  presencePenalty?: number;\n  /** Positive values penalize tokens that repeatedly appear in the\n      generated text, increasing the probability of generating more diverse\n      content.\n       */\n  frequencyPenalty?: number;\n  /** When ``seed`` is fixed to a specific number, the model makes a best\n      effort to provide the same response for repeated requests. By default, a\n      random number is used.\n       */\n  seed?: number;\n  /** Output response mimetype of the generated candidate text.\n      Supported mimetype:\n        - `text/plain`: (default) Text output.\n        - `application/json`: JSON response in the candidates.\n      The model needs to be prompted to output the appropriate response type,\n      otherwise the behavior is undefined.\n      This is a preview feature.\n       */\n  responseMimeType?: string;\n  /** The `Schema` object allows the definition of input and output data types.\n      These types can be objects, but also primitives and arrays.\n      Represents a select subset of an [OpenAPI 3.0 schema\n      object](https://spec.openapis.org/oas/v3.0.3#schema).\n      If set, a compatible response_mime_type must also be set.\n      Compatible mimetypes: `application/json`: Schema for JSON response.\n       */\n  responseSchema?: SchemaUnion;\n  /** Optional. Output schema of the generated response.\n      This is an alternative to `response_schema` that accepts [JSON\n      Schema](https://json-schema.org/). If set, `response_schema` must be\n      omitted, but `response_mime_type` is required. While the full JSON Schema\n      may be sent, not all features are supported. Specifically, only the\n      following properties are supported: - `$id` - `$defs` - `$ref` - `$anchor`\n      - `type` - `format` - `title` - `description` - `enum` (for strings and\n      numbers) - `items` - `prefixItems` - `minItems` - `maxItems` - `minimum` -\n      `maximum` - `anyOf` - `oneOf` (interpreted the same as `anyOf`) -\n      `properties` - `additionalProperties` - `required` The non-standard\n      `propertyOrdering` property may also be set. Cyclic references are\n      unrolled to a limited degree and, as such, may only be used within\n      non-required properties. (Nullable properties are not sufficient.) If\n      `$ref` is set on a sub-schema, no other properties, except for than those\n      starting as a `$`, may be set. */\n  responseJsonSchema?: unknown;\n  /** Configuration for model router requests.\n   */\n  routingConfig?: GenerationConfigRoutingConfig;\n  /** Configuration for model selection.\n   */\n  modelSelectionConfig?: ModelSelectionConfig;\n  /** Safety settings in the request to block unsafe content in the\n      response.\n       */\n  safetySettings?: SafetySetting[];\n  /** Code that enables the system to interact with external systems to\n      perform an action outside of the knowledge and scope of the model.\n       */\n  tools?: ToolListUnion;\n  /** Associates model output to a specific function call.\n   */\n  toolConfig?: ToolConfig;\n  /** Labels with user-defined metadata to break down billed charges. */\n  labels?: Record<string, string>;\n  /** Resource name of a context cache that can be used in subsequent\n      requests.\n       */\n  cachedContent?: string;\n  /** The requested modalities of the response. Represents the set of\n      modalities that the model can return.\n       */\n  responseModalities?: string[];\n  /** If specified, the media resolution specified will be used.\n   */\n  mediaResolution?: MediaResolution;\n  /** The speech generation configuration.\n   */\n  speechConfig?: SpeechConfigUnion;\n  /** If enabled, audio timestamp will be included in the request to the\n       model.\n       */\n  audioTimestamp?: boolean;\n  /** The configuration for automatic function calling.\n   */\n  automaticFunctionCalling?: AutomaticFunctionCallingConfig;\n  /** The thinking features configuration.\n   */\n  thinkingConfig?: ThinkingConfig;\n  /** The image generation configuration.\n   */\n  imageConfig?: ImageConfig;\n}\n\n/** Config for models.generate_content parameters. */\nexport declare interface GenerateContentParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** Content of the request.\n   */\n  contents: ContentListUnion;\n  /** Configuration that contains optional model parameters.\n   */\n  config?: GenerateContentConfig;\n}\n\n/** A wrapper class for the http response. */\nexport class HttpResponse {\n  /** Used to retain the processed HTTP headers in the response. */\n  headers?: Record<string, string>;\n  /**\n   * The original http response.\n   */\n  responseInternal: Response;\n\n  constructor(response: Response) {\n    // Process the headers.\n    const headers: Record<string, string> = {};\n    for (const pair of response.headers.entries()) {\n      headers[pair[0]] = pair[1];\n    }\n    this.headers = headers;\n\n    // Keep the original response.\n    this.responseInternal = response;\n  }\n\n  json(): Promise<unknown> {\n    return this.responseInternal.json();\n  }\n}\n\n/** Callbacks for the live API. */\nexport interface LiveCallbacks {\n  /**\n   * Called when the websocket connection is established.\n   */\n  onopen?: (() => void) | null;\n  /**\n   * Called when a message is received from the server.\n   */\n  onmessage: (e: LiveServerMessage) => void;\n  /**\n   * Called when an error occurs.\n   */\n  onerror?: ((e: ErrorEvent) => void) | null;\n  /**\n   * Called when the websocket connection is closed.\n   */\n  onclose?: ((e: CloseEvent) => void) | null;\n}\n\n/** Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp. This data type is not supported in Gemini API. */\nexport declare interface GoogleTypeDate {\n  /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */\n  day?: number;\n  /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */\n  month?: number;\n  /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */\n  year?: number;\n}\n\n/** Source attributions for content. This data type is not supported in Gemini API. */\nexport declare interface Citation {\n  /** Output only. End index into the content. */\n  endIndex?: number;\n  /** Output only. License of the attribution. */\n  license?: string;\n  /** Output only. Publication date of the attribution. */\n  publicationDate?: GoogleTypeDate;\n  /** Output only. Start index into the content. */\n  startIndex?: number;\n  /** Output only. Title of the attribution. */\n  title?: string;\n  /** Output only. Url reference of the attribution. */\n  uri?: string;\n}\n\n/** Citation information when the model quotes another source. */\nexport declare interface CitationMetadata {\n  /** Contains citation information when the model directly quotes, at\n      length, from another source. Can include traditional websites and code\n      repositories.\n       */\n  citations?: Citation[];\n}\n\n/** Context for a single url retrieval. */\nexport declare interface UrlMetadata {\n  /** The URL retrieved by the tool. */\n  retrievedUrl?: string;\n  /** Status of the url retrieval. */\n  urlRetrievalStatus?: UrlRetrievalStatus;\n}\n\n/** Metadata related to url context retrieval tool. */\nexport declare interface UrlContextMetadata {\n  /** List of url context. */\n  urlMetadata?: UrlMetadata[];\n}\n\n/** Author attribution for a photo or review. This data type is not supported in Gemini API. */\nexport declare interface GroundingChunkMapsPlaceAnswerSourcesAuthorAttribution {\n  /** Name of the author of the Photo or Review. */\n  displayName?: string;\n  /** Profile photo URI of the author of the Photo or Review. */\n  photoUri?: string;\n  /** URI of the author of the Photo or Review. */\n  uri?: string;\n}\n\n/** Encapsulates a review snippet. This data type is not supported in Gemini API. */\nexport declare interface GroundingChunkMapsPlaceAnswerSourcesReviewSnippet {\n  /** This review's author. */\n  authorAttribution?: GroundingChunkMapsPlaceAnswerSourcesAuthorAttribution;\n  /** A link where users can flag a problem with the review. */\n  flagContentUri?: string;\n  /** A link to show the review on Google Maps. */\n  googleMapsUri?: string;\n  /** A string of formatted recent time, expressing the review time relative to the current time in a form appropriate for the language and country. */\n  relativePublishTimeDescription?: string;\n  /** A reference representing this place review which may be used to look up this place review again. */\n  review?: string;\n  /** Id of the review referencing the place. */\n  reviewId?: string;\n  /** Title of the review. */\n  title?: string;\n}\n\n/** Sources used to generate the place answer. This data type is not supported in Gemini API. */\nexport declare interface GroundingChunkMapsPlaceAnswerSources {\n  /** A link where users can flag a problem with the generated answer. */\n  flagContentUri?: string;\n  /** Snippets of reviews that are used to generate the answer. */\n  reviewSnippets?: GroundingChunkMapsPlaceAnswerSourcesReviewSnippet[];\n}\n\n/** Chunk from Google Maps. This data type is not supported in Gemini API. */\nexport declare interface GroundingChunkMaps {\n  /** Sources used to generate the place answer. This includes review snippets and photos that were used to generate the answer, as well as uris to flag content. */\n  placeAnswerSources?: GroundingChunkMapsPlaceAnswerSources;\n  /** This Place's resource name, in `places/{place_id}` format. Can be used to look up the Place. */\n  placeId?: string;\n  /** Text of the chunk. */\n  text?: string;\n  /** Title of the chunk. */\n  title?: string;\n  /** URI reference of the chunk. */\n  uri?: string;\n}\n\n/** Represents where the chunk starts and ends in the document. This data type is not supported in Gemini API. */\nexport declare interface RagChunkPageSpan {\n  /** Page where chunk starts in the document. Inclusive. 1-indexed. */\n  firstPage?: number;\n  /** Page where chunk ends in the document. Inclusive. 1-indexed. */\n  lastPage?: number;\n}\n\n/** A RagChunk includes the content of a chunk of a RagFile, and associated metadata. This data type is not supported in Gemini API. */\nexport declare interface RagChunk {\n  /** If populated, represents where the chunk starts and ends in the document. */\n  pageSpan?: RagChunkPageSpan;\n  /** The content of the chunk. */\n  text?: string;\n}\n\n/** Chunk from context retrieved by the retrieval tools. This data type is not supported in Gemini API. */\nexport declare interface GroundingChunkRetrievedContext {\n  /** Output only. The full document name for the referenced Vertex AI Search document. */\n  documentName?: string;\n  /** Additional context for the RAG retrieval result. This is only populated when using the RAG retrieval tool. */\n  ragChunk?: RagChunk;\n  /** Text of the attribution. */\n  text?: string;\n  /** Title of the attribution. */\n  title?: string;\n  /** URI reference of the attribution. */\n  uri?: string;\n}\n\n/** Chunk from the web. */\nexport declare interface GroundingChunkWeb {\n  /** Domain of the (original) URI. This field is not supported in Gemini API. */\n  domain?: string;\n  /** Title of the chunk. */\n  title?: string;\n  /** URI reference of the chunk. */\n  uri?: string;\n}\n\n/** Grounding chunk. */\nexport declare interface GroundingChunk {\n  /** Grounding chunk from Google Maps. This field is not supported in Gemini API. */\n  maps?: GroundingChunkMaps;\n  /** Grounding chunk from context retrieved by the retrieval tools. This field is not supported in Gemini API. */\n  retrievedContext?: GroundingChunkRetrievedContext;\n  /** Grounding chunk from the web. */\n  web?: GroundingChunkWeb;\n}\n\n/** Segment of the content. */\nexport declare interface Segment {\n  /** Output only. End index in the given Part, measured in bytes. Offset from the start of the Part, exclusive, starting at zero. */\n  endIndex?: number;\n  /** Output only. The index of a Part object within its parent Content object. */\n  partIndex?: number;\n  /** Output only. Start index in the given Part, measured in bytes. Offset from the start of the Part, inclusive, starting at zero. */\n  startIndex?: number;\n  /** Output only. The text corresponding to the segment from the response. */\n  text?: string;\n}\n\n/** Grounding support. */\nexport declare interface GroundingSupport {\n  /** Confidence score of the support references. Ranges from 0 to 1. 1 is the most confident. For Gemini 2.0 and before, this list must have the same size as the grounding_chunk_indices. For Gemini 2.5 and after, this list will be empty and should be ignored. */\n  confidenceScores?: number[];\n  /** A list of indices (into 'grounding_chunk') specifying the citations associated with the claim. For instance [1,3,4] means that grounding_chunk[1], grounding_chunk[3], grounding_chunk[4] are the retrieved content attributed to the claim. */\n  groundingChunkIndices?: number[];\n  /** Segment of the content this support belongs to. */\n  segment?: Segment;\n}\n\n/** Metadata related to retrieval in the grounding flow. */\nexport declare interface RetrievalMetadata {\n  /** Optional. Score indicating how likely information from Google Search could help answer the prompt. The score is in the range `[0, 1]`, where 0 is the least likely and 1 is the most likely. This score is only populated when Google Search grounding and dynamic retrieval is enabled. It will be compared to the threshold to determine whether to trigger Google Search. */\n  googleSearchDynamicRetrievalScore?: number;\n}\n\n/** Google search entry point. */\nexport declare interface SearchEntryPoint {\n  /** Optional. Web content snippet that can be embedded in a web page or an app webview. */\n  renderedContent?: string;\n  /** Optional. Base64 encoded JSON representing array of tuple.\n   * @remarks Encoded as base64 string. */\n  sdkBlob?: string;\n}\n\n/** Source content flagging uri for a place or review. This is currently populated only for Google Maps grounding. This data type is not supported in Gemini API. */\nexport declare interface GroundingMetadataSourceFlaggingUri {\n  /** A link where users can flag a problem with the source (place or review). */\n  flagContentUri?: string;\n  /** Id of the place or review. */\n  sourceId?: string;\n}\n\n/** Metadata returned to client when grounding is enabled. */\nexport declare interface GroundingMetadata {\n  /** Optional. Output only. Resource name of the Google Maps widget context token to be used with the PlacesContextElement widget to render contextual data. This is populated only for Google Maps grounding. This field is not supported in Gemini API. */\n  googleMapsWidgetContextToken?: string;\n  /** List of supporting references retrieved from specified grounding source. */\n  groundingChunks?: GroundingChunk[];\n  /** Optional. List of grounding support. */\n  groundingSupports?: GroundingSupport[];\n  /** Optional. Output only. Retrieval metadata. */\n  retrievalMetadata?: RetrievalMetadata;\n  /** Optional. Queries executed by the retrieval tools. This field is not supported in Gemini API. */\n  retrievalQueries?: string[];\n  /** Optional. Google search entry for the following-up web searches. */\n  searchEntryPoint?: SearchEntryPoint;\n  /** Optional. Output only. List of source flagging uris. This is currently populated only for Google Maps grounding. This field is not supported in Gemini API. */\n  sourceFlaggingUris?: GroundingMetadataSourceFlaggingUri[];\n  /** Optional. Web search queries for the following-up web search. */\n  webSearchQueries?: string[];\n}\n\n/** Candidate for the logprobs token and score. */\nexport declare interface LogprobsResultCandidate {\n  /** The candidate's log probability. */\n  logProbability?: number;\n  /** The candidate's token string value. */\n  token?: string;\n  /** The candidate's token id value. */\n  tokenId?: number;\n}\n\n/** Candidates with top log probabilities at each decoding step. */\nexport declare interface LogprobsResultTopCandidates {\n  /** Sorted by log probability in descending order. */\n  candidates?: LogprobsResultCandidate[];\n}\n\n/** Logprobs Result */\nexport declare interface LogprobsResult {\n  /** Length = total number of decoding steps. The chosen candidates may or may not be in top_candidates. */\n  chosenCandidates?: LogprobsResultCandidate[];\n  /** Length = total number of decoding steps. */\n  topCandidates?: LogprobsResultTopCandidates[];\n}\n\n/** Safety rating corresponding to the generated content. */\nexport declare interface SafetyRating {\n  /** Output only. Indicates whether the content was filtered out because of this rating. */\n  blocked?: boolean;\n  /** Output only. Harm category. */\n  category?: HarmCategory;\n  /** Output only. The overwritten threshold for the safety category of Gemini 2.0 image out. If minors are detected in the output image, the threshold of each safety category will be overwritten if user sets a lower threshold. */\n  overwrittenThreshold?: HarmBlockThreshold;\n  /** Output only. Harm probability levels in the content. */\n  probability?: HarmProbability;\n  /** Output only. Harm probability score. This field is not supported in Gemini API. */\n  probabilityScore?: number;\n  /** Output only. Harm severity levels in the content. */\n  severity?: HarmSeverity;\n  /** Output only. Harm severity score. This field is not supported in Gemini API. */\n  severityScore?: number;\n}\n\n/** A response candidate generated from the model. */\nexport declare interface Candidate {\n  /** Contains the multi-part content of the response.\n   */\n  content?: Content;\n  /** Source attribution of the generated content.\n   */\n  citationMetadata?: CitationMetadata;\n  /** Describes the reason the model stopped generating tokens.\n   */\n  finishMessage?: string;\n  /** Number of tokens for this candidate.\n   */\n  tokenCount?: number;\n  /** The reason why the model stopped generating tokens.\n      If empty, the model has not stopped generating the tokens.\n       */\n  finishReason?: FinishReason;\n  /** Metadata related to url context retrieval tool. */\n  urlContextMetadata?: UrlContextMetadata;\n  /** Output only. Average log probability score of the candidate. */\n  avgLogprobs?: number;\n  /** Output only. Metadata specifies sources used to ground generated content. */\n  groundingMetadata?: GroundingMetadata;\n  /** Output only. Index of the candidate. */\n  index?: number;\n  /** Output only. Log-likelihood scores for the response tokens and top tokens */\n  logprobsResult?: LogprobsResult;\n  /** Output only. List of ratings for the safety of a response candidate. There is at most one rating per category. */\n  safetyRatings?: SafetyRating[];\n}\n\n/** Content filter results for a prompt sent in the request. Note: This is sent only in the first stream chunk and only if no candidates were generated due to content violations. */\nexport class GenerateContentResponsePromptFeedback {\n  /** Output only. The reason why the prompt was blocked. */\n  blockReason?: BlockedReason;\n  /** Output only. A readable message that explains the reason why the prompt was blocked. This field is not supported in Gemini API. */\n  blockReasonMessage?: string;\n  /** Output only. A list of safety ratings for the prompt. There is one rating per category. */\n  safetyRatings?: SafetyRating[];\n}\n\n/** Represents token counting info for a single modality. */\nexport declare interface ModalityTokenCount {\n  /** The modality associated with this token count. */\n  modality?: MediaModality;\n  /** Number of tokens. */\n  tokenCount?: number;\n}\n\n/** Usage metadata about response(s). This data type is not supported in Gemini API. */\nexport class GenerateContentResponseUsageMetadata {\n  /** Output only. List of modalities of the cached content in the request input. */\n  cacheTokensDetails?: ModalityTokenCount[];\n  /** Output only. Number of tokens in the cached part in the input (the cached content). */\n  cachedContentTokenCount?: number;\n  /** Number of tokens in the response(s). */\n  candidatesTokenCount?: number;\n  /** Output only. List of modalities that were returned in the response. */\n  candidatesTokensDetails?: ModalityTokenCount[];\n  /** Number of tokens in the request. When `cached_content` is set, this is still the total effective prompt size meaning this includes the number of tokens in the cached content. */\n  promptTokenCount?: number;\n  /** Output only. List of modalities that were processed in the request input. */\n  promptTokensDetails?: ModalityTokenCount[];\n  /** Output only. Number of tokens present in thoughts output. */\n  thoughtsTokenCount?: number;\n  /** Output only. Number of tokens present in tool-use prompt(s). */\n  toolUsePromptTokenCount?: number;\n  /** Output only. List of modalities that were processed for tool-use request inputs. */\n  toolUsePromptTokensDetails?: ModalityTokenCount[];\n  /** Total token count for prompt, response candidates, and tool-use prompts (if present). */\n  totalTokenCount?: number;\n  /** Output only. Traffic type. This shows whether a request consumes Pay-As-You-Go or Provisioned Throughput quota. */\n  trafficType?: TrafficType;\n}\n\n/** Response message for PredictionService.GenerateContent. */\nexport class GenerateContentResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  /** Response variations returned by the model.\n   */\n  candidates?: Candidate[];\n  /** Timestamp when the request is made to the server.\n   */\n  createTime?: string;\n  /** The history of automatic function calling.\n   */\n  automaticFunctionCallingHistory?: Content[];\n  /** Output only. The model version used to generate the response. */\n  modelVersion?: string;\n  /** Output only. Content filter results for a prompt sent in the request. Note: Sent only in the first stream chunk. Only happens when no candidates were generated due to content violations. */\n  promptFeedback?: GenerateContentResponsePromptFeedback;\n  /** Output only. response_id is used to identify each response. It is the encoding of the event_id. */\n  responseId?: string;\n  /** Usage metadata about the response(s). */\n  usageMetadata?: GenerateContentResponseUsageMetadata;\n  /**\n   * Returns the concatenation of all text parts from the first candidate in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the text from the first\n   * one will be returned.\n   * If there are non-text parts in the response, the concatenation of all text\n   * parts will be returned, and a warning will be logged.\n   * If there are thought parts in the response, the concatenation of all text\n   * parts excluding the thought parts will be returned.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContent({\n   *   model: 'gemini-2.0-flash',\n   *   contents:\n   *     'Why is the sky blue?',\n   * });\n   *\n   * console.debug(response.text);\n   * ```\n   */\n  get text(): string | undefined {\n    if (this.candidates?.[0]?.content?.parts?.length === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn(\n        'there are multiple candidates in the response, returning text from the first one.',\n      );\n    }\n    let text = '';\n    let anyTextPartText = false;\n    const nonTextParts = [];\n    for (const part of this.candidates?.[0]?.content?.parts ?? []) {\n      for (const [fieldName, fieldValue] of Object.entries(part)) {\n        if (\n          fieldName !== 'text' &&\n          fieldName !== 'thought' &&\n          (fieldValue !== null || fieldValue !== undefined)\n        ) {\n          nonTextParts.push(fieldName);\n        }\n      }\n      if (typeof part.text === 'string') {\n        if (typeof part.thought === 'boolean' && part.thought) {\n          continue;\n        }\n        anyTextPartText = true;\n        text += part.text;\n      }\n    }\n    if (nonTextParts.length > 0) {\n      console.warn(\n        `there are non-text parts ${nonTextParts} in the response, returning concatenation of all text parts. Please refer to the non text parts for a full response from model.`,\n      );\n    }\n    // part.text === '' is different from part.text is null\n    return anyTextPartText ? text : undefined;\n  }\n\n  /**\n   * Returns the concatenation of all inline data parts from the first candidate\n   * in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the inline data from the\n   * first one will be returned. If there are non-inline data parts in the\n   * response, the concatenation of all inline data parts will be returned, and\n   * a warning will be logged.\n   */\n  get data(): string | undefined {\n    if (this.candidates?.[0]?.content?.parts?.length === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn(\n        'there are multiple candidates in the response, returning data from the first one.',\n      );\n    }\n    let data = '';\n    const nonDataParts = [];\n    for (const part of this.candidates?.[0]?.content?.parts ?? []) {\n      for (const [fieldName, fieldValue] of Object.entries(part)) {\n        if (\n          fieldName !== 'inlineData' &&\n          (fieldValue !== null || fieldValue !== undefined)\n        ) {\n          nonDataParts.push(fieldName);\n        }\n      }\n      if (part.inlineData && typeof part.inlineData.data === 'string') {\n        data += atob(part.inlineData.data);\n      }\n    }\n    if (nonDataParts.length > 0) {\n      console.warn(\n        `there are non-data parts ${nonDataParts} in the response, returning concatenation of all data parts. Please refer to the non data parts for a full response from model.`,\n      );\n    }\n    return data.length > 0 ? btoa(data) : undefined;\n  }\n\n  /**\n   * Returns the function calls from the first candidate in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the function calls from\n   * the first one will be returned.\n   * If there are no function calls in the response, undefined will be returned.\n   *\n   * @example\n   * ```ts\n   * const controlLightFunctionDeclaration: FunctionDeclaration = {\n   *   name: 'controlLight',\n   *   parameters: {\n   *   type: Type.OBJECT,\n   *   description: 'Set the brightness and color temperature of a room light.',\n   *   properties: {\n   *     brightness: {\n   *       type: Type.NUMBER,\n   *       description:\n   *         'Light level from 0 to 100. Zero is off and 100 is full brightness.',\n   *     },\n   *     colorTemperature: {\n   *       type: Type.STRING,\n   *       description:\n   *         'Color temperature of the light fixture which can be `daylight`, `cool` or `warm`.',\n   *     },\n   *   },\n   *   required: ['brightness', 'colorTemperature'],\n   *  };\n   *  const response = await ai.models.generateContent({\n   *     model: 'gemini-2.0-flash',\n   *     contents: 'Dim the lights so the room feels cozy and warm.',\n   *     config: {\n   *       tools: [{functionDeclarations: [controlLightFunctionDeclaration]}],\n   *       toolConfig: {\n   *         functionCallingConfig: {\n   *           mode: FunctionCallingConfigMode.ANY,\n   *           allowedFunctionNames: ['controlLight'],\n   *         },\n   *       },\n   *     },\n   *   });\n   *  console.debug(JSON.stringify(response.functionCalls));\n   * ```\n   */\n  get functionCalls(): FunctionCall[] | undefined {\n    if (this.candidates?.[0]?.content?.parts?.length === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn(\n        'there are multiple candidates in the response, returning function calls from the first one.',\n      );\n    }\n    const functionCalls = this.candidates?.[0]?.content?.parts\n      ?.filter((part) => part.functionCall)\n      .map((part) => part.functionCall)\n      .filter(\n        (functionCall): functionCall is FunctionCall =>\n          functionCall !== undefined,\n      );\n    if (functionCalls?.length === 0) {\n      return undefined;\n    }\n    return functionCalls;\n  }\n  /**\n   * Returns the first executable code from the first candidate in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the executable code from\n   * the first one will be returned.\n   * If there are no executable code in the response, undefined will be\n   * returned.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContent({\n   *   model: 'gemini-2.0-flash',\n   *   contents:\n   *     'What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50.'\n   *   config: {\n   *     tools: [{codeExecution: {}}],\n   *   },\n   * });\n   *\n   * console.debug(response.executableCode);\n   * ```\n   */\n  get executableCode(): string | undefined {\n    if (this.candidates?.[0]?.content?.parts?.length === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn(\n        'there are multiple candidates in the response, returning executable code from the first one.',\n      );\n    }\n    const executableCode = this.candidates?.[0]?.content?.parts\n      ?.filter((part) => part.executableCode)\n      .map((part) => part.executableCode)\n      .filter(\n        (executableCode): executableCode is ExecutableCode =>\n          executableCode !== undefined,\n      );\n    if (executableCode?.length === 0) {\n      return undefined;\n    }\n\n    return executableCode?.[0]?.code;\n  }\n  /**\n   * Returns the first code execution result from the first candidate in the response.\n   *\n   * @remarks\n   * If there are multiple candidates in the response, the code execution result from\n   * the first one will be returned.\n   * If there are no code execution result in the response, undefined will be returned.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContent({\n   *   model: 'gemini-2.0-flash',\n   *   contents:\n   *     'What is the sum of the first 50 prime numbers? Generate and run code for the calculation, and make sure you get all 50.'\n   *   config: {\n   *     tools: [{codeExecution: {}}],\n   *   },\n   * });\n   *\n   * console.debug(response.codeExecutionResult);\n   * ```\n   */\n  get codeExecutionResult(): string | undefined {\n    if (this.candidates?.[0]?.content?.parts?.length === 0) {\n      return undefined;\n    }\n    if (this.candidates && this.candidates.length > 1) {\n      console.warn(\n        'there are multiple candidates in the response, returning code execution result from the first one.',\n      );\n    }\n    const codeExecutionResult = this.candidates?.[0]?.content?.parts\n      ?.filter((part) => part.codeExecutionResult)\n      .map((part) => part.codeExecutionResult)\n      .filter(\n        (codeExecutionResult): codeExecutionResult is CodeExecutionResult =>\n          codeExecutionResult !== undefined,\n      );\n    if (codeExecutionResult?.length === 0) {\n      return undefined;\n    }\n    return codeExecutionResult?.[0]?.output;\n  }\n}\n\nexport type ReferenceImage =\n  | RawReferenceImage\n  | MaskReferenceImage\n  | ControlReferenceImage\n  | StyleReferenceImage\n  | SubjectReferenceImage\n  | ContentReferenceImage;\n\n/** Parameters for the request to edit an image. */\nexport declare interface EditImageParameters {\n  /** The model to use. */\n  model: string;\n  /** A text description of the edit to apply to the image. */\n  prompt: string;\n  /** The reference images for Imagen 3 editing. */\n  referenceImages: ReferenceImage[];\n  /** Configuration for editing. */\n  config?: EditImageConfig;\n}\n\n/** Optional parameters for the embed_content method. */\nexport declare interface EmbedContentConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** Type of task for which the embedding will be used.\n   */\n  taskType?: string;\n  /** Title for the text. Only applicable when TaskType is\n      `RETRIEVAL_DOCUMENT`.\n       */\n  title?: string;\n  /** Reduced dimension for the output embedding. If set,\n      excessive values in the output embedding are truncated from the end.\n      Supported by newer models since 2024 only. You cannot set this value if\n      using the earlier model (`models/embedding-001`).\n       */\n  outputDimensionality?: number;\n  /** Vertex API only. The MIME type of the input.\n   */\n  mimeType?: string;\n  /** Vertex API only. Whether to silently truncate inputs longer than\n      the max sequence length. If this option is set to false, oversized inputs\n      will lead to an INVALID_ARGUMENT error, similar to other text APIs.\n       */\n  autoTruncate?: boolean;\n}\n\n/** Parameters for the embed_content method. */\nexport declare interface EmbedContentParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** The content to embed. Only the `parts.text` fields will be counted.\n   */\n  contents: ContentListUnion;\n  /** Configuration that contains optional parameters.\n   */\n  config?: EmbedContentConfig;\n}\n\n/** Statistics of the input text associated with the result of content embedding. */\nexport declare interface ContentEmbeddingStatistics {\n  /** Vertex API only. If the input text was truncated due to having\n      a length longer than the allowed maximum input.\n       */\n  truncated?: boolean;\n  /** Vertex API only. Number of tokens of the input text.\n   */\n  tokenCount?: number;\n}\n\n/** The embedding generated from an input content. */\nexport declare interface ContentEmbedding {\n  /** A list of floats representing an embedding.\n   */\n  values?: number[];\n  /** Vertex API only. Statistics of the input text associated with this\n      embedding.\n       */\n  statistics?: ContentEmbeddingStatistics;\n}\n\n/** Request-level metadata for the Vertex Embed Content API. */\nexport declare interface EmbedContentMetadata {\n  /** Vertex API only. The total number of billable characters included\n      in the request.\n       */\n  billableCharacterCount?: number;\n}\n\n/** Response for the embed_content method. */\nexport class EmbedContentResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  /** The embeddings for each request, in the same order as provided in\n      the batch request.\n       */\n  embeddings?: ContentEmbedding[];\n  /** Vertex API only. Metadata about the request.\n   */\n  metadata?: EmbedContentMetadata;\n}\n\n/** The config for generating an images. */\nexport declare interface GenerateImagesConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** Cloud Storage URI used to store the generated images. */\n  outputGcsUri?: string;\n  /** Description of what to discourage in the generated images. */\n  negativePrompt?: string;\n  /** Number of images to generate. */\n  numberOfImages?: number;\n  /** Aspect ratio of the generated images. Supported values are\n      \"1:1\", \"3:4\", \"4:3\", \"9:16\", and \"16:9\". */\n  aspectRatio?: string;\n  /** Controls how much the model adheres to the text prompt. Large\n      values increase output and prompt alignment, but may compromise image\n      quality. */\n  guidanceScale?: number;\n  /** Random seed for image generation. This is not available when\n      ``add_watermark`` is set to true. */\n  seed?: number;\n  /** Filter level for safety filtering. */\n  safetyFilterLevel?: SafetyFilterLevel;\n  /** Allows generation of people by the model. */\n  personGeneration?: PersonGeneration;\n  /** Whether to report the safety scores of each generated image and\n      the positive prompt in the response. */\n  includeSafetyAttributes?: boolean;\n  /** Whether to include the Responsible AI filter reason if the image\n      is filtered out of the response. */\n  includeRaiReason?: boolean;\n  /** Language of the text in the prompt. */\n  language?: ImagePromptLanguage;\n  /** MIME type of the generated image. */\n  outputMimeType?: string;\n  /** Compression quality of the generated image (for ``image/jpeg``\n      only). */\n  outputCompressionQuality?: number;\n  /** Whether to add a watermark to the generated images. */\n  addWatermark?: boolean;\n  /** User specified labels to track billing usage. */\n  labels?: Record<string, string>;\n  /** The size of the largest dimension of the generated image.\n      Supported sizes are 1K and 2K (not supported for Imagen 3 models). */\n  imageSize?: string;\n  /** Whether to use the prompt rewriting logic. */\n  enhancePrompt?: boolean;\n}\n\n/** The parameters for generating images. */\nexport declare interface GenerateImagesParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** Text prompt that typically describes the images to output.\n   */\n  prompt: string;\n  /** Configuration for generating images.\n   */\n  config?: GenerateImagesConfig;\n}\n\n/** An image. */\nexport declare interface Image {\n  /** The Cloud Storage URI of the image. ``Image`` can contain a value\n      for this field or the ``image_bytes`` field but not both. */\n  gcsUri?: string;\n  /** The image bytes data. ``Image`` can contain a value for this field\n      or the ``gcs_uri`` field but not both.\n  * @remarks Encoded as base64 string. */\n  imageBytes?: string;\n  /** The MIME type of the image. */\n  mimeType?: string;\n}\n\n/** Safety attributes of a GeneratedImage or the user-provided prompt. */\nexport declare interface SafetyAttributes {\n  /** List of RAI categories. */\n  categories?: string[];\n  /** List of scores of each categories. */\n  scores?: number[];\n  /** Internal use only. */\n  contentType?: string;\n}\n\n/** An output image. */\nexport declare interface GeneratedImage {\n  /** The output image data. */\n  image?: Image;\n  /** Responsible AI filter reason if the image is filtered out of the\n      response. */\n  raiFilteredReason?: string;\n  /** Safety attributes of the image. Lists of RAI categories and their\n      scores of each content. */\n  safetyAttributes?: SafetyAttributes;\n  /** The rewritten prompt used for the image generation if the prompt\n      enhancer is enabled. */\n  enhancedPrompt?: string;\n}\n\n/** The output images response. */\nexport class GenerateImagesResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  /** List of generated images. */\n  generatedImages?: GeneratedImage[];\n  /** Safety attributes of the positive prompt. Only populated if\n      ``include_safety_attributes`` is set to True. */\n  positivePromptSafetyAttributes?: SafetyAttributes;\n}\n\n/** Configuration for a Mask reference image. */\nexport declare interface MaskReferenceConfig {\n  /** Prompts the model to generate a mask instead of you needing to\n      provide one (unless MASK_MODE_USER_PROVIDED is used). */\n  maskMode?: MaskReferenceMode;\n  /** A list of up to 5 class ids to use for semantic segmentation.\n      Automatically creates an image mask based on specific objects. */\n  segmentationClasses?: number[];\n  /** Dilation percentage of the mask provided.\n      Float between 0 and 1. */\n  maskDilation?: number;\n}\n\n/** Configuration for a Control reference image. */\nexport declare interface ControlReferenceConfig {\n  /** The type of control reference image to use. */\n  controlType?: ControlReferenceType;\n  /** Defaults to False. When set to True, the control image will be\n      computed by the model based on the control type. When set to False,\n      the control image must be provided by the user. */\n  enableControlImageComputation?: boolean;\n}\n\n/** Configuration for a Style reference image. */\nexport declare interface StyleReferenceConfig {\n  /** A text description of the style to use for the generated image. */\n  styleDescription?: string;\n}\n\n/** Configuration for a Subject reference image. */\nexport declare interface SubjectReferenceConfig {\n  /** The subject type of a subject reference image. */\n  subjectType?: SubjectReferenceType;\n  /** Subject description for the image. */\n  subjectDescription?: string;\n}\n\n/** Configuration for editing an image. */\nexport declare interface EditImageConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** Cloud Storage URI used to store the generated images. */\n  outputGcsUri?: string;\n  /** Description of what to discourage in the generated images. */\n  negativePrompt?: string;\n  /** Number of images to generate. */\n  numberOfImages?: number;\n  /** Aspect ratio of the generated images. Supported values are\n      \"1:1\", \"3:4\", \"4:3\", \"9:16\", and \"16:9\". */\n  aspectRatio?: string;\n  /** Controls how much the model adheres to the text prompt. Large\n      values increase output and prompt alignment, but may compromise image\n      quality. */\n  guidanceScale?: number;\n  /** Random seed for image generation. This is not available when\n      ``add_watermark`` is set to true. */\n  seed?: number;\n  /** Filter level for safety filtering. */\n  safetyFilterLevel?: SafetyFilterLevel;\n  /** Allows generation of people by the model. */\n  personGeneration?: PersonGeneration;\n  /** Whether to report the safety scores of each generated image and\n      the positive prompt in the response. */\n  includeSafetyAttributes?: boolean;\n  /** Whether to include the Responsible AI filter reason if the image\n      is filtered out of the response. */\n  includeRaiReason?: boolean;\n  /** Language of the text in the prompt. */\n  language?: ImagePromptLanguage;\n  /** MIME type of the generated image. */\n  outputMimeType?: string;\n  /** Compression quality of the generated image (for ``image/jpeg``\n      only). */\n  outputCompressionQuality?: number;\n  /** Whether to add a watermark to the generated images. */\n  addWatermark?: boolean;\n  /** User specified labels to track billing usage. */\n  labels?: Record<string, string>;\n  /** Describes the editing mode for the request. */\n  editMode?: EditMode;\n  /** The number of sampling steps. A higher value has better image\n      quality, while a lower value has better latency. */\n  baseSteps?: number;\n}\n\n/** Response for the request to edit an image. */\nexport class EditImageResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  /** Generated images. */\n  generatedImages?: GeneratedImage[];\n}\n\nexport class UpscaleImageResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  /** Generated images. */\n  generatedImages?: GeneratedImage[];\n}\n\n/** An image of the product. */\nexport declare interface ProductImage {\n  /** An image of the product to be recontextualized. */\n  productImage?: Image;\n}\n\n/** A set of source input(s) for image recontextualization. */\nexport declare interface RecontextImageSource {\n  /** A text prompt for guiding the model during image\n      recontextualization. Not supported for Virtual Try-On. */\n  prompt?: string;\n  /** Image of the person or subject who will be wearing the\n      product(s). */\n  personImage?: Image;\n  /** A list of product images. */\n  productImages?: ProductImage[];\n}\n\n/** Configuration for recontextualizing an image. */\nexport declare interface RecontextImageConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** Number of images to generate. */\n  numberOfImages?: number;\n  /** The number of sampling steps. A higher value has better image\n      quality, while a lower value has better latency. */\n  baseSteps?: number;\n  /** Cloud Storage URI used to store the generated images. */\n  outputGcsUri?: string;\n  /** Random seed for image generation. */\n  seed?: number;\n  /** Filter level for safety filtering. */\n  safetyFilterLevel?: SafetyFilterLevel;\n  /** Whether allow to generate person images, and restrict to specific\n      ages. */\n  personGeneration?: PersonGeneration;\n  /** Whether to add a SynthID watermark to the generated images. */\n  addWatermark?: boolean;\n  /** MIME type of the generated image. */\n  outputMimeType?: string;\n  /** Compression quality of the generated image (for ``image/jpeg``\n      only). */\n  outputCompressionQuality?: number;\n  /** Whether to use the prompt rewriting logic. */\n  enhancePrompt?: boolean;\n  /** User specified labels to track billing usage. */\n  labels?: Record<string, string>;\n}\n\n/** The parameters for recontextualizing an image. */\nexport declare interface RecontextImageParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** A set of source input(s) for image recontextualization. */\n  source: RecontextImageSource;\n  /** Configuration for image recontextualization. */\n  config?: RecontextImageConfig;\n}\n\n/** The output images response. */\nexport class RecontextImageResponse {\n  /** List of generated images. */\n  generatedImages?: GeneratedImage[];\n}\n\n/** An image mask representing a brush scribble. */\nexport declare interface ScribbleImage {\n  /** The brush scribble to guide segmentation. Valid for the interactive mode. */\n  image?: Image;\n}\n\n/** A set of source input(s) for image segmentation. */\nexport declare interface SegmentImageSource {\n  /** A text prompt for guiding the model during image segmentation.\n      Required for prompt mode and semantic mode, disallowed for other modes. */\n  prompt?: string;\n  /** The image to be segmented. */\n  image?: Image;\n  /** The brush scribble to guide segmentation.\n      Required for the interactive mode, disallowed for other modes. */\n  scribbleImage?: ScribbleImage;\n}\n\n/** Configuration for segmenting an image. */\nexport declare interface SegmentImageConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** The segmentation mode to use. */\n  mode?: SegmentMode;\n  /** The maximum number of predictions to return up to, by top\n      confidence score. */\n  maxPredictions?: number;\n  /** The confidence score threshold for the detections as a decimal\n      value. Only predictions with a confidence score higher than this\n      threshold will be returned. */\n  confidenceThreshold?: number;\n  /** A decimal value representing how much dilation to apply to the\n      masks. 0 for no dilation. 1.0 means the masked area covers the whole\n      image. */\n  maskDilation?: number;\n  /** The binary color threshold to apply to the masks. The threshold\n      can be set to a decimal value between 0 and 255 non-inclusive.\n      Set to -1 for no binary color thresholding. */\n  binaryColorThreshold?: number;\n  /** User specified labels to track billing usage. */\n  labels?: Record<string, string>;\n}\n\n/** The parameters for segmenting an image. */\nexport declare interface SegmentImageParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** A set of source input(s) for image segmentation. */\n  source: SegmentImageSource;\n  /** Configuration for image segmentation. */\n  config?: SegmentImageConfig;\n}\n\n/** An entity representing the segmented area. */\nexport declare interface EntityLabel {\n  /** The label of the segmented entity. */\n  label?: string;\n  /** The confidence score of the detected label. */\n  score?: number;\n}\n\n/** A generated image mask. */\nexport declare interface GeneratedImageMask {\n  /** The generated image mask. */\n  mask?: Image;\n  /** The detected entities on the segmented area. */\n  labels?: EntityLabel[];\n}\n\n/** The output images response. */\nexport class SegmentImageResponse {\n  /** List of generated image masks.\n   */\n  generatedMasks?: GeneratedImageMask[];\n}\n\n/** Optional parameters for models.get method. */\nexport declare interface GetModelConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\nexport declare interface GetModelParameters {\n  model: string;\n  /** Optional parameters for the request. */\n  config?: GetModelConfig;\n}\n\n/** An endpoint where you deploy models. */\nexport declare interface Endpoint {\n  /** Resource name of the endpoint. */\n  name?: string;\n  /** ID of the model that's deployed to the endpoint. */\n  deployedModelId?: string;\n}\n\n/** A tuned machine learning model. */\nexport declare interface TunedModelInfo {\n  /** ID of the base model that you want to tune. */\n  baseModel?: string;\n  /** Date and time when the base model was created. */\n  createTime?: string;\n  /** Date and time when the base model was last updated. */\n  updateTime?: string;\n}\n\n/** Describes the machine learning model version checkpoint. */\nexport declare interface Checkpoint {\n  /** The ID of the checkpoint.\n   */\n  checkpointId?: string;\n  /** The epoch of the checkpoint.\n   */\n  epoch?: string;\n  /** The step of the checkpoint.\n   */\n  step?: string;\n}\n\n/** A trained machine learning model. */\nexport declare interface Model {\n  /** Resource name of the model. */\n  name?: string;\n  /** Display name of the model. */\n  displayName?: string;\n  /** Description of the model. */\n  description?: string;\n  /** Version ID of the model. A new version is committed when a new\n      model version is uploaded or trained under an existing model ID. The\n      version ID is an auto-incrementing decimal number in string\n      representation. */\n  version?: string;\n  /** List of deployed models created from this base model. Note that a\n      model could have been deployed to endpoints in different locations. */\n  endpoints?: Endpoint[];\n  /** Labels with user-defined metadata to organize your models. */\n  labels?: Record<string, string>;\n  /** Information about the tuned model from the base model. */\n  tunedModelInfo?: TunedModelInfo;\n  /** The maximum number of input tokens that the model can handle. */\n  inputTokenLimit?: number;\n  /** The maximum number of output tokens that the model can generate. */\n  outputTokenLimit?: number;\n  /** List of actions that are supported by the model. */\n  supportedActions?: string[];\n  /** The default checkpoint id of a model version.\n   */\n  defaultCheckpointId?: string;\n  /** The checkpoints of the model. */\n  checkpoints?: Checkpoint[];\n}\n\nexport declare interface ListModelsConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  pageSize?: number;\n  pageToken?: string;\n  filter?: string;\n  /** Set true to list base models, false to list tuned models. */\n  queryBase?: boolean;\n}\n\nexport declare interface ListModelsParameters {\n  config?: ListModelsConfig;\n}\n\nexport class ListModelsResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  nextPageToken?: string;\n  models?: Model[];\n}\n\n/** Configuration for updating a tuned model. */\nexport declare interface UpdateModelConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  displayName?: string;\n  description?: string;\n  defaultCheckpointId?: string;\n}\n\n/** Configuration for updating a tuned model. */\nexport declare interface UpdateModelParameters {\n  model: string;\n  config?: UpdateModelConfig;\n}\n\n/** Configuration for deleting a tuned model. */\nexport declare interface DeleteModelConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Parameters for deleting a tuned model. */\nexport declare interface DeleteModelParameters {\n  model: string;\n  /** Optional parameters for the request. */\n  config?: DeleteModelConfig;\n}\n\nexport class DeleteModelResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n}\n\n/** Generation config. */\nexport declare interface GenerationConfig {\n  /** Optional. Config for model selection. */\n  modelSelectionConfig?: ModelSelectionConfig;\n  /** Optional. If enabled, audio timestamp will be included in the request to the model. This field is not supported in Gemini API. */\n  audioTimestamp?: boolean;\n  /** Optional. Number of candidates to generate. */\n  candidateCount?: number;\n  /** Optional. If enabled, the model will detect emotions and adapt its responses accordingly. This field is not supported in Gemini API. */\n  enableAffectiveDialog?: boolean;\n  /** Optional. Frequency penalties. */\n  frequencyPenalty?: number;\n  /** Optional. Logit probabilities. */\n  logprobs?: number;\n  /** Optional. The maximum number of output tokens to generate per message. */\n  maxOutputTokens?: number;\n  /** Optional. If specified, the media resolution specified will be used. */\n  mediaResolution?: MediaResolution;\n  /** Optional. Positive penalties. */\n  presencePenalty?: number;\n  /** Optional. Output schema of the generated response. This is an alternative to `response_schema` that accepts [JSON Schema](https://json-schema.org/). If set, `response_schema` must be omitted, but `response_mime_type` is required. While the full JSON Schema may be sent, not all features are supported. Specifically, only the following properties are supported: - `$id` - `$defs` - `$ref` - `$anchor` - `type` - `format` - `title` - `description` - `enum` (for strings and numbers) - `items` - `prefixItems` - `minItems` - `maxItems` - `minimum` - `maximum` - `anyOf` - `oneOf` (interpreted the same as `anyOf`) - `properties` - `additionalProperties` - `required` The non-standard `propertyOrdering` property may also be set. Cyclic references are unrolled to a limited degree and, as such, may only be used within non-required properties. (Nullable properties are not sufficient.) If `$ref` is set on a sub-schema, no other properties, except for than those starting as a `$`, may be set. */\n  responseJsonSchema?: unknown;\n  /** Optional. If true, export the logprobs results in response. */\n  responseLogprobs?: boolean;\n  /** Optional. Output response mimetype of the generated candidate text. Supported mimetype: - `text/plain`: (default) Text output. - `application/json`: JSON response in the candidates. The model needs to be prompted to output the appropriate response type, otherwise the behavior is undefined. This is a preview feature. */\n  responseMimeType?: string;\n  /** Optional. The modalities of the response. */\n  responseModalities?: Modality[];\n  /** Optional. The `Schema` object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. Represents a select subset of an [OpenAPI 3.0 schema object](https://spec.openapis.org/oas/v3.0.3#schema). If set, a compatible response_mime_type must also be set. Compatible mimetypes: `application/json`: Schema for JSON response. */\n  responseSchema?: Schema;\n  /** Optional. Routing configuration. This field is not supported in Gemini API. */\n  routingConfig?: GenerationConfigRoutingConfig;\n  /** Optional. Seed. */\n  seed?: number;\n  /** Optional. The speech generation config. */\n  speechConfig?: SpeechConfig;\n  /** Optional. Stop sequences. */\n  stopSequences?: string[];\n  /** Optional. Controls the randomness of predictions. */\n  temperature?: number;\n  /** Optional. Config for thinking features. An error will be returned if this field is set for models that don't support thinking. */\n  thinkingConfig?: ThinkingConfig;\n  /** Optional. If specified, top-k sampling will be used. */\n  topK?: number;\n  /** Optional. If specified, nucleus sampling will be used. */\n  topP?: number;\n  /** Optional. Enables enhanced civic answers. It may not be available for all models. This field is not supported in Vertex AI. */\n  enableEnhancedCivicAnswers?: boolean;\n}\n\n/** Config for the count_tokens method. */\nexport declare interface CountTokensConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** Instructions for the model to steer it toward better performance.\n   */\n  systemInstruction?: ContentUnion;\n  /** Code that enables the system to interact with external systems to\n      perform an action outside of the knowledge and scope of the model.\n       */\n  tools?: Tool[];\n  /** Configuration that the model uses to generate the response. Not\n      supported by the Gemini Developer API.\n       */\n  generationConfig?: GenerationConfig;\n}\n\n/** Parameters for counting tokens. */\nexport declare interface CountTokensParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** Input content. */\n  contents: ContentListUnion;\n  /** Configuration for counting tokens. */\n  config?: CountTokensConfig;\n}\n\n/** Response for counting tokens. */\nexport class CountTokensResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  /** Total number of tokens. */\n  totalTokens?: number;\n  /** Number of tokens in the cached part of the prompt (the cached content). */\n  cachedContentTokenCount?: number;\n}\n\n/** Optional parameters for computing tokens. */\nexport declare interface ComputeTokensConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Parameters for computing tokens. */\nexport declare interface ComputeTokensParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** Input content. */\n  contents: ContentListUnion;\n  /** Optional parameters for the request.\n   */\n  config?: ComputeTokensConfig;\n}\n\n/** Tokens info with a list of tokens and the corresponding list of token ids. */\nexport declare interface TokensInfo {\n  /** Optional fields for the role from the corresponding Content. */\n  role?: string;\n  /** A list of token ids from the input. */\n  tokenIds?: string[];\n  /** A list of tokens from the input.\n   * @remarks Encoded as base64 string. */\n  tokens?: string[];\n}\n\n/** Response for computing tokens. */\nexport class ComputeTokensResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  /** Lists of tokens info from the input. A ComputeTokensRequest could have multiple instances with a prompt in each instance. We also need to return lists of tokens info for the request with multiple instances. */\n  tokensInfo?: TokensInfo[];\n}\n\n/** A generated video. */\nexport declare interface Video {\n  /** Path to another storage. */\n  uri?: string;\n  /** Video bytes.\n   * @remarks Encoded as base64 string. */\n  videoBytes?: string;\n  /** Video encoding, for example ``video/mp4``. */\n  mimeType?: string;\n}\n\n/** A set of source input(s) for video generation. */\nexport declare interface GenerateVideosSource {\n  /** The text prompt for generating the videos.\n      Optional if image or video is provided. */\n  prompt?: string;\n  /** The input image for generating the videos.\n      Optional if prompt is provided. Not allowed if video is provided. */\n  image?: Image;\n  /** The input video for video extension use cases.\n      Optional if prompt is provided. Not allowed if image is provided. */\n  video?: Video;\n}\n\n/** A reference image for video generation. */\nexport declare interface VideoGenerationReferenceImage {\n  /** The reference image. */\n  image?: Image;\n  /** The type of the reference image, which defines how the reference\n      image will be used to generate the video. */\n  referenceType?: VideoGenerationReferenceType;\n}\n\n/** A mask for video generation. */\nexport declare interface VideoGenerationMask {\n  /** The image mask to use for generating videos. */\n  image?: Image;\n  /** Describes how the mask will be used. Inpainting masks must\n      match the aspect ratio of the input video. Outpainting masks can be\n      either 9:16 or 16:9. */\n  maskMode?: VideoGenerationMaskMode;\n}\n\n/** Configuration for generating videos. */\nexport declare interface GenerateVideosConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** Number of output videos. */\n  numberOfVideos?: number;\n  /** The gcs bucket where to save the generated videos. */\n  outputGcsUri?: string;\n  /** Frames per second for video generation. */\n  fps?: number;\n  /** Duration of the clip for video generation in seconds. */\n  durationSeconds?: number;\n  /** The RNG seed. If RNG seed is exactly same for each request with\n      unchanged inputs, the prediction results will be consistent. Otherwise,\n      a random RNG seed will be used each time to produce a different\n      result. */\n  seed?: number;\n  /** The aspect ratio for the generated video. 16:9 (landscape) and\n      9:16 (portrait) are supported. */\n  aspectRatio?: string;\n  /** The resolution for the generated video. 720p and 1080p are\n      supported. */\n  resolution?: string;\n  /** Whether allow to generate person videos, and restrict to specific\n      ages. Supported values are: dont_allow, allow_adult. */\n  personGeneration?: string;\n  /** The pubsub topic where to publish the video generation\n      progress. */\n  pubsubTopic?: string;\n  /** Explicitly state what should not be included in the generated\n      videos. */\n  negativePrompt?: string;\n  /** Whether to use the prompt rewriting logic. */\n  enhancePrompt?: boolean;\n  /** Whether to generate audio along with the video. */\n  generateAudio?: boolean;\n  /** Image to use as the last frame of generated videos.\n      Only supported for image to video use cases. */\n  lastFrame?: Image;\n  /** The images to use as the references to generate the videos.\n      If this field is provided, the text prompt field must also be provided.\n      The image, video, or last_frame field are not supported. Each image must\n      be associated with a type. Veo 2 supports up to 3 asset images *or* 1\n      style image. */\n  referenceImages?: VideoGenerationReferenceImage[];\n  /** The mask to use for generating videos. */\n  mask?: VideoGenerationMask;\n  /** Compression quality of the generated videos. */\n  compressionQuality?: VideoCompressionQuality;\n}\n\n/** Class that represents the parameters for generating videos. */\nexport declare interface GenerateVideosParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** The text prompt for generating the videos.\n      Optional if image or video is provided. */\n  prompt?: string;\n  /** The input image for generating the videos.\n      Optional if prompt is provided. Not allowed if video is provided. */\n  image?: Image;\n  /** The input video for video extension use cases.\n      Optional if prompt is provided. Not allowed if image is provided. */\n  video?: Video;\n  /** A set of source input(s) for video generation. */\n  source?: GenerateVideosSource;\n  /** Configuration for generating videos. */\n  config?: GenerateVideosConfig;\n}\n\n/** A generated video. */\nexport declare interface GeneratedVideo {\n  /** The output video */\n  video?: Video;\n}\n\n/** Response with generated videos. */\nexport class GenerateVideosResponse {\n  /** List of the generated videos */\n  generatedVideos?: GeneratedVideo[];\n  /** Returns if any videos were filtered due to RAI policies. */\n  raiMediaFilteredCount?: number;\n  /** Returns rai failure reasons if any. */\n  raiMediaFilteredReasons?: string[];\n}\n\n/** A long-running operation. */\nexport declare interface Operation<T> {\n  /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */\n  name?: string;\n  /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata.  Any method that returns a long-running operation should document the metadata type, if any. */\n  metadata?: Record<string, unknown>;\n  /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */\n  done?: boolean;\n  /** The error result of the operation in case of failure or cancellation. */\n  error?: Record<string, unknown>;\n  /** The response if the operation is successful. */\n  response?: T;\n  /**\n   * Instantiates an Operation of the same type as the one being called with the fields set from the API response.\n   * @internal\n   */\n  _fromAPIResponse({\n    apiResponse,\n    isVertexAI,\n  }: OperationFromAPIResponseParameters): Operation<T>;\n}\n\n/** A video generation operation. */\nexport class GenerateVideosOperation\n  implements Operation<GenerateVideosResponse>\n{\n  /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */\n  name?: string;\n  /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata.  Any method that returns a long-running operation should document the metadata type, if any. */\n  metadata?: Record<string, unknown>;\n  /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */\n  done?: boolean;\n  /** The error result of the operation in case of failure or cancellation. */\n  error?: Record<string, unknown>;\n  /** The generated videos. */\n  response?: GenerateVideosResponse;\n\n  /**\n   * Instantiates an Operation of the same type as the one being called with the fields set from the API response.\n   * @internal\n   */\n  _fromAPIResponse({\n    apiResponse,\n    isVertexAI,\n  }: OperationFromAPIResponseParameters): Operation<GenerateVideosResponse> {\n    const operation = new GenerateVideosOperation();\n    let response;\n    const op = apiResponse as unknown as GenerateVideosOperation;\n\n    if (isVertexAI) {\n      response = generateVideosOperationFromVertex(op);\n    } else {\n      response = generateVideosOperationFromMldev(op);\n    }\n    Object.assign(operation, response);\n    return operation;\n  }\n  /** The full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n}\n\nexport /** Optional parameters for tunings.get method. */\ndeclare interface GetTuningJobConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Parameters for the get method. */\nexport declare interface GetTuningJobParameters {\n  name: string;\n  /** Optional parameters for the request. */\n  config?: GetTuningJobConfig;\n}\n\n/** TunedModelCheckpoint for the Tuned Model of a Tuning Job. */\nexport declare interface TunedModelCheckpoint {\n  /** The ID of the checkpoint.\n   */\n  checkpointId?: string;\n  /** The epoch of the checkpoint.\n   */\n  epoch?: string;\n  /** The step of the checkpoint.\n   */\n  step?: string;\n  /** The Endpoint resource name that the checkpoint is deployed to.\n      Format: `projects/{project}/locations/{location}/endpoints/{endpoint}`.\n       */\n  endpoint?: string;\n}\n\n/** TunedModel for the Tuned Model of a Tuning Job. */\nexport declare interface TunedModel {\n  /** Output only. The resource name of the TunedModel.\n      Format: `projects/{project}/locations/{location}/models/{model}@{version_id}`\n      When tuning from a base model, the version_id will be 1.\n      For continuous tuning, the version id will be incremented by 1 from the\n      last version id in the parent model. E.g., `projects/{project}/locations/{location}/models/{model}@{last_version_id + 1}`\n       */\n  model?: string;\n  /** Output only. A resource name of an Endpoint.\n      Format: `projects/{project}/locations/{location}/endpoints/{endpoint}`.\n       */\n  endpoint?: string;\n  /** The checkpoints associated with this TunedModel.\n      This field is only populated for tuning jobs that enable intermediate\n      checkpoints. */\n  checkpoints?: TunedModelCheckpoint[];\n}\n\n/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). This data type is not supported in Gemini API. */\nexport declare interface GoogleRpcStatus {\n  /** The status code, which should be an enum value of google.rpc.Code. */\n  code?: number;\n  /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */\n  details?: Record<string, unknown>[];\n  /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */\n  message?: string;\n}\n\n/** A pre-tuned model for continuous tuning. This data type is not supported in Gemini API. */\nexport declare interface PreTunedModel {\n  /** Output only. The name of the base model this PreTunedModel was tuned from. */\n  baseModel?: string;\n  /** Optional. The source checkpoint id. If not specified, the default checkpoint will be used. */\n  checkpointId?: string;\n  /** The resource name of the Model. E.g., a model resource name with a specified version id or alias: `projects/{project}/locations/{location}/models/{model}@{version_id}` `projects/{project}/locations/{location}/models/{model}@{alias}` Or, omit the version id to use the default version: `projects/{project}/locations/{location}/models/{model}` */\n  tunedModelName?: string;\n}\n\n/** Hyperparameters for SFT. This data type is not supported in Gemini API. */\nexport declare interface SupervisedHyperParameters {\n  /** Optional. Adapter size for tuning. */\n  adapterSize?: AdapterSize;\n  /** Optional. Batch size for tuning. This feature is only available for open source models. */\n  batchSize?: string;\n  /** Optional. Number of complete passes the model makes over the entire training dataset during training. */\n  epochCount?: string;\n  /** Optional. Learning rate for tuning. Mutually exclusive with `learning_rate_multiplier`. This feature is only available for open source models. */\n  learningRate?: number;\n  /** Optional. Multiplier for adjusting the default learning rate. Mutually exclusive with `learning_rate`. This feature is only available for 1P models. */\n  learningRateMultiplier?: number;\n}\n\n/** Tuning Spec for Supervised Tuning for first party models. This data type is not supported in Gemini API. */\nexport declare interface SupervisedTuningSpec {\n  /** Optional. If set to true, disable intermediate checkpoints for SFT and only the last checkpoint will be exported. Otherwise, enable intermediate checkpoints for SFT. Default is false. */\n  exportLastCheckpointOnly?: boolean;\n  /** Optional. Hyperparameters for SFT. */\n  hyperParameters?: SupervisedHyperParameters;\n  /** Required. Training dataset used for tuning. The dataset can be specified as either a Cloud Storage path to a JSONL file or as the resource name of a Vertex Multimodal Dataset. */\n  trainingDatasetUri?: string;\n  /** Tuning mode. */\n  tuningMode?: TuningMode;\n  /** Optional. Validation dataset used for tuning. The dataset can be specified as either a Cloud Storage path to a JSONL file or as the resource name of a Vertex Multimodal Dataset. */\n  validationDatasetUri?: string;\n}\n\n/** Dataset bucket used to create a histogram for the distribution given a population of values. This data type is not supported in Gemini API. */\nexport declare interface DatasetDistributionDistributionBucket {\n  /** Output only. Number of values in the bucket. */\n  count?: string;\n  /** Output only. Left bound of the bucket. */\n  left?: number;\n  /** Output only. Right bound of the bucket. */\n  right?: number;\n}\n\n/** Distribution computed over a tuning dataset. This data type is not supported in Gemini API. */\nexport declare interface DatasetDistribution {\n  /** Output only. Defines the histogram bucket. */\n  buckets?: DatasetDistributionDistributionBucket[];\n  /** Output only. The maximum of the population values. */\n  max?: number;\n  /** Output only. The arithmetic mean of the values in the population. */\n  mean?: number;\n  /** Output only. The median of the values in the population. */\n  median?: number;\n  /** Output only. The minimum of the population values. */\n  min?: number;\n  /** Output only. The 5th percentile of the values in the population. */\n  p5?: number;\n  /** Output only. The 95th percentile of the values in the population. */\n  p95?: number;\n  /** Output only. Sum of a given population of values. */\n  sum?: number;\n}\n\n/** Statistics computed over a tuning dataset. This data type is not supported in Gemini API. */\nexport declare interface DatasetStats {\n  /** Output only. Number of billable characters in the tuning dataset. */\n  totalBillableCharacterCount?: string;\n  /** Output only. Number of tuning characters in the tuning dataset. */\n  totalTuningCharacterCount?: string;\n  /** Output only. Number of examples in the tuning dataset. */\n  tuningDatasetExampleCount?: string;\n  /** Output only. Number of tuning steps for this Tuning Job. */\n  tuningStepCount?: string;\n  /** Output only. Sample user messages in the training dataset uri. */\n  userDatasetExamples?: Content[];\n  /** Output only. Dataset distributions for the user input tokens. */\n  userInputTokenDistribution?: DatasetDistribution;\n  /** Output only. Dataset distributions for the messages per example. */\n  userMessagePerExampleDistribution?: DatasetDistribution;\n  /** Output only. Dataset distributions for the user output tokens. */\n  userOutputTokenDistribution?: DatasetDistribution;\n}\n\n/** Statistics computed for datasets used for distillation. This data type is not supported in Gemini API. */\nexport declare interface DistillationDataStats {\n  /** Output only. Statistics computed for the training dataset. */\n  trainingDatasetStats?: DatasetStats;\n}\n\n/** Completion and its preference score. This data type is not supported in Gemini API. */\nexport declare interface GeminiPreferenceExampleCompletion {\n  /** Single turn completion for the given prompt. */\n  completion?: Content;\n  /** The score for the given completion. */\n  score?: number;\n}\n\n/** Input example for preference optimization. This data type is not supported in Gemini API. */\nexport declare interface GeminiPreferenceExample {\n  /** List of completions for a given prompt. */\n  completions?: GeminiPreferenceExampleCompletion[];\n  /** Multi-turn contents that represents the Prompt. */\n  contents?: Content[];\n}\n\n/** Statistics computed for datasets used for preference optimization. This data type is not supported in Gemini API. */\nexport declare interface PreferenceOptimizationDataStats {\n  /** Output only. Dataset distributions for scores variance per example. */\n  scoreVariancePerExampleDistribution?: DatasetDistribution;\n  /** Output only. Dataset distributions for scores. */\n  scoresDistribution?: DatasetDistribution;\n  /** Output only. Number of billable tokens in the tuning dataset. */\n  totalBillableTokenCount?: string;\n  /** Output only. Number of examples in the tuning dataset. */\n  tuningDatasetExampleCount?: string;\n  /** Output only. Number of tuning steps for this Tuning Job. */\n  tuningStepCount?: string;\n  /** Output only. Sample user examples in the training dataset. */\n  userDatasetExamples?: GeminiPreferenceExample[];\n  /** Output only. Dataset distributions for the user input tokens. */\n  userInputTokenDistribution?: DatasetDistribution;\n  /** Output only. Dataset distributions for the user output tokens. */\n  userOutputTokenDistribution?: DatasetDistribution;\n}\n\n/** Dataset bucket used to create a histogram for the distribution given a population of values. This data type is not supported in Gemini API. */\nexport declare interface SupervisedTuningDatasetDistributionDatasetBucket {\n  /** Output only. Number of values in the bucket. */\n  count?: number;\n  /** Output only. Left bound of the bucket. */\n  left?: number;\n  /** Output only. Right bound of the bucket. */\n  right?: number;\n}\n\n/** Dataset distribution for Supervised Tuning. This data type is not supported in Gemini API. */\nexport declare interface SupervisedTuningDatasetDistribution {\n  /** Output only. Sum of a given population of values that are billable. */\n  billableSum?: string;\n  /** Output only. Defines the histogram bucket. */\n  buckets?: SupervisedTuningDatasetDistributionDatasetBucket[];\n  /** Output only. The maximum of the population values. */\n  max?: number;\n  /** Output only. The arithmetic mean of the values in the population. */\n  mean?: number;\n  /** Output only. The median of the values in the population. */\n  median?: number;\n  /** Output only. The minimum of the population values. */\n  min?: number;\n  /** Output only. The 5th percentile of the values in the population. */\n  p5?: number;\n  /** Output only. The 95th percentile of the values in the population. */\n  p95?: number;\n  /** Output only. Sum of a given population of values. */\n  sum?: string;\n}\n\n/** Tuning data statistics for Supervised Tuning. This data type is not supported in Gemini API. */\nexport declare interface SupervisedTuningDataStats {\n  /** Output only. For each index in `truncated_example_indices`, the user-facing reason why the example was dropped. */\n  droppedExampleReasons?: string[];\n  /** Output only. Number of billable characters in the tuning dataset. */\n  totalBillableCharacterCount?: string;\n  /** Output only. Number of billable tokens in the tuning dataset. */\n  totalBillableTokenCount?: string;\n  /** Output only. The number of examples in the dataset that have been dropped. An example can be dropped for reasons including: too many tokens, contains an invalid image, contains too many images, etc. */\n  totalTruncatedExampleCount?: string;\n  /** Output only. Number of tuning characters in the tuning dataset. */\n  totalTuningCharacterCount?: string;\n  /** Output only. A partial sample of the indices (starting from 1) of the dropped examples. */\n  truncatedExampleIndices?: string[];\n  /** Output only. Number of examples in the tuning dataset. */\n  tuningDatasetExampleCount?: string;\n  /** Output only. Number of tuning steps for this Tuning Job. */\n  tuningStepCount?: string;\n  /** Output only. Sample user messages in the training dataset uri. */\n  userDatasetExamples?: Content[];\n  /** Output only. Dataset distributions for the user input tokens. */\n  userInputTokenDistribution?: SupervisedTuningDatasetDistribution;\n  /** Output only. Dataset distributions for the messages per example. */\n  userMessagePerExampleDistribution?: SupervisedTuningDatasetDistribution;\n  /** Output only. Dataset distributions for the user output tokens. */\n  userOutputTokenDistribution?: SupervisedTuningDatasetDistribution;\n}\n\n/** The tuning data statistic values for TuningJob. This data type is not supported in Gemini API. */\nexport declare interface TuningDataStats {\n  /** Output only. Statistics for distillation. */\n  distillationDataStats?: DistillationDataStats;\n  /** Output only. Statistics for preference optimization. */\n  preferenceOptimizationDataStats?: PreferenceOptimizationDataStats;\n  /** The SFT Tuning data stats. */\n  supervisedTuningDataStats?: SupervisedTuningDataStats;\n}\n\n/** Represents a customer-managed encryption key spec that can be applied to a top-level resource. This data type is not supported in Gemini API. */\nexport declare interface EncryptionSpec {\n  /** Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created. */\n  kmsKeyName?: string;\n}\n\n/** Tuning spec for Partner models. This data type is not supported in Gemini API. */\nexport declare interface PartnerModelTuningSpec {\n  /** Hyperparameters for tuning. The accepted hyper_parameters and their valid range of values will differ depending on the base model. */\n  hyperParameters?: Record<string, unknown>;\n  /** Required. Cloud Storage path to file containing training dataset for tuning. The dataset must be formatted as a JSONL file. */\n  trainingDatasetUri?: string;\n  /** Optional. Cloud Storage path to file containing validation dataset for tuning. The dataset must be formatted as a JSONL file. */\n  validationDatasetUri?: string;\n}\n\n/** Hyperparameters for Veo. This data type is not supported in Gemini API. */\nexport declare interface VeoHyperParameters {\n  /** Optional. Number of complete passes the model makes over the entire training dataset during training. */\n  epochCount?: string;\n  /** Optional. Multiplier for adjusting the default learning rate. */\n  learningRateMultiplier?: number;\n  /** Optional. The tuning task. Either I2V or T2V. */\n  tuningTask?: TuningTask;\n}\n\n/** Tuning Spec for Veo Model Tuning. This data type is not supported in Gemini API. */\nexport declare interface VeoTuningSpec {\n  /** Optional. Hyperparameters for Veo. */\n  hyperParameters?: VeoHyperParameters;\n  /** Required. Training dataset used for tuning. The dataset can be specified as either a Cloud Storage path to a JSONL file or as the resource name of a Vertex Multimodal Dataset. */\n  trainingDatasetUri?: string;\n  /** Optional. Validation dataset used for tuning. The dataset can be specified as either a Cloud Storage path to a JSONL file or as the resource name of a Vertex Multimodal Dataset. */\n  validationDatasetUri?: string;\n}\n\n/** A tuning job. */\nexport declare interface TuningJob {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  /** Output only. Identifier. Resource name of a TuningJob. Format: `projects/{project}/locations/{location}/tuningJobs/{tuning_job}` */\n  name?: string;\n  /** Output only. The detailed state of the job. */\n  state?: JobState;\n  /** Output only. Time when the TuningJob was created. */\n  createTime?: string;\n  /** Output only. Time when the TuningJob for the first time entered the `JOB_STATE_RUNNING` state. */\n  startTime?: string;\n  /** Output only. Time when the TuningJob entered any of the following JobStates: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`, `JOB_STATE_EXPIRED`. */\n  endTime?: string;\n  /** Output only. Time when the TuningJob was most recently updated. */\n  updateTime?: string;\n  /** Output only. Only populated when job's state is `JOB_STATE_FAILED` or `JOB_STATE_CANCELLED`. */\n  error?: GoogleRpcStatus;\n  /** Optional. The description of the TuningJob. */\n  description?: string;\n  /** The base model that is being tuned. See [Supported models](https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/tuning#supported_models). */\n  baseModel?: string;\n  /** Output only. The tuned model resources associated with this TuningJob. */\n  tunedModel?: TunedModel;\n  /** The pre-tuned model for continuous tuning. */\n  preTunedModel?: PreTunedModel;\n  /** Tuning Spec for Supervised Fine Tuning. */\n  supervisedTuningSpec?: SupervisedTuningSpec;\n  /** Output only. The tuning data statistics associated with this TuningJob. */\n  tuningDataStats?: TuningDataStats;\n  /** Customer-managed encryption key options for a TuningJob. If this is set, then all resources created by the TuningJob will be encrypted with the provided encryption key. */\n  encryptionSpec?: EncryptionSpec;\n  /** Tuning Spec for open sourced and third party Partner models. */\n  partnerModelTuningSpec?: PartnerModelTuningSpec;\n  /** Optional. The user-provided path to custom model weights. Set this field to tune a custom model. The path must be a Cloud Storage directory that contains the model weights in .safetensors format along with associated model metadata files. If this field is set, the base_model field must still be set to indicate which base model the custom model is derived from. This feature is only available for open source models. */\n  customBaseModel?: string;\n  /** Output only. The Experiment associated with this TuningJob. */\n  experiment?: string;\n  /** Optional. The labels with user-defined metadata to organize TuningJob and generated resources such as Model and Endpoint. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. */\n  labels?: Record<string, string>;\n  /** Optional. Cloud Storage path to the directory where tuning job outputs are written to. This field is only available and required for open source models. */\n  outputUri?: string;\n  /** Output only. The resource name of the PipelineJob associated with the TuningJob. Format: `projects/{project}/locations/{location}/pipelineJobs/{pipeline_job}`. */\n  pipelineJob?: string;\n  /** The service account that the tuningJob workload runs as. If not specified, the Vertex AI Secure Fine-Tuned Service Agent in the project will be used. See https://cloud.google.com/iam/docs/service-agents#vertex-ai-secure-fine-tuning-service-agent Users starting the pipeline must have the `iam.serviceAccounts.actAs` permission on this service account. */\n  serviceAccount?: string;\n  /** Optional. The display name of the TunedModel. The name can be up to 128 characters long and can consist of any UTF-8 characters. */\n  tunedModelDisplayName?: string;\n  /** Tuning Spec for Veo Tuning. */\n  veoTuningSpec?: VeoTuningSpec;\n}\n\n/** Configuration for the list tuning jobs method. */\nexport declare interface ListTuningJobsConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  pageSize?: number;\n  pageToken?: string;\n  filter?: string;\n}\n\n/** Parameters for the list tuning jobs method. */\nexport declare interface ListTuningJobsParameters {\n  config?: ListTuningJobsConfig;\n}\n\n/** Response for the list tuning jobs method. */\nexport class ListTuningJobsResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  /** A token to retrieve the next page of results. Pass to ListTuningJobsRequest.page_token to obtain that page. */\n  nextPageToken?: string;\n  /** List of TuningJobs in the requested page. */\n  tuningJobs?: TuningJob[];\n}\n\n/** Optional parameters for tunings.cancel method. */\nexport declare interface CancelTuningJobConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Parameters for the cancel method. */\nexport declare interface CancelTuningJobParameters {\n  /** The resource name of the tuning job. */\n  name: string;\n  /** Optional parameters for the request. */\n  config?: CancelTuningJobConfig;\n}\n\n/** A single example for tuning. This data type is not supported in Vertex AI. */\nexport declare interface TuningExample {\n  /** Required. The expected model output. */\n  output?: string;\n  /** Optional. Text model input. */\n  textInput?: string;\n}\n\n/** Supervised fine-tuning training dataset. */\nexport declare interface TuningDataset {\n  /** GCS URI of the file containing training dataset in JSONL format. */\n  gcsUri?: string;\n  /** The resource name of the Vertex Multimodal Dataset that is used as training dataset. Example: 'projects/my-project-id-or-number/locations/my-location/datasets/my-dataset-id'. */\n  vertexDatasetResource?: string;\n  /** Inline examples with simple input/output text. */\n  examples?: TuningExample[];\n}\n\nexport declare interface TuningValidationDataset {\n  /** GCS URI of the file containing validation dataset in JSONL format. */\n  gcsUri?: string;\n  /** The resource name of the Vertex Multimodal Dataset that is used as validation dataset. Example: 'projects/my-project-id-or-number/locations/my-location/datasets/my-dataset-id'. */\n  vertexDatasetResource?: string;\n}\n\n/** Supervised fine-tuning job creation request - optional fields. */\nexport declare interface CreateTuningJobConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** Validation dataset for tuning. The dataset must be formatted as a JSONL file. */\n  validationDataset?: TuningValidationDataset;\n  /** The display name of the tuned Model. The name can be up to 128 characters long and can consist of any UTF-8 characters. */\n  tunedModelDisplayName?: string;\n  /** The description of the TuningJob */\n  description?: string;\n  /** Number of complete passes the model makes over the entire training dataset during training. */\n  epochCount?: number;\n  /** Multiplier for adjusting the default learning rate. */\n  learningRateMultiplier?: number;\n  /** If set to true, disable intermediate checkpoints for SFT and only the last checkpoint will be exported. Otherwise, enable intermediate checkpoints for SFT. */\n  exportLastCheckpointOnly?: boolean;\n  /** The optional checkpoint id of the pre-tuned model to use for tuning, if applicable. */\n  preTunedModelCheckpointId?: string;\n  /** Adapter size for tuning. */\n  adapterSize?: AdapterSize;\n  /** The batch size hyperparameter for tuning. If not set, a default of 4 or 16 will be used based on the number of training examples. */\n  batchSize?: number;\n  /** The learning rate hyperparameter for tuning. If not set, a default of 0.001 or 0.0002 will be calculated based on the number of training examples. */\n  learningRate?: number;\n  /** Optional. The labels with user-defined metadata to organize TuningJob and generated resources such as Model and Endpoint. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. */\n  labels?: Record<string, string>;\n}\n\n/** Supervised fine-tuning job creation parameters - optional fields. */\nexport declare interface CreateTuningJobParametersPrivate {\n  /** The base model that is being tuned, e.g., \"gemini-2.5-flash\". */\n  baseModel?: string;\n  /** The PreTunedModel that is being tuned. */\n  preTunedModel?: PreTunedModel;\n  /** Cloud Storage path to file containing training dataset for tuning. The dataset must be formatted as a JSONL file. */\n  trainingDataset: TuningDataset;\n  /** Configuration for the tuning job. */\n  config?: CreateTuningJobConfig;\n}\n\n/** A long-running operation. */\nexport declare interface TuningOperation {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */\n  name?: string;\n  /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata.  Any method that returns a long-running operation should document the metadata type, if any. */\n  metadata?: Record<string, unknown>;\n  /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */\n  done?: boolean;\n  /** The error result of the operation in case of failure or cancellation. */\n  error?: Record<string, unknown>;\n}\n\n/** Optional configuration for cached content creation. */\nexport declare interface CreateCachedContentConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** The TTL for this resource. The expiration time is computed: now + TTL. It is a duration string, with up to nine fractional digits, terminated by 's'. Example: \"3.5s\". */\n  ttl?: string;\n  /** Timestamp of when this resource is considered expired. Uses RFC 3339 format, Example: 2014-10-02T15:01:23Z. */\n  expireTime?: string;\n  /** The user-generated meaningful display name of the cached content.\n   */\n  displayName?: string;\n  /** The content to cache.\n   */\n  contents?: ContentListUnion;\n  /** Developer set system instruction.\n   */\n  systemInstruction?: ContentUnion;\n  /** A list of `Tools` the model may use to generate the next response.\n   */\n  tools?: Tool[];\n  /** Configuration for the tools to use. This config is shared for all tools.\n   */\n  toolConfig?: ToolConfig;\n  /** The Cloud KMS resource identifier of the customer managed\n      encryption key used to protect a resource.\n      The key needs to be in the same region as where the compute resource is\n      created. See\n      https://cloud.google.com/vertex-ai/docs/general/cmek for more\n      details. If this is set, then all created CachedContent objects\n      will be encrypted with the provided encryption key.\n      Allowed formats: projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}\n       */\n  kmsKeyName?: string;\n}\n\n/** Parameters for caches.create method. */\nexport declare interface CreateCachedContentParameters {\n  /** ID of the model to use. Example: gemini-2.0-flash */\n  model: string;\n  /** Configuration that contains optional parameters.\n   */\n  config?: CreateCachedContentConfig;\n}\n\n/** Metadata on the usage of the cached content. */\nexport declare interface CachedContentUsageMetadata {\n  /** Duration of audio in seconds. This field is not supported in Gemini API. */\n  audioDurationSeconds?: number;\n  /** Number of images. This field is not supported in Gemini API. */\n  imageCount?: number;\n  /** Number of text characters. This field is not supported in Gemini API. */\n  textCount?: number;\n  /** Total number of tokens that the cached content consumes. */\n  totalTokenCount?: number;\n  /** Duration of video in seconds. This field is not supported in Gemini API. */\n  videoDurationSeconds?: number;\n}\n\n/** A resource used in LLM queries for users to explicitly specify what to cache. */\nexport declare interface CachedContent {\n  /** The server-generated resource name of the cached content. */\n  name?: string;\n  /** The user-generated meaningful display name of the cached content. */\n  displayName?: string;\n  /** The name of the publisher model to use for cached content. */\n  model?: string;\n  /** Creation time of the cache entry. */\n  createTime?: string;\n  /** When the cache entry was last updated in UTC time. */\n  updateTime?: string;\n  /** Expiration time of the cached content. */\n  expireTime?: string;\n  /** Metadata on the usage of the cached content. */\n  usageMetadata?: CachedContentUsageMetadata;\n}\n\n/** Optional parameters for caches.get method. */\nexport declare interface GetCachedContentConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Parameters for caches.get method. */\nexport declare interface GetCachedContentParameters {\n  /** The server-generated resource name of the cached content.\n   */\n  name: string;\n  /** Optional parameters for the request.\n   */\n  config?: GetCachedContentConfig;\n}\n\n/** Optional parameters for caches.delete method. */\nexport declare interface DeleteCachedContentConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Parameters for caches.delete method. */\nexport declare interface DeleteCachedContentParameters {\n  /** The server-generated resource name of the cached content.\n   */\n  name: string;\n  /** Optional parameters for the request.\n   */\n  config?: DeleteCachedContentConfig;\n}\n\n/** Empty response for caches.delete method. */\nexport class DeleteCachedContentResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n}\n\n/** Optional parameters for caches.update method. */\nexport declare interface UpdateCachedContentConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** The TTL for this resource. The expiration time is computed: now + TTL. It is a duration string, with up to nine fractional digits, terminated by 's'. Example: \"3.5s\". */\n  ttl?: string;\n  /** Timestamp of when this resource is considered expired. Uses RFC 3339 format, Example: 2014-10-02T15:01:23Z. */\n  expireTime?: string;\n}\n\nexport declare interface UpdateCachedContentParameters {\n  /** The server-generated resource name of the cached content.\n   */\n  name: string;\n  /** Configuration that contains optional parameters.\n   */\n  config?: UpdateCachedContentConfig;\n}\n\n/** Config for caches.list method. */\nexport declare interface ListCachedContentsConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  pageSize?: number;\n  pageToken?: string;\n}\n\n/** Parameters for caches.list method. */\nexport declare interface ListCachedContentsParameters {\n  /** Configuration that contains optional parameters.\n   */\n  config?: ListCachedContentsConfig;\n}\n\nexport class ListCachedContentsResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  nextPageToken?: string;\n  /** List of cached contents.\n   */\n  cachedContents?: CachedContent[];\n}\n\n/** Used to override the default configuration. */\nexport declare interface ListFilesConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  pageSize?: number;\n  pageToken?: string;\n}\n\n/** Generates the parameters for the list method. */\nexport declare interface ListFilesParameters {\n  /** Used to override the default configuration. */\n  config?: ListFilesConfig;\n}\n\n/** Status of a File that uses a common error model. */\nexport declare interface FileStatus {\n  /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */\n  details?: Record<string, unknown>[];\n  /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */\n  message?: string;\n  /** The status code. 0 for OK, 1 for CANCELLED */\n  code?: number;\n}\n\n/** A file uploaded to the API. */\nexport declare interface File {\n  /** The `File` resource name. The ID (name excluding the \"files/\" prefix) can contain up to 40 characters that are lowercase alphanumeric or dashes (-). The ID cannot start or end with a dash. If the name is empty on create, a unique name will be generated. Example: `files/123-456` */\n  name?: string;\n  /** Optional. The human-readable display name for the `File`. The display name must be no more than 512 characters in length, including spaces. Example: 'Welcome Image' */\n  displayName?: string;\n  /** Output only. MIME type of the file. */\n  mimeType?: string;\n  /** Output only. Size of the file in bytes. */\n  sizeBytes?: string;\n  /** Output only. The timestamp of when the `File` was created. */\n  createTime?: string;\n  /** Output only. The timestamp of when the `File` will be deleted. Only set if the `File` is scheduled to expire. */\n  expirationTime?: string;\n  /** Output only. The timestamp of when the `File` was last updated. */\n  updateTime?: string;\n  /** Output only. SHA-256 hash of the uploaded bytes. The hash value is encoded in base64 format. */\n  sha256Hash?: string;\n  /** Output only. The URI of the `File`. */\n  uri?: string;\n  /** Output only. The URI of the `File`, only set for downloadable (generated) files. */\n  downloadUri?: string;\n  /** Output only. Processing state of the File. */\n  state?: FileState;\n  /** Output only. The source of the `File`. */\n  source?: FileSource;\n  /** Output only. Metadata for a video. */\n  videoMetadata?: Record<string, unknown>;\n  /** Output only. Error status if File processing failed. */\n  error?: FileStatus;\n}\n\n/** Response for the list files method. */\nexport class ListFilesResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  /** A token that can be sent as a `page_token` into a subsequent `ListFiles` call. */\n  nextPageToken?: string;\n  /** The list of `File`s. */\n  files?: File[];\n}\n\n/** Used to override the default configuration. */\nexport declare interface CreateFileConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Generates the parameters for the private _create method. */\nexport declare interface CreateFileParameters {\n  /** The file to be uploaded.\n            mime_type: (Required) The MIME type of the file. Must be provided.\n            name: (Optional) The name of the file in the destination (e.g.\n            'files/sample-image').\n            display_name: (Optional) The display name of the file.\n       */\n  file: File;\n  /** Used to override the default configuration. */\n  config?: CreateFileConfig;\n}\n\n/** Response for the create file method. */\nexport class CreateFileResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n}\n\n/** Used to override the default configuration. */\nexport declare interface GetFileConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Generates the parameters for the get method. */\nexport declare interface GetFileParameters {\n  /** The name identifier for the file to retrieve. */\n  name: string;\n  /** Used to override the default configuration. */\n  config?: GetFileConfig;\n}\n\n/** Used to override the default configuration. */\nexport declare interface DeleteFileConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Generates the parameters for the get method. */\nexport declare interface DeleteFileParameters {\n  /** The name identifier for the file to be deleted. */\n  name: string;\n  /** Used to override the default configuration. */\n  config?: DeleteFileConfig;\n}\n\n/** Response for the delete file method. */\nexport class DeleteFileResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n}\n\n/** Config for inlined request. */\nexport declare interface InlinedRequest {\n  /** ID of the model to use. For a list of models, see `Google models\n      <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model?: string;\n  /** Content of the request.\n   */\n  contents?: ContentListUnion;\n  /** The metadata to be associated with the request. */\n  metadata?: Record<string, string>;\n  /** Configuration that contains optional model parameters.\n   */\n  config?: GenerateContentConfig;\n}\n\n/** Config for `src` parameter. */\nexport declare interface BatchJobSource {\n  /** Storage format of the input files. Must be one of:\n      'jsonl', 'bigquery'.\n       */\n  format?: string;\n  /** The Google Cloud Storage URIs to input files.\n   */\n  gcsUri?: string[];\n  /** The BigQuery URI to input table.\n   */\n  bigqueryUri?: string;\n  /** The Gemini Developer API's file resource name of the input data\n      (e.g. \"files/12345\").\n       */\n  fileName?: string;\n  /** The Gemini Developer API's inlined input data to run batch job.\n   */\n  inlinedRequests?: InlinedRequest[];\n}\n\n/** Job error. */\nexport declare interface JobError {\n  /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */\n  details?: string[];\n  /** The status code. */\n  code?: number;\n  /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the `details` field. */\n  message?: string;\n}\n\n/** Config for `inlined_responses` parameter. */\nexport class InlinedResponse {\n  /** The response to the request.\n   */\n  response?: GenerateContentResponse;\n  /** The error encountered while processing the request.\n   */\n  error?: JobError;\n}\n\n/** Config for `response` parameter. */\nexport class SingleEmbedContentResponse {\n  /** The response to the request.\n   */\n  embedding?: ContentEmbedding;\n  /** The error encountered while processing the request.\n   */\n  tokenCount?: string;\n}\n\n/** Config for `inlined_embedding_responses` parameter. */\nexport class InlinedEmbedContentResponse {\n  /** The response to the request.\n   */\n  response?: SingleEmbedContentResponse;\n  /** The error encountered while processing the request.\n   */\n  error?: JobError;\n}\n\n/** Config for `des` parameter. */\nexport declare interface BatchJobDestination {\n  /** Storage format of the output files. Must be one of:\n      'jsonl', 'bigquery'.\n       */\n  format?: string;\n  /** The Google Cloud Storage URI to the output file.\n   */\n  gcsUri?: string;\n  /** The BigQuery URI to the output table.\n   */\n  bigqueryUri?: string;\n  /** The Gemini Developer API's file resource name of the output data\n      (e.g. \"files/12345\"). The file will be a JSONL file with a single response\n      per line. The responses will be GenerateContentResponse messages formatted\n      as JSON. The responses will be written in the same order as the input\n      requests.\n       */\n  fileName?: string;\n  /** The responses to the requests in the batch. Returned when the batch was\n      built using inlined requests. The responses will be in the same order as\n      the input requests.\n       */\n  inlinedResponses?: InlinedResponse[];\n  /** The responses to the requests in the batch. Returned when the batch was\n      built using inlined requests. The responses will be in the same order as\n      the input requests.\n       */\n  inlinedEmbedContentResponses?: InlinedEmbedContentResponse[];\n}\n\n/** Config for optional parameters. */\nexport declare interface CreateBatchJobConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** The user-defined name of this BatchJob.\n   */\n  displayName?: string;\n  /** GCS or BigQuery URI prefix for the output predictions. Example:\n      \"gs://path/to/output/data\" or \"bq://projectId.bqDatasetId.bqTableId\".\n       */\n  dest?: BatchJobDestinationUnion;\n}\n\n/** Config for batches.create parameters. */\nexport declare interface CreateBatchJobParameters {\n  /** The name of the model to produces the predictions via the BatchJob.\n   */\n  model?: string;\n  /** GCS URI(-s) or BigQuery URI to your input data to run batch job.\n      Example: \"gs://path/to/input/data\" or \"bq://projectId.bqDatasetId.bqTableId\".\n       */\n  src: BatchJobSourceUnion;\n  /** Optional parameters for creating a BatchJob.\n   */\n  config?: CreateBatchJobConfig;\n}\n\n/** Config for batches.create return value. */\nexport declare interface BatchJob {\n  /** The resource name of the BatchJob. Output only.\".\n   */\n  name?: string;\n  /** The display name of the BatchJob.\n   */\n  displayName?: string;\n  /** The state of the BatchJob.\n   */\n  state?: JobState;\n  /** Output only. Only populated when the job's state is JOB_STATE_FAILED or JOB_STATE_CANCELLED. */\n  error?: JobError;\n  /** The time when the BatchJob was created.\n   */\n  createTime?: string;\n  /** Output only. Time when the Job for the first time entered the `JOB_STATE_RUNNING` state. */\n  startTime?: string;\n  /** The time when the BatchJob was completed.\n   */\n  endTime?: string;\n  /** The time when the BatchJob was last updated.\n   */\n  updateTime?: string;\n  /** The name of the model that produces the predictions via the BatchJob.\n   */\n  model?: string;\n  /** Configuration for the input data.\n   */\n  src?: BatchJobSource;\n  /** Configuration for the output data.\n   */\n  dest?: BatchJobDestination;\n}\n\n/** Parameters for the embed_content method. */\nexport declare interface EmbedContentBatch {\n  /** The content to embed. Only the `parts.text` fields will be counted.\n   */\n  contents?: ContentListUnion;\n  /** Configuration that contains optional parameters.\n   */\n  config?: EmbedContentConfig;\n}\n\nexport declare interface EmbeddingsBatchJobSource {\n  /** The Gemini Developer API's file resource name of the input data\n      (e.g. \"files/12345\").\n       */\n  fileName?: string;\n  /** The Gemini Developer API's inlined input data to run batch job.\n   */\n  inlinedRequests?: EmbedContentBatch;\n}\n\n/** Config for optional parameters. */\nexport declare interface CreateEmbeddingsBatchJobConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** The user-defined name of this BatchJob.\n   */\n  displayName?: string;\n}\n\n/** Config for batches.create parameters. */\nexport declare interface CreateEmbeddingsBatchJobParameters {\n  /** The name of the model to produces the predictions via the BatchJob.\n   */\n  model?: string;\n  /** input data to run batch job\".\n   */\n  src: EmbeddingsBatchJobSource;\n  /** Optional parameters for creating a BatchJob.\n   */\n  config?: CreateEmbeddingsBatchJobConfig;\n}\n\n/** Optional parameters. */\nexport declare interface GetBatchJobConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Config for batches.get parameters. */\nexport declare interface GetBatchJobParameters {\n  /** A fully-qualified BatchJob resource name or ID.\n    Example: \"projects/.../locations/.../batchPredictionJobs/456\"\n    or \"456\" when project and location are initialized in the client.\n     */\n  name: string;\n  /** Optional parameters for the request. */\n  config?: GetBatchJobConfig;\n}\n\n/** Optional parameters. */\nexport declare interface CancelBatchJobConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Config for batches.cancel parameters. */\nexport declare interface CancelBatchJobParameters {\n  /** A fully-qualified BatchJob resource name or ID.\n    Example: \"projects/.../locations/.../batchPredictionJobs/456\"\n    or \"456\" when project and location are initialized in the client.\n     */\n  name: string;\n  /** Optional parameters for the request. */\n  config?: CancelBatchJobConfig;\n}\n\n/** Config for optional parameters. */\nexport declare interface ListBatchJobsConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  pageSize?: number;\n  pageToken?: string;\n  filter?: string;\n}\n\n/** Config for batches.list parameters. */\nexport declare interface ListBatchJobsParameters {\n  config?: ListBatchJobsConfig;\n}\n\n/** Config for batches.list return value. */\nexport class ListBatchJobsResponse {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  nextPageToken?: string;\n  batchJobs?: BatchJob[];\n}\n\n/** Optional parameters for models.get method. */\nexport declare interface DeleteBatchJobConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Config for batches.delete parameters. */\nexport declare interface DeleteBatchJobParameters {\n  /** A fully-qualified BatchJob resource name or ID.\n    Example: \"projects/.../locations/.../batchPredictionJobs/456\"\n    or \"456\" when project and location are initialized in the client.\n     */\n  name: string;\n  /** Optional parameters for the request. */\n  config?: DeleteBatchJobConfig;\n}\n\n/** The return value of delete operation. */\nexport declare interface DeleteResourceJob {\n  /** Used to retain the full HTTP response. */\n  sdkHttpResponse?: HttpResponse;\n  name?: string;\n  done?: boolean;\n  error?: JobError;\n}\n\nexport declare interface GetOperationConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Parameters for the GET method. */\nexport declare interface GetOperationParameters {\n  /** The server-assigned name for the operation. */\n  operationName: string;\n  /** Used to override the default configuration. */\n  config?: GetOperationConfig;\n}\n\nexport declare interface FetchPredictOperationConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Parameters for the fetchPredictOperation method. */\nexport declare interface FetchPredictOperationParameters {\n  /** The server-assigned name for the operation. */\n  operationName: string;\n  resourceName: string;\n  /** Used to override the default configuration. */\n  config?: FetchPredictOperationConfig;\n}\n\nexport declare interface TestTableItem {\n  /** The name of the test. This is used to derive the replay id. */\n  name?: string;\n  /** The parameters to the test. Use pydantic models. */\n  parameters?: Record<string, unknown>;\n  /** Expects an exception for MLDev matching the string. */\n  exceptionIfMldev?: string;\n  /** Expects an exception for Vertex matching the string. */\n  exceptionIfVertex?: string;\n  /** Use if you don't want to use the default replay id which is derived from the test name. */\n  overrideReplayId?: string;\n  /** True if the parameters contain an unsupported union type. This test  will be skipped for languages that do not support the union type. */\n  hasUnion?: boolean;\n  /** When set to a reason string, this test will be skipped in the API mode. Use this flag for tests that can not be reproduced with the real API. E.g. a test that deletes a resource. */\n  skipInApiMode?: string;\n  /** Keys to ignore when comparing the request and response. This is useful for tests that are not deterministic. */\n  ignoreKeys?: string[];\n}\n\nexport declare interface TestTableFile {\n  comment?: string;\n  testMethod?: string;\n  parameterNames?: string[];\n  testTable?: TestTableItem[];\n}\n\n/** Represents a single request in a replay. */\nexport declare interface ReplayRequest {\n  method?: string;\n  url?: string;\n  headers?: Record<string, string>;\n  bodySegments?: Record<string, unknown>[];\n}\n\n/** Represents a single response in a replay. */\nexport class ReplayResponse {\n  statusCode?: number;\n  headers?: Record<string, string>;\n  bodySegments?: Record<string, unknown>[];\n  sdkResponseSegments?: Record<string, unknown>[];\n}\n\n/** Represents a single interaction, request and response in a replay. */\nexport declare interface ReplayInteraction {\n  request?: ReplayRequest;\n  response?: ReplayResponse;\n}\n\n/** Represents a recorded session. */\nexport declare interface ReplayFile {\n  replayId?: string;\n  interactions?: ReplayInteraction[];\n}\n\n/** Used to override the default configuration. */\nexport declare interface UploadFileConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** The name of the file in the destination (e.g., 'files/sample-image'. If not provided one will be generated. */\n  name?: string;\n  /** mime_type: The MIME type of the file. If not provided, it will be inferred from the file extension. */\n  mimeType?: string;\n  /** Optional display name of the file. */\n  displayName?: string;\n}\n\n/** Used to override the default configuration. */\nexport declare interface DownloadFileConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n}\n\n/** Parameters used to download a file. */\nexport declare interface DownloadFileParameters {\n  /** The file to download. It can be a file name, a file object or a generated video. */\n  file: DownloadableFileUnion;\n  /** Location where the file should be downloaded to. */\n  downloadPath: string;\n  /** Configuration to for the download operation. */\n  config?: DownloadFileConfig;\n}\n\n/** Configuration for upscaling an image.\n\nFor more information on this configuration, refer to\nthe `Imagen API reference documentation\n<https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api>`_. */\nexport declare interface UpscaleImageConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** Cloud Storage URI used to store the generated images. */\n  outputGcsUri?: string;\n  /** Whether to include a reason for filtered-out images in the\n      response. */\n  includeRaiReason?: boolean;\n  /** The image format that the output should be saved as. */\n  outputMimeType?: string;\n  /** The level of compression. Only applicable if the\n      ``output_mime_type`` is ``image/jpeg``. */\n  outputCompressionQuality?: number;\n  /** Whether to add an image enhancing step before upscaling.\n      It is expected to suppress the noise and JPEG compression artifacts\n      from the input image. */\n  enhanceInputImage?: boolean;\n  /** With a higher image preservation factor, the original image\n      pixels are more respected. With a lower image preservation factor, the\n      output image will have be more different from the input image, but\n      with finer details and less noise. */\n  imagePreservationFactor?: number;\n  /** User specified labels to track billing usage. */\n  labels?: Record<string, string>;\n}\n\n/** User-facing config UpscaleImageParameters. */\nexport declare interface UpscaleImageParameters {\n  /** The model to use. */\n  model: string;\n  /** The input image to upscale. */\n  image: Image;\n  /** The factor to upscale the image (x2 or x4). */\n  upscaleFactor: string;\n  /** Configuration for upscaling. */\n  config?: UpscaleImageConfig;\n}\n\n/** A raw reference image.\n\nA raw reference image represents the base image to edit, provided by the user.\nIt can optionally be provided in addition to a mask reference image or\na style reference image. */\nexport class RawReferenceImage {\n  /** The reference image for the editing operation. */\n  referenceImage?: Image;\n  /** The id of the reference image. */\n  referenceId?: number;\n  /** The type of the reference image. Only set by the SDK. */\n  referenceType?: string;\n  /** Internal method to convert to ReferenceImageAPIInternal. */\n  toReferenceImageAPI(): ReferenceImageAPIInternal {\n    const referenceImageAPI = {\n      referenceType: 'REFERENCE_TYPE_RAW',\n      referenceImage: this.referenceImage,\n      referenceId: this.referenceId,\n    };\n    return referenceImageAPI;\n  }\n}\n\n/** A mask reference image.\n\nThis encapsulates either a mask image provided by the user and configs for\nthe user provided mask, or only config parameters for the model to generate\na mask.\n\nA mask image is an image whose non-zero values indicate where to edit the base\nimage. If the user provides a mask image, the mask must be in the same\ndimensions as the raw image. */\nexport class MaskReferenceImage {\n  /** The reference image for the editing operation. */\n  referenceImage?: Image;\n  /** The id of the reference image. */\n  referenceId?: number;\n  /** The type of the reference image. Only set by the SDK. */\n  referenceType?: string;\n  /** Configuration for the mask reference image. */\n  config?: MaskReferenceConfig;\n  /** Internal method to convert to ReferenceImageAPIInternal. */\n  toReferenceImageAPI(): ReferenceImageAPIInternal {\n    const referenceImageAPI = {\n      referenceType: 'REFERENCE_TYPE_MASK',\n      referenceImage: this.referenceImage,\n      referenceId: this.referenceId,\n      maskImageConfig: this.config,\n    };\n    return referenceImageAPI;\n  }\n}\n\n/** A control reference image.\n\nThe image of the control reference image is either a control image provided\nby the user, or a regular image which the backend will use to generate a\ncontrol image of. In the case of the latter, the\nenable_control_image_computation field in the config should be set to True.\n\nA control image is an image that represents a sketch image of areas for the\nmodel to fill in based on the prompt. */\nexport class ControlReferenceImage {\n  /** The reference image for the editing operation. */\n  referenceImage?: Image;\n  /** The id of the reference image. */\n  referenceId?: number;\n  /** The type of the reference image. Only set by the SDK. */\n  referenceType?: string;\n  /** Configuration for the control reference image. */\n  config?: ControlReferenceConfig;\n  /** Internal method to convert to ReferenceImageAPIInternal. */\n  toReferenceImageAPI(): ReferenceImageAPIInternal {\n    const referenceImageAPI = {\n      referenceType: 'REFERENCE_TYPE_CONTROL',\n      referenceImage: this.referenceImage,\n      referenceId: this.referenceId,\n      controlImageConfig: this.config,\n    };\n    return referenceImageAPI;\n  }\n}\n\n/** A style reference image.\n\nThis encapsulates a style reference image provided by the user, and\nadditionally optional config parameters for the style reference image.\n\nA raw reference image can also be provided as a destination for the style to\nbe applied to. */\nexport class StyleReferenceImage {\n  /** The reference image for the editing operation. */\n  referenceImage?: Image;\n  /** The id of the reference image. */\n  referenceId?: number;\n  /** The type of the reference image. Only set by the SDK. */\n  referenceType?: string;\n  /** Configuration for the style reference image. */\n  config?: StyleReferenceConfig;\n  /** Internal method to convert to ReferenceImageAPIInternal. */\n  toReferenceImageAPI(): ReferenceImageAPIInternal {\n    const referenceImageAPI = {\n      referenceType: 'REFERENCE_TYPE_STYLE',\n      referenceImage: this.referenceImage,\n      referenceId: this.referenceId,\n      styleImageConfig: this.config,\n    };\n    return referenceImageAPI;\n  }\n}\n\n/** A subject reference image.\n\nThis encapsulates a subject reference image provided by the user, and\nadditionally optional config parameters for the subject reference image.\n\nA raw reference image can also be provided as a destination for the subject to\nbe applied to. */\nexport class SubjectReferenceImage {\n  /** The reference image for the editing operation. */\n  referenceImage?: Image;\n  /** The id of the reference image. */\n  referenceId?: number;\n  /** The type of the reference image. Only set by the SDK. */\n  referenceType?: string;\n  /** Configuration for the subject reference image. */\n  config?: SubjectReferenceConfig;\n  /* Internal method to convert to ReferenceImageAPIInternal. */\n  toReferenceImageAPI(): ReferenceImageAPIInternal {\n    const referenceImageAPI = {\n      referenceType: 'REFERENCE_TYPE_SUBJECT',\n      referenceImage: this.referenceImage,\n      referenceId: this.referenceId,\n      subjectImageConfig: this.config,\n    };\n    return referenceImageAPI;\n  }\n}\n\n/** A content reference image.\n\nA content reference image represents a subject to reference (ex. person,\nproduct, animal) provided by the user. It can optionally be provided in\naddition to a style reference image (ex. background, style reference). */\nexport class ContentReferenceImage {\n  /** The reference image for the editing operation. */\n  referenceImage?: Image;\n  /** The id of the reference image. */\n  referenceId?: number;\n  /** The type of the reference image. Only set by the SDK. */\n  referenceType?: string;\n  /** Internal method to convert to ReferenceImageAPIInternal. */\n  toReferenceImageAPI(): ReferenceImageAPIInternal {\n    const referenceImageAPI = {\n      referenceType: 'REFERENCE_TYPE_CONTENT',\n      referenceImage: this.referenceImage,\n      referenceId: this.referenceId,\n    };\n    return referenceImageAPI;\n  }\n}\n\n/** Sent in response to a `LiveGenerateContentSetup` message from the client. */\nexport declare interface LiveServerSetupComplete {\n  /** The session id of the live session. */\n  sessionId?: string;\n}\n\n/** Audio transcription in Server Conent. */\nexport declare interface Transcription {\n  /** Transcription text.\n   */\n  text?: string;\n  /** The bool indicates the end of the transcription.\n   */\n  finished?: boolean;\n}\n\n/** Incremental server update generated by the model in response to client messages.\n\nContent is generated as quickly as possible, and not in real time. Clients\nmay choose to buffer and play it out in real time. */\nexport declare interface LiveServerContent {\n  /** The content that the model has generated as part of the current conversation with the user. */\n  modelTurn?: Content;\n  /** If true, indicates that the model is done generating. Generation will only start in response to additional client messages. Can be set alongside `content`, indicating that the `content` is the last in the turn. */\n  turnComplete?: boolean;\n  /** If true, indicates that a client message has interrupted current model generation. If the client is playing out the content in realtime, this is a good signal to stop and empty the current queue. */\n  interrupted?: boolean;\n  /** Metadata returned to client when grounding is enabled. */\n  groundingMetadata?: GroundingMetadata;\n  /** If true, indicates that the model is done generating. When model is\n      interrupted while generating there will be no generation_complete message\n      in interrupted turn, it will go through interrupted > turn_complete.\n      When model assumes realtime playback there will be delay between\n      generation_complete and turn_complete that is caused by model\n      waiting for playback to finish. If true, indicates that the model\n      has finished generating all content. This is a signal to the client\n      that it can stop sending messages. */\n  generationComplete?: boolean;\n  /** Input transcription. The transcription is independent to the model\n      turn which means it doesn’t imply any ordering between transcription and\n      model turn. */\n  inputTranscription?: Transcription;\n  /** Output transcription. The transcription is independent to the model\n      turn which means it doesn’t imply any ordering between transcription and\n      model turn.\n       */\n  outputTranscription?: Transcription;\n  /** Metadata related to url context retrieval tool. */\n  urlContextMetadata?: UrlContextMetadata;\n  /** Reason for the turn is complete. */\n  turnCompleteReason?: TurnCompleteReason;\n  /** If true, indicates that the model is not generating content because\n      it is waiting for more input from the user, e.g. because it expects the\n      user to continue talking. */\n  waitingForInput?: boolean;\n}\n\n/** Request for the client to execute the `function_calls` and return the responses with the matching `id`s. */\nexport declare interface LiveServerToolCall {\n  /** The function call to be executed. */\n  functionCalls?: FunctionCall[];\n}\n\n/** Notification for the client that a previously issued `ToolCallMessage` with the specified `id`s should have been not executed and should be cancelled.\n\nIf there were side-effects to those tool calls, clients may attempt to undo\nthe tool calls. This message occurs only in cases where the clients interrupt\nserver turns. */\nexport declare interface LiveServerToolCallCancellation {\n  /** The ids of the tool calls to be cancelled. */\n  ids?: string[];\n}\n\n/** Usage metadata about response(s). */\nexport declare interface UsageMetadata {\n  /** Number of tokens in the prompt. When `cached_content` is set, this is still the total effective prompt size meaning this includes the number of tokens in the cached content. */\n  promptTokenCount?: number;\n  /** Number of tokens in the cached part of the prompt (the cached content). */\n  cachedContentTokenCount?: number;\n  /** Total number of tokens across all the generated response candidates. */\n  responseTokenCount?: number;\n  /** Number of tokens present in tool-use prompt(s). */\n  toolUsePromptTokenCount?: number;\n  /** Number of tokens of thoughts for thinking models. */\n  thoughtsTokenCount?: number;\n  /** Total token count for prompt, response candidates, and tool-use prompts(if present). */\n  totalTokenCount?: number;\n  /** List of modalities that were processed in the request input. */\n  promptTokensDetails?: ModalityTokenCount[];\n  /** List of modalities that were processed in the cache input. */\n  cacheTokensDetails?: ModalityTokenCount[];\n  /** List of modalities that were returned in the response. */\n  responseTokensDetails?: ModalityTokenCount[];\n  /** List of modalities that were processed in the tool-use prompt. */\n  toolUsePromptTokensDetails?: ModalityTokenCount[];\n  /** Traffic type. This shows whether a request consumes Pay-As-You-Go\n or Provisioned Throughput quota. */\n  trafficType?: TrafficType;\n}\n\n/** Server will not be able to service client soon. */\nexport declare interface LiveServerGoAway {\n  /** The remaining time before the connection will be terminated as ABORTED. The minimal time returned here is specified differently together with the rate limits for a given model. */\n  timeLeft?: string;\n}\n\n/** Update of the session resumption state.\n\nOnly sent if `session_resumption` was set in the connection config. */\nexport declare interface LiveServerSessionResumptionUpdate {\n  /** New handle that represents state that can be resumed. Empty if `resumable`=false. */\n  newHandle?: string;\n  /** True if session can be resumed at this point. It might be not possible to resume session at some points. In that case we send update empty new_handle and resumable=false. Example of such case could be model executing function calls or just generating. Resuming session (using previous session token) in such state will result in some data loss. */\n  resumable?: boolean;\n  /** Index of last message sent by client that is included in state represented by this SessionResumptionToken. Only sent when `SessionResumptionConfig.transparent` is set.\n\nPresence of this index allows users to transparently reconnect and avoid issue of losing some part of realtime audio input/video. If client wishes to temporarily disconnect (for example as result of receiving GoAway) they can do it without losing state by buffering messages sent since last `SessionResmumptionTokenUpdate`. This field will enable them to limit buffering (avoid keeping all requests in RAM).\n\nNote: This should not be used for when resuming a session at some time later -- in those cases partial audio and video frames arelikely not needed. */\n  lastConsumedClientMessageIndex?: string;\n}\n\n/** Response message for API call. */\nexport class LiveServerMessage {\n  /** Sent in response to a `LiveClientSetup` message from the client. */\n  setupComplete?: LiveServerSetupComplete;\n  /** Content generated by the model in response to client messages. */\n  serverContent?: LiveServerContent;\n  /** Request for the client to execute the `function_calls` and return the responses with the matching `id`s. */\n  toolCall?: LiveServerToolCall;\n  /** Notification for the client that a previously issued `ToolCallMessage` with the specified `id`s should have been not executed and should be cancelled. */\n  toolCallCancellation?: LiveServerToolCallCancellation;\n  /** Usage metadata about model response(s). */\n  usageMetadata?: UsageMetadata;\n  /** Server will disconnect soon. */\n  goAway?: LiveServerGoAway;\n  /** Update of the session resumption state. */\n  sessionResumptionUpdate?: LiveServerSessionResumptionUpdate;\n  /**\n   * Returns the concatenation of all text parts from the server content if present.\n   *\n   * @remarks\n   * If there are non-text parts in the response, the concatenation of all text\n   * parts will be returned, and a warning will be logged.\n   */\n  get text(): string | undefined {\n    let text = '';\n    let anyTextPartFound = false;\n    const nonTextParts = [];\n    for (const part of this.serverContent?.modelTurn?.parts ?? []) {\n      for (const [fieldName, fieldValue] of Object.entries(part)) {\n        if (\n          fieldName !== 'text' &&\n          fieldName !== 'thought' &&\n          fieldValue !== null\n        ) {\n          nonTextParts.push(fieldName);\n        }\n      }\n      if (typeof part.text === 'string') {\n        if (typeof part.thought === 'boolean' && part.thought) {\n          continue;\n        }\n        anyTextPartFound = true;\n        text += part.text;\n      }\n    }\n    if (nonTextParts.length > 0) {\n      console.warn(\n        `there are non-text parts ${nonTextParts} in the response, returning concatenation of all text parts. Please refer to the non text parts for a full response from model.`,\n      );\n    }\n    // part.text === '' is different from part.text is null\n    return anyTextPartFound ? text : undefined;\n  }\n\n  /**\n   * Returns the concatenation of all inline data parts from the server content if present.\n   *\n   * @remarks\n   * If there are non-inline data parts in the\n   * response, the concatenation of all inline data parts will be returned, and\n   * a warning will be logged.\n   */\n  get data(): string | undefined {\n    let data = '';\n    const nonDataParts = [];\n    for (const part of this.serverContent?.modelTurn?.parts ?? []) {\n      for (const [fieldName, fieldValue] of Object.entries(part)) {\n        if (fieldName !== 'inlineData' && fieldValue !== null) {\n          nonDataParts.push(fieldName);\n        }\n      }\n      if (part.inlineData && typeof part.inlineData.data === 'string') {\n        data += atob(part.inlineData.data);\n      }\n    }\n    if (nonDataParts.length > 0) {\n      console.warn(\n        `there are non-data parts ${nonDataParts} in the response, returning concatenation of all data parts. Please refer to the non data parts for a full response from model.`,\n      );\n    }\n    return data.length > 0 ? btoa(data) : undefined;\n  }\n}\n\n/** Parameters of the fromAPIResponse method of the Operation class. */\nexport declare interface OperationFromAPIResponseParameters {\n  /** The API response to be converted to an Operation. */\n  apiResponse: Record<string, unknown>;\n  /** Whether the API response is from Vertex AI. */\n  isVertexAI: boolean;\n}\n\n/**\n * Config for thinking feature.\n *\n * @deprecated This interface will be deprecated. Please use `ThinkingConfig` instead.\n */\nexport declare interface GenerationConfigThinkingConfig\n  extends ThinkingConfig {}\n\n/** Configures automatic detection of activity. */\nexport declare interface AutomaticActivityDetection {\n  /** If enabled, detected voice and text input count as activity. If disabled, the client must send activity signals. */\n  disabled?: boolean;\n  /** Determines how likely speech is to be detected. */\n  startOfSpeechSensitivity?: StartSensitivity;\n  /** Determines how likely detected speech is ended. */\n  endOfSpeechSensitivity?: EndSensitivity;\n  /** The required duration of detected speech before start-of-speech is committed. The lower this value the more sensitive the start-of-speech detection is and the shorter speech can be recognized. However, this also increases the probability of false positives. */\n  prefixPaddingMs?: number;\n  /** The required duration of detected non-speech (e.g. silence) before end-of-speech is committed. The larger this value, the longer speech gaps can be without interrupting the user's activity but this will increase the model's latency. */\n  silenceDurationMs?: number;\n}\n\n/** Marks the end of user activity.\n\nThis can only be sent if automatic (i.e. server-side) activity detection is\ndisabled. */\nexport declare interface RealtimeInputConfig {\n  /** If not set, automatic activity detection is enabled by default. If automatic voice detection is disabled, the client must send activity signals. */\n  automaticActivityDetection?: AutomaticActivityDetection;\n  /** Defines what effect activity has. */\n  activityHandling?: ActivityHandling;\n  /** Defines which input is included in the user's turn. */\n  turnCoverage?: TurnCoverage;\n}\n\n/** Configuration of session resumption mechanism.\n\nIncluded in `LiveConnectConfig.session_resumption`. If included server\nwill send `LiveServerSessionResumptionUpdate` messages. */\nexport declare interface SessionResumptionConfig {\n  /** Session resumption handle of previous session (session to restore).\n\nIf not present new session will be started. */\n  handle?: string;\n  /** If set the server will send `last_consumed_client_message_index` in the `session_resumption_update` messages to allow for transparent reconnections. */\n  transparent?: boolean;\n}\n\n/** Context window will be truncated by keeping only suffix of it.\n\nContext window will always be cut at start of USER role turn. System\ninstructions and `BidiGenerateContentSetup.prefix_turns` will not be\nsubject to the sliding window mechanism, they will always stay at the\nbeginning of context window. */\nexport declare interface SlidingWindow {\n  /** Session reduction target -- how many tokens we should keep. Window shortening operation has some latency costs, so we should avoid running it on every turn. Should be < trigger_tokens. If not set, trigger_tokens/2 is assumed. */\n  targetTokens?: string;\n}\n\n/** Enables context window compression -- mechanism managing model context window so it does not exceed given length. */\nexport declare interface ContextWindowCompressionConfig {\n  /** Number of tokens (before running turn) that triggers context window compression mechanism. */\n  triggerTokens?: string;\n  /** Sliding window compression mechanism. */\n  slidingWindow?: SlidingWindow;\n}\n\n/** The audio transcription configuration in Setup. */\nexport declare interface AudioTranscriptionConfig {}\n\n/** Config for proactivity features. */\nexport declare interface ProactivityConfig {\n  /** If enabled, the model can reject responding to the last prompt. For\n        example, this allows the model to ignore out of context speech or to stay\n        silent if the user did not make a request, yet. */\n  proactiveAudio?: boolean;\n}\n\n/** Message contains configuration that will apply for the duration of the streaming session. */\nexport declare interface LiveClientSetup {\n  /** \n      The fully qualified name of the publisher model or tuned model endpoint to\n      use.\n       */\n  model?: string;\n  /** The generation configuration for the session.\n      Note: only a subset of fields are supported.\n       */\n  generationConfig?: GenerationConfig;\n  /** The user provided system instructions for the model.\n      Note: only text should be used in parts and content in each part will be\n      in a separate paragraph. */\n  systemInstruction?: ContentUnion;\n  /**  A list of `Tools` the model may use to generate the next response.\n\n      A `Tool` is a piece of code that enables the system to interact with\n      external systems to perform an action, or set of actions, outside of\n      knowledge and scope of the model. */\n  tools?: ToolListUnion;\n  /** Configures the realtime input behavior in BidiGenerateContent. */\n  realtimeInputConfig?: RealtimeInputConfig;\n  /** Configures session resumption mechanism.\n\n          If included server will send SessionResumptionUpdate messages. */\n  sessionResumption?: SessionResumptionConfig;\n  /** Configures context window compression mechanism.\n\n      If included, server will compress context window to fit into given length. */\n  contextWindowCompression?: ContextWindowCompressionConfig;\n  /** The transcription of the input aligns with the input audio language.\n   */\n  inputAudioTranscription?: AudioTranscriptionConfig;\n  /** The transcription of the output aligns with the language code\n      specified for the output audio.\n       */\n  outputAudioTranscription?: AudioTranscriptionConfig;\n  /** Configures the proactivity of the model. This allows the model to respond proactively to\n    the input and to ignore irrelevant input. */\n  proactivity?: ProactivityConfig;\n}\n\n/** Incremental update of the current conversation delivered from the client.\n\nAll the content here will unconditionally be appended to the conversation\nhistory and used as part of the prompt to the model to generate content.\n\nA message here will interrupt any current model generation. */\nexport declare interface LiveClientContent {\n  /** The content appended to the current conversation with the model.\n\n      For single-turn queries, this is a single instance. For multi-turn\n      queries, this is a repeated field that contains conversation history and\n      latest request.\n       */\n  turns?: Content[];\n  /** If true, indicates that the server content generation should start with\n  the currently accumulated prompt. Otherwise, the server will await\n  additional messages before starting generation. */\n  turnComplete?: boolean;\n}\n\n/** Marks the start of user activity.\n\nThis can only be sent if automatic (i.e. server-side) activity detection is\ndisabled. */\nexport declare interface ActivityStart {}\n\n/** Marks the end of user activity.\n\nThis can only be sent if automatic (i.e. server-side) activity detection is\ndisabled. */\nexport declare interface ActivityEnd {}\n\n/** User input that is sent in real time.\n\nThis is different from `LiveClientContent` in a few ways:\n\n  - Can be sent continuously without interruption to model generation.\n  - If there is a need to mix data interleaved across the\n    `LiveClientContent` and the `LiveClientRealtimeInput`, server attempts to\n    optimize for best response, but there are no guarantees.\n  - End of turn is not explicitly specified, but is rather derived from user\n    activity (for example, end of speech).\n  - Even before the end of turn, the data is processed incrementally\n    to optimize for a fast start of the response from the model.\n  - Is always assumed to be the user's input (cannot be used to populate\n    conversation history). */\nexport declare interface LiveClientRealtimeInput {\n  /** Inlined bytes data for media input. */\n  mediaChunks?: Blob[];\n  /** The realtime audio input stream. */\n  audio?: Blob;\n  /** \nIndicates that the audio stream has ended, e.g. because the microphone was\nturned off.\n\nThis should only be sent when automatic activity detection is enabled\n(which is the default).\n\nThe client can reopen the stream by sending an audio message.\n */\n  audioStreamEnd?: boolean;\n  /** The realtime video input stream. */\n  video?: Blob;\n  /** The realtime text input stream. */\n  text?: string;\n  /** Marks the start of user activity. */\n  activityStart?: ActivityStart;\n  /** Marks the end of user activity. */\n  activityEnd?: ActivityEnd;\n}\n\n/** Client generated response to a `ToolCall` received from the server.\n\nIndividual `FunctionResponse` objects are matched to the respective\n`FunctionCall` objects by the `id` field.\n\nNote that in the unary and server-streaming GenerateContent APIs function\ncalling happens by exchanging the `Content` parts, while in the bidi\nGenerateContent APIs function calling happens over this dedicated set of\nmessages. */\nexport class LiveClientToolResponse {\n  /** The response to the function calls. */\n  functionResponses?: FunctionResponse[];\n}\n\n/** Parameters for sending realtime input to the live API. */\nexport declare interface LiveSendRealtimeInputParameters {\n  /** Realtime input to send to the session. */\n  media?: BlobImageUnion;\n  /** The realtime audio input stream. */\n  audio?: Blob;\n  /** \nIndicates that the audio stream has ended, e.g. because the microphone was\nturned off.\n\nThis should only be sent when automatic activity detection is enabled\n(which is the default).\n\nThe client can reopen the stream by sending an audio message.\n */\n  audioStreamEnd?: boolean;\n  /** The realtime video input stream. */\n  video?: BlobImageUnion;\n  /** The realtime text input stream. */\n  text?: string;\n  /** Marks the start of user activity. */\n  activityStart?: ActivityStart;\n  /** Marks the end of user activity. */\n  activityEnd?: ActivityEnd;\n}\n\n/** Messages sent by the client in the API call. */\nexport declare interface LiveClientMessage {\n  /** Message to be sent by the system when connecting to the API. SDK users should not send this message. */\n  setup?: LiveClientSetup;\n  /** Incremental update of the current conversation delivered from the client. */\n  clientContent?: LiveClientContent;\n  /** User input that is sent in real time. */\n  realtimeInput?: LiveClientRealtimeInput;\n  /** Response to a `ToolCallMessage` received from the server. */\n  toolResponse?: LiveClientToolResponse;\n}\n\n/** Session config for the API connection. */\nexport declare interface LiveConnectConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** The generation configuration for the session. */\n  generationConfig?: GenerationConfig;\n  /** The requested modalities of the response. Represents the set of\n      modalities that the model can return. Defaults to AUDIO if not specified.\n       */\n  responseModalities?: Modality[];\n  /** Value that controls the degree of randomness in token selection.\n      Lower temperatures are good for prompts that require a less open-ended or\n      creative response, while higher temperatures can lead to more diverse or\n      creative results.\n       */\n  temperature?: number;\n  /** Tokens are selected from the most to least probable until the sum\n      of their probabilities equals this value. Use a lower value for less\n      random responses and a higher value for more random responses.\n       */\n  topP?: number;\n  /** For each token selection step, the ``top_k`` tokens with the\n      highest probabilities are sampled. Then tokens are further filtered based\n      on ``top_p`` with the final token selected using temperature sampling. Use\n      a lower number for less random responses and a higher number for more\n      random responses.\n       */\n  topK?: number;\n  /** Maximum number of tokens that can be generated in the response.\n   */\n  maxOutputTokens?: number;\n  /** If specified, the media resolution specified will be used.\n   */\n  mediaResolution?: MediaResolution;\n  /** When ``seed`` is fixed to a specific number, the model makes a best\n      effort to provide the same response for repeated requests. By default, a\n      random number is used.\n       */\n  seed?: number;\n  /** The speech generation configuration.\n   */\n  speechConfig?: SpeechConfig;\n  /** Config for thinking features.\n      An error will be returned if this field is set for models that don't\n      support thinking.\n       */\n  thinkingConfig?: ThinkingConfig;\n  /** If enabled, the model will detect emotions and adapt its responses accordingly. */\n  enableAffectiveDialog?: boolean;\n  /** The user provided system instructions for the model.\n      Note: only text should be used in parts and content in each part will be\n      in a separate paragraph. */\n  systemInstruction?: ContentUnion;\n  /** A list of `Tools` the model may use to generate the next response.\n\n      A `Tool` is a piece of code that enables the system to interact with\n      external systems to perform an action, or set of actions, outside of\n      knowledge and scope of the model. */\n  tools?: ToolListUnion;\n  /** Configures session resumption mechanism.\n\nIf included the server will send SessionResumptionUpdate messages. */\n  sessionResumption?: SessionResumptionConfig;\n  /** The transcription of the input aligns with the input audio language.\n   */\n  inputAudioTranscription?: AudioTranscriptionConfig;\n  /** The transcription of the output aligns with the language code\n      specified for the output audio.\n       */\n  outputAudioTranscription?: AudioTranscriptionConfig;\n  /** Configures the realtime input behavior in BidiGenerateContent. */\n  realtimeInputConfig?: RealtimeInputConfig;\n  /** Configures context window compression mechanism.\n\n      If included, server will compress context window to fit into given length. */\n  contextWindowCompression?: ContextWindowCompressionConfig;\n  /** Configures the proactivity of the model. This allows the model to respond proactively to\n    the input and to ignore irrelevant input. */\n  proactivity?: ProactivityConfig;\n}\n\n/** Parameters for connecting to the live API. */\nexport declare interface LiveConnectParameters {\n  /** ID of the model to use. For a list of models, see `Google models\n    <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`_. */\n  model: string;\n  /** callbacks */\n  callbacks: LiveCallbacks;\n  /** Optional configuration parameters for the request.\n   */\n  config?: LiveConnectConfig;\n}\n\n/** Parameters for initializing a new chat session.\n\nThese parameters are used when creating a chat session with the\n`chats.create()` method. */\nexport declare interface CreateChatParameters {\n  /** The name of the model to use for the chat session.\n\n      For example: 'gemini-2.0-flash', 'gemini-2.0-flash-lite', etc. See Gemini API\n      docs to find the available models.\n       */\n  model: string;\n  /** Config for the entire chat session.\n\n      This config applies to all requests within the session\n      unless overridden by a per-request `config` in `SendMessageParameters`.\n       */\n  config?: GenerateContentConfig;\n  /** The initial conversation history for the chat session.\n\n      This allows you to start the chat with a pre-existing history. The history\n      must be a list of `Content` alternating between 'user' and 'model' roles.\n      It should start with a 'user' message.\n       */\n  history?: Content[];\n}\n\n/** Parameters for sending a message within a chat session.\n\nThese parameters are used with the `chat.sendMessage()` method. */\nexport declare interface SendMessageParameters {\n  /** The message to send to the model.\n\n      The SDK will combine all parts into a single 'user' content to send to\n      the model.\n       */\n  message: PartListUnion;\n  /**  Config for this specific request.\n\n      Please note that the per-request config does not change the chat level\n      config, nor inherit from it. If you intend to use some values from the\n      chat's default config, you must explicitly copy them into this per-request\n      config.\n       */\n  config?: GenerateContentConfig;\n}\n\n/** Parameters for sending client content to the live API. */\nexport declare interface LiveSendClientContentParameters {\n  /** Client content to send to the session. */\n  turns?: ContentListUnion;\n  /** If true, indicates that the server content generation should start with\n  the currently accumulated prompt. Otherwise, the server will await\n  additional messages before starting generation. */\n  turnComplete?: boolean;\n}\n\n/** Parameters for sending tool responses to the live API. */\nexport class LiveSendToolResponseParameters {\n  /** Tool responses to send to the session. */\n  functionResponses: FunctionResponse[] | FunctionResponse = [];\n}\n\n/** Message to be sent by the system when connecting to the API. */\nexport declare interface LiveMusicClientSetup {\n  /** The model's resource name. Format: `models/{model}`. */\n  model?: string;\n}\n\n/** Maps a prompt to a relative weight to steer music generation. */\nexport declare interface WeightedPrompt {\n  /** Text prompt. */\n  text?: string;\n  /** Weight of the prompt. The weight is used to control the relative\n      importance of the prompt. Higher weights are more important than lower\n      weights.\n\n      Weight must not be 0. Weights of all weighted_prompts in this\n      LiveMusicClientContent message will be normalized. */\n  weight?: number;\n}\n\n/** User input to start or steer the music. */\nexport declare interface LiveMusicClientContent {\n  /** Weighted prompts as the model input. */\n  weightedPrompts?: WeightedPrompt[];\n}\n\n/** Configuration for music generation. */\nexport declare interface LiveMusicGenerationConfig {\n  /** Controls the variance in audio generation. Higher values produce\n      higher variance. Range is [0.0, 3.0]. */\n  temperature?: number;\n  /** Controls how the model selects tokens for output. Samples the topK\n      tokens with the highest probabilities. Range is [1, 1000]. */\n  topK?: number;\n  /** Seeds audio generation. If not set, the request uses a randomly\n      generated seed. */\n  seed?: number;\n  /** Controls how closely the model follows prompts.\n      Higher guidance follows more closely, but will make transitions more\n      abrupt. Range is [0.0, 6.0]. */\n  guidance?: number;\n  /** Beats per minute. Range is [60, 200]. */\n  bpm?: number;\n  /** Density of sounds. Range is [0.0, 1.0]. */\n  density?: number;\n  /** Brightness of the music. Range is [0.0, 1.0]. */\n  brightness?: number;\n  /** Scale of the generated music. */\n  scale?: Scale;\n  /** Whether the audio output should contain bass. */\n  muteBass?: boolean;\n  /** Whether the audio output should contain drums. */\n  muteDrums?: boolean;\n  /** Whether the audio output should contain only bass and drums. */\n  onlyBassAndDrums?: boolean;\n  /** The mode of music generation. Default mode is QUALITY. */\n  musicGenerationMode?: MusicGenerationMode;\n}\n\n/** Messages sent by the client in the LiveMusicClientMessage call. */\nexport declare interface LiveMusicClientMessage {\n  /** Message to be sent in the first (and only in the first) `LiveMusicClientMessage`.\n      Clients should wait for a `LiveMusicSetupComplete` message before\n      sending any additional messages. */\n  setup?: LiveMusicClientSetup;\n  /** User input to influence music generation. */\n  clientContent?: LiveMusicClientContent;\n  /** Configuration for music generation. */\n  musicGenerationConfig?: LiveMusicGenerationConfig;\n  /** Playback control signal for the music generation. */\n  playbackControl?: LiveMusicPlaybackControl;\n}\n\n/** Sent in response to a `LiveMusicClientSetup` message from the client. */\nexport declare interface LiveMusicServerSetupComplete {}\n\n/** Prompts and config used for generating this audio chunk. */\nexport declare interface LiveMusicSourceMetadata {\n  /** Weighted prompts for generating this audio chunk. */\n  clientContent?: LiveMusicClientContent;\n  /** Music generation config for generating this audio chunk. */\n  musicGenerationConfig?: LiveMusicGenerationConfig;\n}\n\n/** Representation of an audio chunk. */\nexport declare interface AudioChunk {\n  /** Raw bytes of audio data.\n   * @remarks Encoded as base64 string. */\n  data?: string;\n  /** MIME type of the audio chunk. */\n  mimeType?: string;\n  /** Prompts and config used for generating this audio chunk. */\n  sourceMetadata?: LiveMusicSourceMetadata;\n}\n\n/** Server update generated by the model in response to client messages.\n\nContent is generated as quickly as possible, and not in real time.\nClients may choose to buffer and play it out in real time. */\nexport declare interface LiveMusicServerContent {\n  /** The audio chunks that the model has generated. */\n  audioChunks?: AudioChunk[];\n}\n\n/** A prompt that was filtered with the reason. */\nexport declare interface LiveMusicFilteredPrompt {\n  /** The text prompt that was filtered. */\n  text?: string;\n  /** The reason the prompt was filtered. */\n  filteredReason?: string;\n}\n\n/** Response message for the LiveMusicClientMessage call. */\nexport class LiveMusicServerMessage {\n  /** Message sent in response to a `LiveMusicClientSetup` message from the client.\n      Clients should wait for this message before sending any additional messages. */\n  setupComplete?: LiveMusicServerSetupComplete;\n  /** Content generated by the model in response to client messages. */\n  serverContent?: LiveMusicServerContent;\n  /** A prompt that was filtered with the reason. */\n  filteredPrompt?: LiveMusicFilteredPrompt;\n  /**\n   * Returns the first audio chunk from the server content, if present.\n   *\n   * @remarks\n   * If there are no audio chunks in the response, undefined will be returned.\n   */\n  get audioChunk(): AudioChunk | undefined {\n    if (\n      this.serverContent &&\n      this.serverContent.audioChunks &&\n      this.serverContent.audioChunks.length > 0\n    ) {\n      return this.serverContent.audioChunks[0];\n    }\n    return undefined;\n  }\n}\n\n/** Callbacks for the realtime music API. */\nexport interface LiveMusicCallbacks {\n  /**\n   * Called when a message is received from the server.\n   */\n  onmessage: (e: LiveMusicServerMessage) => void;\n  /**\n   * Called when an error occurs.\n   */\n  onerror?: ((e: ErrorEvent) => void) | null;\n  /**\n   * Called when the websocket connection is closed.\n   */\n  onclose?: ((e: CloseEvent) => void) | null;\n}\n\n/** Parameters for the upload file method. */\nexport interface UploadFileParameters {\n  /** The string path to the file to be uploaded or a Blob object. */\n  file: string | globalThis.Blob;\n  /** Configuration that contains optional parameters. */\n  config?: UploadFileConfig;\n}\n\n/**\n * CallableTool is an invokable tool that can be executed with external\n * application (e.g., via Model Context Protocol) or local functions with\n * function calling.\n */\nexport interface CallableTool {\n  /**\n   * Returns tool that can be called by Gemini.\n   */\n  tool(): Promise<Tool>;\n  /**\n   * Executes the callable tool with the given function call arguments and\n   * returns the response parts from the tool execution.\n   */\n  callTool(functionCalls: FunctionCall[]): Promise<Part[]>;\n}\n\n/**\n * CallableToolConfig is the configuration for a callable tool.\n */\nexport interface CallableToolConfig {\n  /**\n   * Specifies the model's behavior after invoking this tool.\n   */\n  behavior?: Behavior;\n  /**\n   * Timeout for remote calls in milliseconds. Note this timeout applies only to\n   * tool remote calls, and not making HTTP requests to the API. */\n  timeout?: number;\n}\n\n/** Parameters for connecting to the live API. */\nexport declare interface LiveMusicConnectParameters {\n  /** The model's resource name. */\n  model: string;\n  /** Callbacks invoked on server events. */\n  callbacks: LiveMusicCallbacks;\n}\n\n/** Parameters for setting config for the live music API. */\nexport declare interface LiveMusicSetConfigParameters {\n  /** Configuration for music generation. */\n  musicGenerationConfig: LiveMusicGenerationConfig;\n}\n\n/** Parameters for setting weighted prompts for the live music API. */\nexport declare interface LiveMusicSetWeightedPromptsParameters {\n  /** A map of text prompts to weights to use for the generation request. */\n  weightedPrompts: WeightedPrompt[];\n}\n\n/** Config for auth_tokens.create parameters. */\nexport declare interface AuthToken {\n  /** The name of the auth token. */\n  name?: string;\n}\n\n/** Config for LiveConnectConstraints for Auth Token creation. */\nexport declare interface LiveConnectConstraints {\n  /** ID of the model to configure in the ephemeral token for Live API.\n      For a list of models, see `Gemini models\n      <https://ai.google.dev/gemini-api/docs/models>`. */\n  model?: string;\n  /** Configuration specific to Live API connections created using this token. */\n  config?: LiveConnectConfig;\n}\n\n/** Optional parameters. */\nexport declare interface CreateAuthTokenConfig {\n  /** Used to override HTTP request options. */\n  httpOptions?: HttpOptions;\n  /** Abort signal which can be used to cancel the request.\n\n  NOTE: AbortSignal is a client-only operation. Using it to cancel an\n  operation will not cancel the request in the service. You will still\n  be charged usage for any applicable operations.\n       */\n  abortSignal?: AbortSignal;\n  /** An optional time after which, when using the resulting token,\n      messages in Live API sessions will be rejected. (Gemini may\n      preemptively close the session after this time.)\n\n      If not set then this defaults to 30 minutes in the future. If set, this\n      value must be less than 20 hours in the future. */\n  expireTime?: string;\n  /** The time after which new Live API sessions using the token\n      resulting from this request will be rejected.\n\n      If not set this defaults to 60 seconds in the future. If set, this value\n      must be less than 20 hours in the future. */\n  newSessionExpireTime?: string;\n  /** The number of times the token can be used. If this value is zero\n      then no limit is applied. Default is 1. Resuming a Live API session does\n      not count as a use. */\n  uses?: number;\n  /** Configuration specific to Live API connections created using this token. */\n  liveConnectConstraints?: LiveConnectConstraints;\n  /** Additional fields to lock in the effective LiveConnectParameters. */\n  lockAdditionalFields?: string[];\n}\n\n/** Config for auth_tokens.create parameters. */\nexport declare interface CreateAuthTokenParameters {\n  /** Optional parameters for the request. */\n  config?: CreateAuthTokenConfig;\n}\n\n/** Parameters for the get method of the operations module. */\nexport declare interface OperationGetParameters<T, U extends Operation<T>> {\n  /** Used to override the default configuration. */\n  config?: GetOperationConfig;\n  /** The operation to be retrieved. */\n  operation: U;\n}\n\n/** Supervised fine-tuning job creation parameters - optional fields. */\nexport declare interface CreateTuningJobParameters {\n  /** The base model that is being tuned, e.g., \"gemini-2.5-flash\". */\n  baseModel: string;\n  /** Cloud Storage path to file containing training dataset for tuning. The dataset must be formatted as a JSONL file. */\n  trainingDataset: TuningDataset;\n  /** Configuration for the tuning job. */\n  config?: CreateTuningJobConfig;\n}\n\nexport type BlobImageUnion = Blob;\n\nexport type PartUnion = Part | string;\n\nexport type PartListUnion = PartUnion[] | PartUnion;\n\nexport type ContentUnion = Content | PartUnion[] | PartUnion;\n\nexport type ContentListUnion = Content | Content[] | PartUnion | PartUnion[];\n\nexport type SchemaUnion = Schema | unknown;\n\nexport type SpeechConfigUnion = SpeechConfig | string;\n\nexport type ToolUnion = Tool | CallableTool;\n\nexport type ToolListUnion = ToolUnion[];\n\nexport type DownloadableFileUnion = string | File | GeneratedVideo | Video;\n\nexport type BatchJobSourceUnion = BatchJobSource | InlinedRequest[] | string;\n\nexport type BatchJobDestinationUnion = BatchJobDestination | string;\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Tool as McpTool} from '@modelcontextprotocol/sdk/types';\n\nimport {ApiClient} from './_api_client.js';\nimport * as baseTransformers from './_base_transformers.js';\nimport * as types from './types.js';\n\nexport function tModel(apiClient: ApiClient, model: string | unknown): string {\n  if (!model || typeof model !== 'string') {\n    throw new Error('model is required and must be a string');\n  }\n\n  if (apiClient.isVertexAI()) {\n    if (\n      model.startsWith('publishers/') ||\n      model.startsWith('projects/') ||\n      model.startsWith('models/')\n    ) {\n      return model;\n    } else if (model.indexOf('/') >= 0) {\n      const parts = model.split('/', 2);\n      return `publishers/${parts[0]}/models/${parts[1]}`;\n    } else {\n      return `publishers/google/models/${model}`;\n    }\n  } else {\n    if (model.startsWith('models/') || model.startsWith('tunedModels/')) {\n      return model;\n    } else {\n      return `models/${model}`;\n    }\n  }\n}\n\nexport function tCachesModel(\n  apiClient: ApiClient,\n  model: string | unknown,\n): string {\n  const transformedModel = tModel(apiClient, model as string);\n  if (!transformedModel) {\n    return '';\n  }\n\n  if (transformedModel.startsWith('publishers/') && apiClient.isVertexAI()) {\n    // vertex caches only support model name start with projects.\n    return `projects/${apiClient.getProject()}/locations/${apiClient.getLocation()}/${transformedModel}`;\n  } else if (transformedModel.startsWith('models/') && apiClient.isVertexAI()) {\n    return `projects/${apiClient.getProject()}/locations/${apiClient.getLocation()}/publishers/google/${transformedModel}`;\n  } else {\n    return transformedModel;\n  }\n}\n\nexport function tBlobs(\n  blobs: types.BlobImageUnion | types.BlobImageUnion[],\n): types.Blob[] {\n  if (Array.isArray(blobs)) {\n    return blobs.map((blob) => tBlob(blob));\n  } else {\n    return [tBlob(blobs)];\n  }\n}\n\nexport function tBlob(blob: types.BlobImageUnion): types.Blob {\n  if (typeof blob === 'object' && blob !== null) {\n    return blob;\n  }\n\n  throw new Error(\n    `Could not parse input as Blob. Unsupported blob type: ${typeof blob}`,\n  );\n}\n\nexport function tImageBlob(blob: types.BlobImageUnion): types.Blob {\n  const transformedBlob = tBlob(blob);\n  if (\n    transformedBlob.mimeType &&\n    transformedBlob.mimeType.startsWith('image/')\n  ) {\n    return transformedBlob;\n  }\n  throw new Error(`Unsupported mime type: ${transformedBlob.mimeType!}`);\n}\n\nexport function tAudioBlob(blob: types.Blob): types.Blob {\n  const transformedBlob = tBlob(blob);\n  if (\n    transformedBlob.mimeType &&\n    transformedBlob.mimeType.startsWith('audio/')\n  ) {\n    return transformedBlob;\n  }\n  throw new Error(`Unsupported mime type: ${transformedBlob.mimeType!}`);\n}\n\nexport function tPart(origin?: types.PartUnion | null): types.Part {\n  if (origin === null || origin === undefined) {\n    throw new Error('PartUnion is required');\n  }\n  if (typeof origin === 'object') {\n    return origin;\n  }\n  if (typeof origin === 'string') {\n    return {text: origin};\n  }\n  throw new Error(`Unsupported part type: ${typeof origin}`);\n}\n\nexport function tParts(origin?: types.PartListUnion | null): types.Part[] {\n  if (\n    origin === null ||\n    origin === undefined ||\n    (Array.isArray(origin) && origin.length === 0)\n  ) {\n    throw new Error('PartListUnion is required');\n  }\n  if (Array.isArray(origin)) {\n    return origin.map((item) => tPart(item as types.PartUnion)!);\n  }\n  return [tPart(origin)!];\n}\n\nfunction _isContent(origin: unknown): boolean {\n  return (\n    origin !== null &&\n    origin !== undefined &&\n    typeof origin === 'object' &&\n    'parts' in origin &&\n    Array.isArray(origin.parts)\n  );\n}\n\nfunction _isFunctionCallPart(origin: unknown): boolean {\n  return (\n    origin !== null &&\n    origin !== undefined &&\n    typeof origin === 'object' &&\n    'functionCall' in origin\n  );\n}\n\nfunction _isFunctionResponsePart(origin: unknown): boolean {\n  return (\n    origin !== null &&\n    origin !== undefined &&\n    typeof origin === 'object' &&\n    'functionResponse' in origin\n  );\n}\n\nexport function tContent(origin?: types.ContentUnion): types.Content {\n  if (origin === null || origin === undefined) {\n    throw new Error('ContentUnion is required');\n  }\n  if (_isContent(origin)) {\n    // _isContent is a utility function that checks if the\n    // origin is a Content.\n    return origin as types.Content;\n  }\n\n  return {\n    role: 'user',\n    parts: tParts(origin as types.PartListUnion)!,\n  };\n}\n\nexport function tContentsForEmbed(\n  apiClient: ApiClient,\n  origin: types.ContentListUnion,\n): types.ContentUnion[] {\n  if (!origin) {\n    return [];\n  }\n  if (apiClient.isVertexAI() && Array.isArray(origin)) {\n    return origin.flatMap((item) => {\n      const content = tContent(item as types.ContentUnion);\n      if (\n        content.parts &&\n        content.parts.length > 0 &&\n        content.parts[0].text !== undefined\n      ) {\n        return [content.parts[0].text];\n      }\n      return [];\n    });\n  } else if (apiClient.isVertexAI()) {\n    const content = tContent(origin as types.ContentUnion);\n    if (\n      content.parts &&\n      content.parts.length > 0 &&\n      content.parts[0].text !== undefined\n    ) {\n      return [content.parts[0].text];\n    }\n    return [];\n  }\n  if (Array.isArray(origin)) {\n    return origin.map((item) => tContent(item as types.ContentUnion)!);\n  }\n  return [tContent(origin as types.ContentUnion)!];\n}\n\nexport function tContents(origin?: types.ContentListUnion): types.Content[] {\n  if (\n    origin === null ||\n    origin === undefined ||\n    (Array.isArray(origin) && origin.length === 0)\n  ) {\n    throw new Error('contents are required');\n  }\n  if (!Array.isArray(origin)) {\n    // If it's not an array, it's a single content or a single PartUnion.\n    if (_isFunctionCallPart(origin) || _isFunctionResponsePart(origin)) {\n      throw new Error(\n        'To specify functionCall or functionResponse parts, please wrap them in a Content object, specifying the role for them',\n      );\n    }\n    return [tContent(origin as types.ContentUnion)];\n  }\n\n  const result: types.Content[] = [];\n  const accumulatedParts: types.PartUnion[] = [];\n  const isContentArray = _isContent(origin[0]);\n\n  for (const item of origin) {\n    const isContent = _isContent(item);\n\n    if (isContent != isContentArray) {\n      throw new Error(\n        'Mixing Content and Parts is not supported, please group the parts into a the appropriate Content objects and specify the roles for them',\n      );\n    }\n\n    if (isContent) {\n      // `isContent` contains the result of _isContent, which is a utility\n      // function that checks if the item is a Content.\n      result.push(item as types.Content);\n    } else if (_isFunctionCallPart(item) || _isFunctionResponsePart(item)) {\n      throw new Error(\n        'To specify functionCall or functionResponse parts, please wrap them, and any other parts, in Content objects as appropriate, specifying the role for them',\n      );\n    } else {\n      accumulatedParts.push(item as types.PartUnion);\n    }\n  }\n\n  if (!isContentArray) {\n    result.push({role: 'user', parts: tParts(accumulatedParts)});\n  }\n  return result;\n}\n\n/*\nTransform the type field from an array of types to an array of anyOf fields.\nExample:\n  {type: ['STRING', 'NUMBER']}\nwill be transformed to\n  {anyOf: [{type: 'STRING'}, {type: 'NUMBER'}]}\n*/\nfunction flattenTypeArrayToAnyOf(\n  typeList: string[],\n  resultingSchema: types.Schema,\n) {\n  if (typeList.includes('null')) {\n    resultingSchema['nullable'] = true;\n  }\n  const listWithoutNull = typeList.filter((type) => type !== 'null');\n\n  if (listWithoutNull.length === 1) {\n    resultingSchema['type'] = Object.values(types.Type).includes(\n      listWithoutNull[0].toUpperCase() as types.Type,\n    )\n      ? (listWithoutNull[0].toUpperCase() as types.Type)\n      : types.Type.TYPE_UNSPECIFIED;\n  } else {\n    resultingSchema['anyOf'] = [];\n    for (const i of listWithoutNull) {\n      resultingSchema['anyOf'].push({\n        'type': Object.values(types.Type).includes(\n          i.toUpperCase() as types.Type,\n        )\n          ? (i.toUpperCase() as types.Type)\n          : types.Type.TYPE_UNSPECIFIED,\n      });\n    }\n  }\n}\n\nexport function processJsonSchema(\n  _jsonSchema: types.Schema | Record<string, unknown>,\n): types.Schema {\n  const genAISchema: types.Schema = {};\n  const schemaFieldNames = ['items'];\n  const listSchemaFieldNames = ['anyOf'];\n  const dictSchemaFieldNames = ['properties'];\n\n  if (_jsonSchema['type'] && _jsonSchema['anyOf']) {\n    throw new Error('type and anyOf cannot be both populated.');\n  }\n\n  /*\n  This is to handle the nullable array or object. The _jsonSchema will\n  be in the format of {anyOf: [{type: 'null'}, {type: 'object'}]}. The\n  logic is to check if anyOf has 2 elements and one of the element is null,\n  if so, the anyOf field is unnecessary, so we need to get rid of the anyOf\n  field and make the schema nullable. Then use the other element as the new\n  _jsonSchema for processing. This is because the backend doesn't have a null\n  type.\n  This has to be checked before we process any other fields.\n  For example:\n    const objectNullable = z.object({\n      nullableArray: z.array(z.string()).nullable(),\n    });\n  Will have the raw _jsonSchema as:\n  {\n    type: 'OBJECT',\n    properties: {\n        nullableArray: {\n           anyOf: [\n              {type: 'null'},\n              {\n                type: 'array',\n                items: {type: 'string'},\n              },\n            ],\n        }\n    },\n    required: [ 'nullableArray' ],\n  }\n  Will result in following schema compatible with Gemini API:\n    {\n      type: 'OBJECT',\n      properties: {\n         nullableArray: {\n            nullable: true,\n            type: 'ARRAY',\n            items: {type: 'string'},\n         }\n      },\n      required: [ 'nullableArray' ],\n    }\n  */\n  const incomingAnyOf = _jsonSchema['anyOf'] as Record<string, unknown>[];\n  if (incomingAnyOf != null && incomingAnyOf.length == 2) {\n    if (incomingAnyOf[0]!['type'] === 'null') {\n      genAISchema['nullable'] = true;\n      _jsonSchema = incomingAnyOf![1];\n    } else if (incomingAnyOf[1]!['type'] === 'null') {\n      genAISchema['nullable'] = true;\n      _jsonSchema = incomingAnyOf![0];\n    }\n  }\n\n  if (_jsonSchema['type'] instanceof Array) {\n    flattenTypeArrayToAnyOf(_jsonSchema['type'], genAISchema);\n  }\n\n  for (const [fieldName, fieldValue] of Object.entries(_jsonSchema)) {\n    // Skip if the fieldvalue is undefined or null.\n    if (fieldValue == null) {\n      continue;\n    }\n\n    if (fieldName == 'type') {\n      if (fieldValue === 'null') {\n        throw new Error(\n          'type: null can not be the only possible type for the field.',\n        );\n      }\n      if (fieldValue instanceof Array) {\n        // we have already handled the type field with array of types in the\n        // beginning of this function.\n        continue;\n      }\n      genAISchema['type'] = Object.values(types.Type).includes(\n        fieldValue.toUpperCase() as types.Type,\n      )\n        ? fieldValue.toUpperCase()\n        : types.Type.TYPE_UNSPECIFIED;\n    } else if (schemaFieldNames.includes(fieldName)) {\n      (genAISchema as Record<string, unknown>)[fieldName] =\n        processJsonSchema(fieldValue);\n    } else if (listSchemaFieldNames.includes(fieldName)) {\n      const listSchemaFieldValue: Array<types.Schema> = [];\n      for (const item of fieldValue) {\n        if (item['type'] == 'null') {\n          genAISchema['nullable'] = true;\n          continue;\n        }\n        listSchemaFieldValue.push(\n          processJsonSchema(item as Record<string, unknown>),\n        );\n      }\n      (genAISchema as Record<string, unknown>)[fieldName] =\n        listSchemaFieldValue;\n    } else if (dictSchemaFieldNames.includes(fieldName)) {\n      const dictSchemaFieldValue: Record<string, types.Schema> = {};\n      for (const [key, value] of Object.entries(\n        fieldValue as Record<string, unknown>,\n      )) {\n        dictSchemaFieldValue[key] = processJsonSchema(\n          value as Record<string, unknown>,\n        );\n      }\n      (genAISchema as Record<string, unknown>)[fieldName] =\n        dictSchemaFieldValue;\n    } else {\n      // additionalProperties is not included in JSONSchema, skipping it.\n      if (fieldName === 'additionalProperties') {\n        continue;\n      }\n      (genAISchema as Record<string, unknown>)[fieldName] = fieldValue;\n    }\n  }\n  return genAISchema;\n}\n\n// we take the unknown in the schema field because we want enable user to pass\n// the output of major schema declaration tools without casting. Tools such as\n// zodToJsonSchema, typebox, zodToJsonSchema function can return JsonSchema7Type\n// or object, see details in\n// https://github.com/StefanTerdell/zod-to-json-schema/blob/70525efe555cd226691e093d171370a3b10921d1/src/zodToJsonSchema.ts#L7\n// typebox can return unknown, see details in\n// https://github.com/sinclairzx81/typebox/blob/5a5431439f7d5ca6b494d0d18fbfd7b1a356d67c/src/type/create/type.ts#L35\n// Note: proper json schemas with the $schema field set never arrive to this\n// transformer. Schemas with $schema are routed to the equivalent API json\n// schema field.\nexport function tSchema(schema: types.Schema | unknown): types.Schema {\n  return processJsonSchema(schema as types.Schema);\n}\n\nexport function tSpeechConfig(\n  speechConfig: types.SpeechConfigUnion,\n): types.SpeechConfig {\n  if (typeof speechConfig === 'object') {\n    return speechConfig;\n  } else if (typeof speechConfig === 'string') {\n    return {\n      voiceConfig: {\n        prebuiltVoiceConfig: {\n          voiceName: speechConfig,\n        },\n      },\n    };\n  } else {\n    throw new Error(`Unsupported speechConfig type: ${typeof speechConfig}`);\n  }\n}\n\nexport function tLiveSpeechConfig(\n  speechConfig: types.SpeechConfig | object,\n): types.SpeechConfig {\n  if ('multiSpeakerVoiceConfig' in speechConfig) {\n    throw new Error(\n      'multiSpeakerVoiceConfig is not supported in the live API.',\n    );\n  }\n  return speechConfig;\n}\n\nexport function tTool(tool: types.Tool): types.Tool {\n  if (tool.functionDeclarations) {\n    for (const functionDeclaration of tool.functionDeclarations) {\n      if (functionDeclaration.parameters) {\n        if (!Object.keys(functionDeclaration.parameters).includes('$schema')) {\n          functionDeclaration.parameters = processJsonSchema(\n            functionDeclaration.parameters,\n          );\n        } else {\n          if (!functionDeclaration.parametersJsonSchema) {\n            functionDeclaration.parametersJsonSchema =\n              functionDeclaration.parameters;\n            delete functionDeclaration.parameters;\n          }\n        }\n      }\n      if (functionDeclaration.response) {\n        if (!Object.keys(functionDeclaration.response).includes('$schema')) {\n          functionDeclaration.response = processJsonSchema(\n            functionDeclaration.response,\n          );\n        } else {\n          if (!functionDeclaration.responseJsonSchema) {\n            functionDeclaration.responseJsonSchema =\n              functionDeclaration.response;\n            delete functionDeclaration.response;\n          }\n        }\n      }\n    }\n  }\n  return tool;\n}\n\nexport function tTools(tools: types.ToolListUnion | unknown): types.Tool[] {\n  // Check if the incoming type is defined.\n  if (tools === undefined || tools === null) {\n    throw new Error('tools is required');\n  }\n  if (!Array.isArray(tools)) {\n    throw new Error('tools is required and must be an array of Tools');\n  }\n  const result: types.Tool[] = [];\n  for (const tool of tools) {\n    result.push(tool as types.Tool);\n  }\n  return result;\n}\n\n/**\n * Prepends resource name with project, location, resource_prefix if needed.\n *\n * @param client The API client.\n * @param resourceName The resource name.\n * @param resourcePrefix The resource prefix.\n * @param splitsAfterPrefix The number of splits after the prefix.\n * @returns The completed resource name.\n *\n * Examples:\n *\n * ```\n * resource_name = '123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = True\n * client.project = 'bar'\n * client.location = 'us-west1'\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * returns: 'projects/bar/locations/us-west1/cachedContents/123'\n * ```\n *\n * ```\n * resource_name = 'projects/foo/locations/us-central1/cachedContents/123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = True\n * client.project = 'bar'\n * client.location = 'us-west1'\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * returns: 'projects/foo/locations/us-central1/cachedContents/123'\n * ```\n *\n * ```\n * resource_name = '123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = False\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * returns 'cachedContents/123'\n * ```\n *\n * ```\n * resource_name = 'some/wrong/cachedContents/resource/name/123'\n * resource_prefix = 'cachedContents'\n * splits_after_prefix = 1\n * client.vertexai = False\n * # client.vertexai = True\n * _resource_name(client, resource_name, resource_prefix, splits_after_prefix)\n * -> 'some/wrong/resource/name/123'\n * ```\n */\nfunction resourceName(\n  client: ApiClient,\n  resourceName: string,\n  resourcePrefix: string,\n  splitsAfterPrefix: number = 1,\n): string {\n  const shouldAppendPrefix =\n    !resourceName.startsWith(`${resourcePrefix}/`) &&\n    resourceName.split('/').length === splitsAfterPrefix;\n  if (client.isVertexAI()) {\n    if (resourceName.startsWith('projects/')) {\n      return resourceName;\n    } else if (resourceName.startsWith('locations/')) {\n      return `projects/${client.getProject()}/${resourceName}`;\n    } else if (resourceName.startsWith(`${resourcePrefix}/`)) {\n      return `projects/${client.getProject()}/locations/${client.getLocation()}/${resourceName}`;\n    } else if (shouldAppendPrefix) {\n      return `projects/${client.getProject()}/locations/${client.getLocation()}/${resourcePrefix}/${resourceName}`;\n    } else {\n      return resourceName;\n    }\n  }\n  if (shouldAppendPrefix) {\n    return `${resourcePrefix}/${resourceName}`;\n  }\n  return resourceName;\n}\n\nexport function tCachedContentName(\n  apiClient: ApiClient,\n  name: string | unknown,\n): string {\n  if (typeof name !== 'string') {\n    throw new Error('name must be a string');\n  }\n  return resourceName(apiClient, name, 'cachedContents');\n}\n\nexport function tTuningJobStatus(status: string | unknown): string {\n  switch (status) {\n    case 'STATE_UNSPECIFIED':\n      return 'JOB_STATE_UNSPECIFIED';\n    case 'CREATING':\n      return 'JOB_STATE_RUNNING';\n    case 'ACTIVE':\n      return 'JOB_STATE_SUCCEEDED';\n    case 'FAILED':\n      return 'JOB_STATE_FAILED';\n    default:\n      return status as string;\n  }\n}\n\nexport function tBytes(fromImageBytes: string | unknown): string {\n  return baseTransformers.tBytes(fromImageBytes);\n}\n\nfunction _isFile(origin: unknown): boolean {\n  return (\n    origin !== null &&\n    origin !== undefined &&\n    typeof origin === 'object' &&\n    'name' in origin\n  );\n}\n\nexport function isGeneratedVideo(origin: unknown): boolean {\n  return (\n    origin !== null &&\n    origin !== undefined &&\n    typeof origin === 'object' &&\n    'video' in origin\n  );\n}\n\nexport function isVideo(origin: unknown): boolean {\n  return (\n    origin !== null &&\n    origin !== undefined &&\n    typeof origin === 'object' &&\n    'uri' in origin\n  );\n}\n\nexport function tFileName(\n  fromName: string | types.File | types.GeneratedVideo | types.Video,\n): string | undefined {\n  let name: string | undefined;\n\n  if (_isFile(fromName)) {\n    name = (fromName as types.File).name;\n  }\n  if (isVideo(fromName)) {\n    name = (fromName as types.Video).uri;\n    if (name === undefined) {\n      return undefined;\n    }\n  }\n  if (isGeneratedVideo(fromName)) {\n    name = (fromName as types.GeneratedVideo).video?.uri;\n    if (name === undefined) {\n      return undefined;\n    }\n  }\n  if (typeof fromName === 'string') {\n    name = fromName;\n  }\n\n  if (name === undefined) {\n    throw new Error('Could not extract file name from the provided input.');\n  }\n\n  if (name.startsWith('https://')) {\n    const suffix = name.split('files/')[1];\n    const match = suffix.match(/[a-z0-9]+/);\n    if (match === null) {\n      throw new Error(`Could not extract file name from URI ${name}`);\n    }\n    name = match[0];\n  } else if (name.startsWith('files/')) {\n    name = name.split('files/')[1];\n  }\n  return name;\n}\n\nexport function tModelsUrl(\n  apiClient: ApiClient,\n  baseModels: boolean | unknown,\n): string {\n  let res: string;\n  if (apiClient.isVertexAI()) {\n    res = baseModels ? 'publishers/google/models' : 'models';\n  } else {\n    res = baseModels ? 'models' : 'tunedModels';\n  }\n  return res;\n}\n\nexport function tExtractModels(response: unknown): Record<string, unknown>[] {\n  for (const key of ['models', 'tunedModels', 'publisherModels']) {\n    if (hasField(response, key)) {\n      return (response as Record<string, unknown>)[key] as Record<\n        string,\n        unknown\n      >[];\n    }\n  }\n  return [];\n}\n\nfunction hasField(data: unknown, fieldName: string): boolean {\n  return data !== null && typeof data === 'object' && fieldName in data;\n}\n\nexport function mcpToGeminiTool(\n  mcpTool: McpTool,\n  config: types.CallableToolConfig = {},\n): types.Tool {\n  const mcpToolSchema = mcpTool as Record<string, unknown>;\n  const functionDeclaration: Record<string, unknown> = {\n    name: mcpToolSchema['name'],\n    description: mcpToolSchema['description'],\n    parametersJsonSchema: mcpToolSchema['inputSchema'],\n  };\n  if (mcpToolSchema['outputSchema']) {\n    functionDeclaration['responseJsonSchema'] = mcpToolSchema['outputSchema'];\n  }\n  if (config.behavior) {\n    functionDeclaration['behavior'] = config.behavior;\n  }\n\n  const geminiTool = {\n    functionDeclarations: [\n      functionDeclaration as unknown as types.FunctionDeclaration,\n    ],\n  };\n\n  return geminiTool;\n}\n\n/**\n * Converts a list of MCP tools to a single Gemini tool with a list of function\n * declarations.\n */\nexport function mcpToolsToGeminiTool(\n  mcpTools: McpTool[],\n  config: types.CallableToolConfig = {},\n): types.Tool {\n  const functionDeclarations: types.FunctionDeclaration[] = [];\n  const toolNames = new Set<string>();\n  for (const mcpTool of mcpTools) {\n    const mcpToolName = mcpTool.name as string;\n    if (toolNames.has(mcpToolName)) {\n      throw new Error(\n        `Duplicate function name ${\n          mcpToolName\n        } found in MCP tools. Please ensure function names are unique.`,\n      );\n    }\n    toolNames.add(mcpToolName);\n    const geminiTool = mcpToGeminiTool(mcpTool, config);\n    if (geminiTool.functionDeclarations) {\n      functionDeclarations.push(...geminiTool.functionDeclarations);\n    }\n  }\n\n  return {functionDeclarations: functionDeclarations};\n}\n\n// Transforms a source input into a BatchJobSource object with validation.\nexport function tBatchJobSource(\n  client: ApiClient,\n  src: string | types.InlinedRequest[] | types.BatchJobSource,\n): types.BatchJobSource {\n  let sourceObj: types.BatchJobSource;\n\n  if (typeof src === 'string') {\n    if (client.isVertexAI()) {\n      if (src.startsWith('gs://')) {\n        sourceObj = {format: 'jsonl', gcsUri: [src]};\n      } else if (src.startsWith('bq://')) {\n        sourceObj = {format: 'bigquery', bigqueryUri: src};\n      } else {\n        throw new Error(`Unsupported string source for Vertex AI: ${src}`);\n      }\n    } else {\n      // MLDEV\n      if (src.startsWith('files/')) {\n        sourceObj = {fileName: src}; // Default to fileName for string input\n      } else {\n        throw new Error(`Unsupported string source for Gemini API: ${src}`);\n      }\n    }\n  } else if (Array.isArray(src)) {\n    if (client.isVertexAI()) {\n      throw new Error('InlinedRequest[] is not supported in Vertex AI.');\n    }\n    sourceObj = {inlinedRequests: src};\n  } else {\n    // It's already a BatchJobSource object\n    sourceObj = src;\n  }\n\n  // Validation logic\n  const vertexSourcesCount = [sourceObj.gcsUri, sourceObj.bigqueryUri].filter(\n    Boolean,\n  ).length;\n\n  const mldevSourcesCount = [\n    sourceObj.inlinedRequests,\n    sourceObj.fileName,\n  ].filter(Boolean).length;\n\n  if (client.isVertexAI()) {\n    if (mldevSourcesCount > 0 || vertexSourcesCount !== 1) {\n      throw new Error(\n        'Exactly one of `gcsUri` or `bigqueryUri` must be set for Vertex AI.',\n      );\n    }\n  } else {\n    // MLDEV\n    if (vertexSourcesCount > 0 || mldevSourcesCount !== 1) {\n      throw new Error(\n        'Exactly one of `inlinedRequests`, `fileName`, ' +\n          'must be set for Gemini API.',\n      );\n    }\n  }\n\n  return sourceObj;\n}\n\nexport function tEmbeddingBatchJobSource(\n  client: ApiClient,\n  src: types.EmbeddingsBatchJobSource,\n): types.EmbeddingsBatchJobSource {\n  if (client.isVertexAI()) {\n    throw new Error('Embedding batch jobs are not supported in Vertex AI.');\n  }\n\n  const sourceObj: types.EmbeddingsBatchJobSource = {...src};\n\n  const mldevSources =\n    Number(!!sourceObj.inlinedRequests) + Number(!!sourceObj.fileName);\n\n  if (mldevSources !== 1) {\n    throw new Error(\n      'Exactly one of `inlinedRequests` or `fileName` must be set for Embedding Batch Jobs in the Gemini API.',\n    );\n  }\n  return sourceObj;\n}\n\nexport function tBatchJobDestination(\n  dest: string | types.BatchJobDestination,\n): types.BatchJobDestination {\n  if (typeof dest !== 'string') {\n    return dest as types.BatchJobDestination;\n  }\n  const destString = dest as string;\n  if (destString.startsWith('gs://')) {\n    return {\n      format: 'jsonl',\n      gcsUri: destString,\n    };\n  } else if (destString.startsWith('bq://')) {\n    return {\n      format: 'bigquery',\n      bigqueryUri: destString,\n    };\n  } else {\n    throw new Error(`Unsupported destination: ${destString}`);\n  }\n}\n\nexport function tRecvBatchJobDestination(\n  dest: unknown,\n): types.BatchJobDestination {\n  // Ensure dest is a non-null object before proceeding.\n  if (typeof dest !== 'object' || dest === null) {\n    // If the input is not an object, it cannot be a valid BatchJobDestination\n    // based on the operations performed. Return it cast, or handle as an error.\n    // Casting an empty object might be a safe default.\n    return {} as types.BatchJobDestination;\n  }\n\n  // Cast to Record<string, unknown> to allow string property access.\n  const obj = dest as Record<string, unknown>;\n\n  // Safely access nested properties.\n  const inlineResponsesVal = obj['inlinedResponses'];\n  if (typeof inlineResponsesVal !== 'object' || inlineResponsesVal === null) {\n    return dest as types.BatchJobDestination;\n  }\n  const inlineResponsesObj = inlineResponsesVal as Record<string, unknown>;\n\n  const responsesArray = inlineResponsesObj['inlinedResponses'];\n  if (!Array.isArray(responsesArray) || responsesArray.length === 0) {\n    return dest as types.BatchJobDestination;\n  }\n\n  // Check if any response has the 'embedding' property.\n  let hasEmbedding = false;\n  for (const responseItem of responsesArray) {\n    if (typeof responseItem !== 'object' || responseItem === null) {\n      continue;\n    }\n    const responseItemObj = responseItem as Record<string, unknown>;\n\n    const responseVal = responseItemObj['response'];\n    if (typeof responseVal !== 'object' || responseVal === null) {\n      continue;\n    }\n    const responseObj = responseVal as Record<string, unknown>;\n\n    // Check for the existence of the 'embedding' key.\n    if (responseObj['embedding'] !== undefined) {\n      hasEmbedding = true;\n      break;\n    }\n  }\n\n  // Perform the transformation if an embedding was found.\n  if (hasEmbedding) {\n    obj['inlinedEmbedContentResponses'] = obj['inlinedResponses'];\n    delete obj['inlinedResponses'];\n  }\n\n  // Cast the (potentially) modified object to the target type.\n  return dest as types.BatchJobDestination;\n}\n\nexport function tBatchJobName(apiClient: ApiClient, name: unknown): string {\n  const nameString = name as string;\n  if (!apiClient.isVertexAI()) {\n    const mldevPattern = /batches\\/[^/]+$/;\n\n    if (mldevPattern.test(nameString)) {\n      return nameString.split('/').pop() as string;\n    } else {\n      throw new Error(`Invalid batch job name: ${nameString}.`);\n    }\n  }\n\n  const vertexPattern =\n    /^projects\\/[^/]+\\/locations\\/[^/]+\\/batchPredictionJobs\\/[^/]+$/;\n\n  if (vertexPattern.test(nameString)) {\n    return nameString.split('/').pop() as string;\n  } else if (/^\\d+$/.test(nameString)) {\n    return nameString;\n  } else {\n    throw new Error(`Invalid batch job name: ${nameString}.`);\n  }\n}\n\nexport function tJobState(state: unknown): string {\n  const stateString = state as string;\n  if (stateString === 'BATCH_STATE_UNSPECIFIED') {\n    return 'JOB_STATE_UNSPECIFIED';\n  } else if (stateString === 'BATCH_STATE_PENDING') {\n    return 'JOB_STATE_PENDING';\n  } else if (stateString === 'BATCH_STATE_RUNNING') {\n    return 'JOB_STATE_RUNNING';\n  } else if (stateString === 'BATCH_STATE_SUCCEEDED') {\n    return 'JOB_STATE_SUCCEEDED';\n  } else if (stateString === 'BATCH_STATE_FAILED') {\n    return 'JOB_STATE_FAILED';\n  } else if (stateString === 'BATCH_STATE_CANCELLED') {\n    return 'JOB_STATE_CANCELLED';\n  } else if (stateString === 'BATCH_STATE_EXPIRED') {\n    return 'JOB_STATE_EXPIRED';\n  } else {\n    return stateString;\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from '../_api_client.js';\nimport * as common from '../_common.js';\nimport * as t from '../_transformers.js';\nimport type * as types from '../types.js';\n\nexport function batchJobDestinationFromMldev(\n  fromObject: types.BatchJobDestination,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFileName = common.getValueByPath(fromObject, ['responsesFile']);\n  if (fromFileName != null) {\n    common.setValueByPath(toObject, ['fileName'], fromFileName);\n  }\n\n  const fromInlinedResponses = common.getValueByPath(fromObject, [\n    'inlinedResponses',\n    'inlinedResponses',\n  ]);\n  if (fromInlinedResponses != null) {\n    let transformedList = fromInlinedResponses;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return inlinedResponseFromMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['inlinedResponses'], transformedList);\n  }\n\n  const fromInlinedEmbedContentResponses = common.getValueByPath(fromObject, [\n    'inlinedEmbedContentResponses',\n    'inlinedResponses',\n  ]);\n  if (fromInlinedEmbedContentResponses != null) {\n    let transformedList = fromInlinedEmbedContentResponses;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(\n      toObject,\n      ['inlinedEmbedContentResponses'],\n      transformedList,\n    );\n  }\n\n  return toObject;\n}\n\nexport function batchJobDestinationFromVertex(\n  fromObject: types.BatchJobDestination,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFormat = common.getValueByPath(fromObject, ['predictionsFormat']);\n  if (fromFormat != null) {\n    common.setValueByPath(toObject, ['format'], fromFormat);\n  }\n\n  const fromGcsUri = common.getValueByPath(fromObject, [\n    'gcsDestination',\n    'outputUriPrefix',\n  ]);\n  if (fromGcsUri != null) {\n    common.setValueByPath(toObject, ['gcsUri'], fromGcsUri);\n  }\n\n  const fromBigqueryUri = common.getValueByPath(fromObject, [\n    'bigqueryDestination',\n    'outputUri',\n  ]);\n  if (fromBigqueryUri != null) {\n    common.setValueByPath(toObject, ['bigqueryUri'], fromBigqueryUri);\n  }\n\n  return toObject;\n}\n\nexport function batchJobDestinationToVertex(\n  fromObject: types.BatchJobDestination,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFormat = common.getValueByPath(fromObject, ['format']);\n  if (fromFormat != null) {\n    common.setValueByPath(toObject, ['predictionsFormat'], fromFormat);\n  }\n\n  const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);\n  if (fromGcsUri != null) {\n    common.setValueByPath(\n      toObject,\n      ['gcsDestination', 'outputUriPrefix'],\n      fromGcsUri,\n    );\n  }\n\n  const fromBigqueryUri = common.getValueByPath(fromObject, ['bigqueryUri']);\n  if (fromBigqueryUri != null) {\n    common.setValueByPath(\n      toObject,\n      ['bigqueryDestination', 'outputUri'],\n      fromBigqueryUri,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['fileName']) !== undefined) {\n    throw new Error('fileName parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['inlinedResponses']) !== undefined) {\n    throw new Error(\n      'inlinedResponses parameter is not supported in Vertex AI.',\n    );\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['inlinedEmbedContentResponses']) !==\n    undefined\n  ) {\n    throw new Error(\n      'inlinedEmbedContentResponses parameter is not supported in Vertex AI.',\n    );\n  }\n\n  return toObject;\n}\n\nexport function batchJobFromMldev(\n  fromObject: types.BatchJob,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromDisplayName = common.getValueByPath(fromObject, [\n    'metadata',\n    'displayName',\n  ]);\n  if (fromDisplayName != null) {\n    common.setValueByPath(toObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromState = common.getValueByPath(fromObject, ['metadata', 'state']);\n  if (fromState != null) {\n    common.setValueByPath(toObject, ['state'], t.tJobState(fromState));\n  }\n\n  const fromCreateTime = common.getValueByPath(fromObject, [\n    'metadata',\n    'createTime',\n  ]);\n  if (fromCreateTime != null) {\n    common.setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n\n  const fromEndTime = common.getValueByPath(fromObject, [\n    'metadata',\n    'endTime',\n  ]);\n  if (fromEndTime != null) {\n    common.setValueByPath(toObject, ['endTime'], fromEndTime);\n  }\n\n  const fromUpdateTime = common.getValueByPath(fromObject, [\n    'metadata',\n    'updateTime',\n  ]);\n  if (fromUpdateTime != null) {\n    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n\n  const fromModel = common.getValueByPath(fromObject, ['metadata', 'model']);\n  if (fromModel != null) {\n    common.setValueByPath(toObject, ['model'], fromModel);\n  }\n\n  const fromDest = common.getValueByPath(fromObject, ['metadata', 'output']);\n  if (fromDest != null) {\n    common.setValueByPath(\n      toObject,\n      ['dest'],\n      batchJobDestinationFromMldev(t.tRecvBatchJobDestination(fromDest)),\n    );\n  }\n\n  return toObject;\n}\n\nexport function batchJobFromVertex(\n  fromObject: types.BatchJob,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (fromDisplayName != null) {\n    common.setValueByPath(toObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromState = common.getValueByPath(fromObject, ['state']);\n  if (fromState != null) {\n    common.setValueByPath(toObject, ['state'], t.tJobState(fromState));\n  }\n\n  const fromError = common.getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    common.setValueByPath(toObject, ['error'], fromError);\n  }\n\n  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    common.setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n\n  const fromStartTime = common.getValueByPath(fromObject, ['startTime']);\n  if (fromStartTime != null) {\n    common.setValueByPath(toObject, ['startTime'], fromStartTime);\n  }\n\n  const fromEndTime = common.getValueByPath(fromObject, ['endTime']);\n  if (fromEndTime != null) {\n    common.setValueByPath(toObject, ['endTime'], fromEndTime);\n  }\n\n  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(toObject, ['model'], fromModel);\n  }\n\n  const fromSrc = common.getValueByPath(fromObject, ['inputConfig']);\n  if (fromSrc != null) {\n    common.setValueByPath(toObject, ['src'], batchJobSourceFromVertex(fromSrc));\n  }\n\n  const fromDest = common.getValueByPath(fromObject, ['outputConfig']);\n  if (fromDest != null) {\n    common.setValueByPath(\n      toObject,\n      ['dest'],\n      batchJobDestinationFromVertex(t.tRecvBatchJobDestination(fromDest)),\n    );\n  }\n\n  return toObject;\n}\n\nexport function batchJobSourceFromVertex(\n  fromObject: types.BatchJobSource,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFormat = common.getValueByPath(fromObject, ['instancesFormat']);\n  if (fromFormat != null) {\n    common.setValueByPath(toObject, ['format'], fromFormat);\n  }\n\n  const fromGcsUri = common.getValueByPath(fromObject, ['gcsSource', 'uris']);\n  if (fromGcsUri != null) {\n    common.setValueByPath(toObject, ['gcsUri'], fromGcsUri);\n  }\n\n  const fromBigqueryUri = common.getValueByPath(fromObject, [\n    'bigquerySource',\n    'inputUri',\n  ]);\n  if (fromBigqueryUri != null) {\n    common.setValueByPath(toObject, ['bigqueryUri'], fromBigqueryUri);\n  }\n\n  return toObject;\n}\n\nexport function batchJobSourceToMldev(\n  apiClient: ApiClient,\n  fromObject: types.BatchJobSource,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['format']) !== undefined) {\n    throw new Error('format parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['gcsUri']) !== undefined) {\n    throw new Error('gcsUri parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['bigqueryUri']) !== undefined) {\n    throw new Error('bigqueryUri parameter is not supported in Gemini API.');\n  }\n\n  const fromFileName = common.getValueByPath(fromObject, ['fileName']);\n  if (fromFileName != null) {\n    common.setValueByPath(toObject, ['fileName'], fromFileName);\n  }\n\n  const fromInlinedRequests = common.getValueByPath(fromObject, [\n    'inlinedRequests',\n  ]);\n  if (fromInlinedRequests != null) {\n    let transformedList = fromInlinedRequests;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return inlinedRequestToMldev(apiClient, item);\n      });\n    }\n    common.setValueByPath(toObject, ['requests', 'requests'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function batchJobSourceToVertex(\n  fromObject: types.BatchJobSource,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFormat = common.getValueByPath(fromObject, ['format']);\n  if (fromFormat != null) {\n    common.setValueByPath(toObject, ['instancesFormat'], fromFormat);\n  }\n\n  const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);\n  if (fromGcsUri != null) {\n    common.setValueByPath(toObject, ['gcsSource', 'uris'], fromGcsUri);\n  }\n\n  const fromBigqueryUri = common.getValueByPath(fromObject, ['bigqueryUri']);\n  if (fromBigqueryUri != null) {\n    common.setValueByPath(\n      toObject,\n      ['bigquerySource', 'inputUri'],\n      fromBigqueryUri,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['fileName']) !== undefined) {\n    throw new Error('fileName parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['inlinedRequests']) !== undefined) {\n    throw new Error('inlinedRequests parameter is not supported in Vertex AI.');\n  }\n\n  return toObject;\n}\n\nexport function blobToMldev(fromObject: types.Blob): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['displayName']) !== undefined) {\n    throw new Error('displayName parameter is not supported in Gemini API.');\n  }\n\n  const fromData = common.getValueByPath(fromObject, ['data']);\n  if (fromData != null) {\n    common.setValueByPath(toObject, ['data'], fromData);\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function cancelBatchJobParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.CancelBatchJobParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tBatchJobName(apiClient, fromName),\n    );\n  }\n\n  return toObject;\n}\n\nexport function cancelBatchJobParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.CancelBatchJobParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tBatchJobName(apiClient, fromName),\n    );\n  }\n\n  return toObject;\n}\n\nexport function candidateFromMldev(\n  fromObject: types.Candidate,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromContent = common.getValueByPath(fromObject, ['content']);\n  if (fromContent != null) {\n    common.setValueByPath(toObject, ['content'], fromContent);\n  }\n\n  const fromCitationMetadata = common.getValueByPath(fromObject, [\n    'citationMetadata',\n  ]);\n  if (fromCitationMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['citationMetadata'],\n      citationMetadataFromMldev(fromCitationMetadata),\n    );\n  }\n\n  const fromTokenCount = common.getValueByPath(fromObject, ['tokenCount']);\n  if (fromTokenCount != null) {\n    common.setValueByPath(toObject, ['tokenCount'], fromTokenCount);\n  }\n\n  const fromFinishReason = common.getValueByPath(fromObject, ['finishReason']);\n  if (fromFinishReason != null) {\n    common.setValueByPath(toObject, ['finishReason'], fromFinishReason);\n  }\n\n  const fromUrlContextMetadata = common.getValueByPath(fromObject, [\n    'urlContextMetadata',\n  ]);\n  if (fromUrlContextMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['urlContextMetadata'],\n      fromUrlContextMetadata,\n    );\n  }\n\n  const fromAvgLogprobs = common.getValueByPath(fromObject, ['avgLogprobs']);\n  if (fromAvgLogprobs != null) {\n    common.setValueByPath(toObject, ['avgLogprobs'], fromAvgLogprobs);\n  }\n\n  const fromGroundingMetadata = common.getValueByPath(fromObject, [\n    'groundingMetadata',\n  ]);\n  if (fromGroundingMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['groundingMetadata'],\n      fromGroundingMetadata,\n    );\n  }\n\n  const fromIndex = common.getValueByPath(fromObject, ['index']);\n  if (fromIndex != null) {\n    common.setValueByPath(toObject, ['index'], fromIndex);\n  }\n\n  const fromLogprobsResult = common.getValueByPath(fromObject, [\n    'logprobsResult',\n  ]);\n  if (fromLogprobsResult != null) {\n    common.setValueByPath(toObject, ['logprobsResult'], fromLogprobsResult);\n  }\n\n  const fromSafetyRatings = common.getValueByPath(fromObject, [\n    'safetyRatings',\n  ]);\n  if (fromSafetyRatings != null) {\n    let transformedList = fromSafetyRatings;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['safetyRatings'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function citationMetadataFromMldev(\n  fromObject: types.CitationMetadata,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromCitations = common.getValueByPath(fromObject, ['citationSources']);\n  if (fromCitations != null) {\n    let transformedList = fromCitations;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['citations'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function contentToMldev(\n  fromObject: types.Content,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromParts = common.getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    let transformedList = fromParts;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return partToMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['parts'], transformedList);\n  }\n\n  const fromRole = common.getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    common.setValueByPath(toObject, ['role'], fromRole);\n  }\n\n  return toObject;\n}\n\nexport function createBatchJobConfigToMldev(\n  fromObject: types.CreateBatchJobConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (parentObject !== undefined && fromDisplayName != null) {\n    common.setValueByPath(\n      parentObject,\n      ['batch', 'displayName'],\n      fromDisplayName,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['dest']) !== undefined) {\n    throw new Error('dest parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function createBatchJobConfigToVertex(\n  fromObject: types.CreateBatchJobConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (parentObject !== undefined && fromDisplayName != null) {\n    common.setValueByPath(parentObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromDest = common.getValueByPath(fromObject, ['dest']);\n  if (parentObject !== undefined && fromDest != null) {\n    common.setValueByPath(\n      parentObject,\n      ['outputConfig'],\n      batchJobDestinationToVertex(t.tBatchJobDestination(fromDest)),\n    );\n  }\n\n  return toObject;\n}\n\nexport function createBatchJobParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.CreateBatchJobParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromSrc = common.getValueByPath(fromObject, ['src']);\n  if (fromSrc != null) {\n    common.setValueByPath(\n      toObject,\n      ['batch', 'inputConfig'],\n      batchJobSourceToMldev(apiClient, t.tBatchJobSource(apiClient, fromSrc)),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    createBatchJobConfigToMldev(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function createBatchJobParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.CreateBatchJobParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(toObject, ['model'], t.tModel(apiClient, fromModel));\n  }\n\n  const fromSrc = common.getValueByPath(fromObject, ['src']);\n  if (fromSrc != null) {\n    common.setValueByPath(\n      toObject,\n      ['inputConfig'],\n      batchJobSourceToVertex(t.tBatchJobSource(apiClient, fromSrc)),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    createBatchJobConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function createEmbeddingsBatchJobConfigToMldev(\n  fromObject: types.CreateEmbeddingsBatchJobConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (parentObject !== undefined && fromDisplayName != null) {\n    common.setValueByPath(\n      parentObject,\n      ['batch', 'displayName'],\n      fromDisplayName,\n    );\n  }\n\n  return toObject;\n}\n\nexport function createEmbeddingsBatchJobParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.CreateEmbeddingsBatchJobParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromSrc = common.getValueByPath(fromObject, ['src']);\n  if (fromSrc != null) {\n    common.setValueByPath(\n      toObject,\n      ['batch', 'inputConfig'],\n      embeddingsBatchJobSourceToMldev(apiClient, fromSrc),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    createEmbeddingsBatchJobConfigToMldev(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function deleteBatchJobParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.DeleteBatchJobParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tBatchJobName(apiClient, fromName),\n    );\n  }\n\n  return toObject;\n}\n\nexport function deleteBatchJobParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.DeleteBatchJobParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tBatchJobName(apiClient, fromName),\n    );\n  }\n\n  return toObject;\n}\n\nexport function deleteResourceJobFromMldev(\n  fromObject: types.DeleteResourceJob,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromDone = common.getValueByPath(fromObject, ['done']);\n  if (fromDone != null) {\n    common.setValueByPath(toObject, ['done'], fromDone);\n  }\n\n  const fromError = common.getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    common.setValueByPath(toObject, ['error'], fromError);\n  }\n\n  return toObject;\n}\n\nexport function deleteResourceJobFromVertex(\n  fromObject: types.DeleteResourceJob,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromDone = common.getValueByPath(fromObject, ['done']);\n  if (fromDone != null) {\n    common.setValueByPath(toObject, ['done'], fromDone);\n  }\n\n  const fromError = common.getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    common.setValueByPath(toObject, ['error'], fromError);\n  }\n\n  return toObject;\n}\n\nexport function embedContentBatchToMldev(\n  apiClient: ApiClient,\n  fromObject: types.EmbedContentBatch,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    let transformedList = t.tContentsForEmbed(apiClient, fromContents);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(\n      toObject,\n      ['requests[]', 'request', 'content'],\n      transformedList,\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['_self'],\n      embedContentConfigToMldev(fromConfig, toObject),\n    );\n    common.moveValueByPath(toObject, {'requests[].*': 'requests[].request.*'});\n  }\n\n  return toObject;\n}\n\nexport function embedContentConfigToMldev(\n  fromObject: types.EmbedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTaskType = common.getValueByPath(fromObject, ['taskType']);\n  if (parentObject !== undefined && fromTaskType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['requests[]', 'taskType'],\n      fromTaskType,\n    );\n  }\n\n  const fromTitle = common.getValueByPath(fromObject, ['title']);\n  if (parentObject !== undefined && fromTitle != null) {\n    common.setValueByPath(parentObject, ['requests[]', 'title'], fromTitle);\n  }\n\n  const fromOutputDimensionality = common.getValueByPath(fromObject, [\n    'outputDimensionality',\n  ]);\n  if (parentObject !== undefined && fromOutputDimensionality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['requests[]', 'outputDimensionality'],\n      fromOutputDimensionality,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['mimeType']) !== undefined) {\n    throw new Error('mimeType parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['autoTruncate']) !== undefined) {\n    throw new Error('autoTruncate parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function embeddingsBatchJobSourceToMldev(\n  apiClient: ApiClient,\n  fromObject: types.EmbeddingsBatchJobSource,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFileName = common.getValueByPath(fromObject, ['fileName']);\n  if (fromFileName != null) {\n    common.setValueByPath(toObject, ['file_name'], fromFileName);\n  }\n\n  const fromInlinedRequests = common.getValueByPath(fromObject, [\n    'inlinedRequests',\n  ]);\n  if (fromInlinedRequests != null) {\n    common.setValueByPath(\n      toObject,\n      ['requests'],\n      embedContentBatchToMldev(apiClient, fromInlinedRequests),\n    );\n  }\n\n  return toObject;\n}\n\nexport function fileDataToMldev(\n  fromObject: types.FileData,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['displayName']) !== undefined) {\n    throw new Error('displayName parameter is not supported in Gemini API.');\n  }\n\n  const fromFileUri = common.getValueByPath(fromObject, ['fileUri']);\n  if (fromFileUri != null) {\n    common.setValueByPath(toObject, ['fileUri'], fromFileUri);\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function generateContentConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GenerateContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['systemInstruction'],\n      contentToMldev(t.tContent(fromSystemInstruction)),\n    );\n  }\n\n  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);\n  if (fromTemperature != null) {\n    common.setValueByPath(toObject, ['temperature'], fromTemperature);\n  }\n\n  const fromTopP = common.getValueByPath(fromObject, ['topP']);\n  if (fromTopP != null) {\n    common.setValueByPath(toObject, ['topP'], fromTopP);\n  }\n\n  const fromTopK = common.getValueByPath(fromObject, ['topK']);\n  if (fromTopK != null) {\n    common.setValueByPath(toObject, ['topK'], fromTopK);\n  }\n\n  const fromCandidateCount = common.getValueByPath(fromObject, [\n    'candidateCount',\n  ]);\n  if (fromCandidateCount != null) {\n    common.setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n  }\n\n  const fromMaxOutputTokens = common.getValueByPath(fromObject, [\n    'maxOutputTokens',\n  ]);\n  if (fromMaxOutputTokens != null) {\n    common.setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n  }\n\n  const fromStopSequences = common.getValueByPath(fromObject, [\n    'stopSequences',\n  ]);\n  if (fromStopSequences != null) {\n    common.setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n  }\n\n  const fromResponseLogprobs = common.getValueByPath(fromObject, [\n    'responseLogprobs',\n  ]);\n  if (fromResponseLogprobs != null) {\n    common.setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n  }\n\n  const fromLogprobs = common.getValueByPath(fromObject, ['logprobs']);\n  if (fromLogprobs != null) {\n    common.setValueByPath(toObject, ['logprobs'], fromLogprobs);\n  }\n\n  const fromPresencePenalty = common.getValueByPath(fromObject, [\n    'presencePenalty',\n  ]);\n  if (fromPresencePenalty != null) {\n    common.setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n  }\n\n  const fromFrequencyPenalty = common.getValueByPath(fromObject, [\n    'frequencyPenalty',\n  ]);\n  if (fromFrequencyPenalty != null) {\n    common.setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (fromSeed != null) {\n    common.setValueByPath(toObject, ['seed'], fromSeed);\n  }\n\n  const fromResponseMimeType = common.getValueByPath(fromObject, [\n    'responseMimeType',\n  ]);\n  if (fromResponseMimeType != null) {\n    common.setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n  }\n\n  const fromResponseSchema = common.getValueByPath(fromObject, [\n    'responseSchema',\n  ]);\n  if (fromResponseSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseSchema'],\n      t.tSchema(fromResponseSchema),\n    );\n  }\n\n  const fromResponseJsonSchema = common.getValueByPath(fromObject, [\n    'responseJsonSchema',\n  ]);\n  if (fromResponseJsonSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseJsonSchema'],\n      fromResponseJsonSchema,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['routingConfig']) !== undefined) {\n    throw new Error('routingConfig parameter is not supported in Gemini API.');\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['modelSelectionConfig']) !== undefined\n  ) {\n    throw new Error(\n      'modelSelectionConfig parameter is not supported in Gemini API.',\n    );\n  }\n\n  const fromSafetySettings = common.getValueByPath(fromObject, [\n    'safetySettings',\n  ]);\n  if (parentObject !== undefined && fromSafetySettings != null) {\n    let transformedList = fromSafetySettings;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return safetySettingToMldev(item);\n      });\n    }\n    common.setValueByPath(parentObject, ['safetySettings'], transformedList);\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    let transformedList = t.tTools(fromTools);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return toolToMldev(t.tTool(item));\n      });\n    }\n    common.setValueByPath(parentObject, ['tools'], transformedList);\n  }\n\n  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    common.setValueByPath(parentObject, ['toolConfig'], fromToolConfig);\n  }\n\n  if (common.getValueByPath(fromObject, ['labels']) !== undefined) {\n    throw new Error('labels parameter is not supported in Gemini API.');\n  }\n\n  const fromCachedContent = common.getValueByPath(fromObject, [\n    'cachedContent',\n  ]);\n  if (parentObject !== undefined && fromCachedContent != null) {\n    common.setValueByPath(\n      parentObject,\n      ['cachedContent'],\n      t.tCachedContentName(apiClient, fromCachedContent),\n    );\n  }\n\n  const fromResponseModalities = common.getValueByPath(fromObject, [\n    'responseModalities',\n  ]);\n  if (fromResponseModalities != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseModalities'],\n      fromResponseModalities,\n    );\n  }\n\n  const fromMediaResolution = common.getValueByPath(fromObject, [\n    'mediaResolution',\n  ]);\n  if (fromMediaResolution != null) {\n    common.setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n  }\n\n  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['speechConfig'],\n      t.tSpeechConfig(fromSpeechConfig),\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['audioTimestamp']) !== undefined) {\n    throw new Error('audioTimestamp parameter is not supported in Gemini API.');\n  }\n\n  const fromThinkingConfig = common.getValueByPath(fromObject, [\n    'thinkingConfig',\n  ]);\n  if (fromThinkingConfig != null) {\n    common.setValueByPath(toObject, ['thinkingConfig'], fromThinkingConfig);\n  }\n\n  const fromImageConfig = common.getValueByPath(fromObject, ['imageConfig']);\n  if (fromImageConfig != null) {\n    common.setValueByPath(toObject, ['imageConfig'], fromImageConfig);\n  }\n\n  return toObject;\n}\n\nexport function generateContentResponseFromMldev(\n  fromObject: types.GenerateContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromCandidates = common.getValueByPath(fromObject, ['candidates']);\n  if (fromCandidates != null) {\n    let transformedList = fromCandidates;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return candidateFromMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['candidates'], transformedList);\n  }\n\n  const fromModelVersion = common.getValueByPath(fromObject, ['modelVersion']);\n  if (fromModelVersion != null) {\n    common.setValueByPath(toObject, ['modelVersion'], fromModelVersion);\n  }\n\n  const fromPromptFeedback = common.getValueByPath(fromObject, [\n    'promptFeedback',\n  ]);\n  if (fromPromptFeedback != null) {\n    common.setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);\n  }\n\n  const fromResponseId = common.getValueByPath(fromObject, ['responseId']);\n  if (fromResponseId != null) {\n    common.setValueByPath(toObject, ['responseId'], fromResponseId);\n  }\n\n  const fromUsageMetadata = common.getValueByPath(fromObject, [\n    'usageMetadata',\n  ]);\n  if (fromUsageMetadata != null) {\n    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n  }\n\n  return toObject;\n}\n\nexport function getBatchJobParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GetBatchJobParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tBatchJobName(apiClient, fromName),\n    );\n  }\n\n  return toObject;\n}\n\nexport function getBatchJobParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GetBatchJobParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tBatchJobName(apiClient, fromName),\n    );\n  }\n\n  return toObject;\n}\n\nexport function googleMapsToMldev(\n  fromObject: types.GoogleMaps,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['authConfig']) !== undefined) {\n    throw new Error('authConfig parameter is not supported in Gemini API.');\n  }\n\n  const fromEnableWidget = common.getValueByPath(fromObject, ['enableWidget']);\n  if (fromEnableWidget != null) {\n    common.setValueByPath(toObject, ['enableWidget'], fromEnableWidget);\n  }\n\n  return toObject;\n}\n\nexport function googleSearchToMldev(\n  fromObject: types.GoogleSearch,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTimeRangeFilter = common.getValueByPath(fromObject, [\n    'timeRangeFilter',\n  ]);\n  if (fromTimeRangeFilter != null) {\n    common.setValueByPath(toObject, ['timeRangeFilter'], fromTimeRangeFilter);\n  }\n\n  if (common.getValueByPath(fromObject, ['excludeDomains']) !== undefined) {\n    throw new Error('excludeDomains parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function inlinedRequestToMldev(\n  apiClient: ApiClient,\n  fromObject: types.InlinedRequest,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['request', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    let transformedList = t.tContents(fromContents);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return contentToMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['request', 'contents'], transformedList);\n  }\n\n  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);\n  if (fromMetadata != null) {\n    common.setValueByPath(toObject, ['metadata'], fromMetadata);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['request', 'generationConfig'],\n      generateContentConfigToMldev(\n        apiClient,\n        fromConfig,\n        common.getValueByPath(toObject, ['request'], {}) as Record<\n          string,\n          unknown\n        >,\n      ),\n    );\n  }\n\n  return toObject;\n}\n\nexport function inlinedResponseFromMldev(\n  fromObject: types.InlinedResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromResponse = common.getValueByPath(fromObject, ['response']);\n  if (fromResponse != null) {\n    common.setValueByPath(\n      toObject,\n      ['response'],\n      generateContentResponseFromMldev(\n        fromResponse as types.GenerateContentResponse,\n      ),\n    );\n  }\n\n  const fromError = common.getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    common.setValueByPath(toObject, ['error'], fromError);\n  }\n\n  return toObject;\n}\n\nexport function listBatchJobsConfigToMldev(\n  fromObject: types.ListBatchJobsConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  if (common.getValueByPath(fromObject, ['filter']) !== undefined) {\n    throw new Error('filter parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function listBatchJobsConfigToVertex(\n  fromObject: types.ListBatchJobsConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  const fromFilter = common.getValueByPath(fromObject, ['filter']);\n  if (parentObject !== undefined && fromFilter != null) {\n    common.setValueByPath(parentObject, ['_query', 'filter'], fromFilter);\n  }\n\n  return toObject;\n}\n\nexport function listBatchJobsParametersToMldev(\n  fromObject: types.ListBatchJobsParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    listBatchJobsConfigToMldev(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function listBatchJobsParametersToVertex(\n  fromObject: types.ListBatchJobsParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    listBatchJobsConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function listBatchJobsResponseFromMldev(\n  fromObject: types.ListBatchJobsResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromNextPageToken = common.getValueByPath(fromObject, [\n    'nextPageToken',\n  ]);\n  if (fromNextPageToken != null) {\n    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n\n  const fromBatchJobs = common.getValueByPath(fromObject, ['operations']);\n  if (fromBatchJobs != null) {\n    let transformedList = fromBatchJobs;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return batchJobFromMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['batchJobs'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function listBatchJobsResponseFromVertex(\n  fromObject: types.ListBatchJobsResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromNextPageToken = common.getValueByPath(fromObject, [\n    'nextPageToken',\n  ]);\n  if (fromNextPageToken != null) {\n    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n\n  const fromBatchJobs = common.getValueByPath(fromObject, [\n    'batchPredictionJobs',\n  ]);\n  if (fromBatchJobs != null) {\n    let transformedList = fromBatchJobs;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return batchJobFromVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['batchJobs'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function partToMldev(fromObject: types.Part): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVideoMetadata = common.getValueByPath(fromObject, [\n    'videoMetadata',\n  ]);\n  if (fromVideoMetadata != null) {\n    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n\n  const fromThought = common.getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    common.setValueByPath(toObject, ['thought'], fromThought);\n  }\n\n  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    common.setValueByPath(\n      toObject,\n      ['inlineData'],\n      blobToMldev(fromInlineData),\n    );\n  }\n\n  const fromFileData = common.getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    common.setValueByPath(\n      toObject,\n      ['fileData'],\n      fileDataToMldev(fromFileData),\n    );\n  }\n\n  const fromThoughtSignature = common.getValueByPath(fromObject, [\n    'thoughtSignature',\n  ]);\n  if (fromThoughtSignature != null) {\n    common.setValueByPath(toObject, ['thoughtSignature'], fromThoughtSignature);\n  }\n\n  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n\n  const fromCodeExecutionResult = common.getValueByPath(fromObject, [\n    'codeExecutionResult',\n  ]);\n  if (fromCodeExecutionResult != null) {\n    common.setValueByPath(\n      toObject,\n      ['codeExecutionResult'],\n      fromCodeExecutionResult,\n    );\n  }\n\n  const fromExecutableCode = common.getValueByPath(fromObject, [\n    'executableCode',\n  ]);\n  if (fromExecutableCode != null) {\n    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n\n  const fromFunctionResponse = common.getValueByPath(fromObject, [\n    'functionResponse',\n  ]);\n  if (fromFunctionResponse != null) {\n    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  return toObject;\n}\n\nexport function safetySettingToMldev(\n  fromObject: types.SafetySetting,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['method']) !== undefined) {\n    throw new Error('method parameter is not supported in Gemini API.');\n  }\n\n  const fromCategory = common.getValueByPath(fromObject, ['category']);\n  if (fromCategory != null) {\n    common.setValueByPath(toObject, ['category'], fromCategory);\n  }\n\n  const fromThreshold = common.getValueByPath(fromObject, ['threshold']);\n  if (fromThreshold != null) {\n    common.setValueByPath(toObject, ['threshold'], fromThreshold);\n  }\n\n  return toObject;\n}\n\nexport function toolToMldev(fromObject: types.Tool): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionDeclarations = common.getValueByPath(fromObject, [\n    'functionDeclarations',\n  ]);\n  if (fromFunctionDeclarations != null) {\n    let transformedList = fromFunctionDeclarations;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['functionDeclarations'], transformedList);\n  }\n\n  if (common.getValueByPath(fromObject, ['retrieval']) !== undefined) {\n    throw new Error('retrieval parameter is not supported in Gemini API.');\n  }\n\n  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearch'],\n      googleSearchToMldev(fromGoogleSearch),\n    );\n  }\n\n  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [\n    'googleSearchRetrieval',\n  ]);\n  if (fromGoogleSearchRetrieval != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearchRetrieval'],\n      fromGoogleSearchRetrieval,\n    );\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['enterpriseWebSearch']) !== undefined\n  ) {\n    throw new Error(\n      'enterpriseWebSearch parameter is not supported in Gemini API.',\n    );\n  }\n\n  const fromGoogleMaps = common.getValueByPath(fromObject, ['googleMaps']);\n  if (fromGoogleMaps != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleMaps'],\n      googleMapsToMldev(fromGoogleMaps),\n    );\n  }\n\n  const fromUrlContext = common.getValueByPath(fromObject, ['urlContext']);\n  if (fromUrlContext != null) {\n    common.setValueByPath(toObject, ['urlContext'], fromUrlContext);\n  }\n\n  const fromComputerUse = common.getValueByPath(fromObject, ['computerUse']);\n  if (fromComputerUse != null) {\n    common.setValueByPath(toObject, ['computerUse'], fromComputerUse);\n  }\n\n  const fromCodeExecution = common.getValueByPath(fromObject, [\n    'codeExecution',\n  ]);\n  if (fromCodeExecution != null) {\n    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n\n  return toObject;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Pagers for the GenAI List APIs.\n */\n\nimport * as types from '../src/types';\n\nexport enum PagedItem {\n  PAGED_ITEM_BATCH_JOBS = 'batchJobs',\n  PAGED_ITEM_MODELS = 'models',\n  PAGED_ITEM_TUNING_JOBS = 'tuningJobs',\n  PAGED_ITEM_FILES = 'files',\n  PAGED_ITEM_CACHED_CONTENTS = 'cachedContents',\n}\n\ninterface PagedItemConfig {\n  config?: {\n    pageToken?: string;\n    pageSize?: number;\n  };\n}\n\ninterface PagedItemResponse<T> {\n  nextPageToken?: string;\n  sdkHttpResponse?: types.HttpResponse;\n  batchJobs?: T[];\n  models?: T[];\n  tuningJobs?: T[];\n  files?: T[];\n  cachedContents?: T[];\n}\n\n/**\n * Pager class for iterating through paginated results.\n */\nexport class Pager<T> implements AsyncIterable<T> {\n  private nameInternal!: PagedItem;\n  private pageInternal: T[] = [];\n  private paramsInternal: PagedItemConfig = {};\n  private pageInternalSize!: number;\n  private sdkHttpResponseInternal?: types.HttpResponse;\n  protected requestInternal!: (\n    params: PagedItemConfig,\n  ) => Promise<PagedItemResponse<T>>;\n  protected idxInternal!: number;\n\n  constructor(\n    name: PagedItem,\n    request: (params: PagedItemConfig) => Promise<PagedItemResponse<T>>,\n    response: PagedItemResponse<T>,\n    params: PagedItemConfig,\n  ) {\n    this.requestInternal = request;\n    this.init(name, response, params);\n  }\n\n  private init(\n    name: PagedItem,\n    response: PagedItemResponse<T>,\n    params: PagedItemConfig,\n  ) {\n    this.nameInternal = name;\n    this.pageInternal = response[this.nameInternal] || [];\n\n    this.sdkHttpResponseInternal = response?.sdkHttpResponse;\n    this.idxInternal = 0;\n    let requestParams: PagedItemConfig = {config: {}};\n    if (!params || Object.keys(params).length === 0) {\n      requestParams = {config: {}};\n    } else if (typeof params === 'object') {\n      requestParams = {...params};\n    } else {\n      requestParams = params;\n    }\n    if (requestParams['config']) {\n      requestParams['config']['pageToken'] = response['nextPageToken'];\n    }\n    this.paramsInternal = requestParams;\n    this.pageInternalSize =\n      requestParams['config']?.['pageSize'] ?? this.pageInternal.length;\n  }\n\n  private initNextPage(response: PagedItemResponse<T>): void {\n    this.init(this.nameInternal, response, this.paramsInternal);\n  }\n\n  /**\n   * Returns the current page, which is a list of items.\n   *\n   * @remarks\n   * The first page is retrieved when the pager is created. The returned list of\n   * items could be a subset of the entire list.\n   */\n  get page(): T[] {\n    return this.pageInternal;\n  }\n\n  /**\n   * Returns the type of paged item (for example, ``batch_jobs``).\n   */\n  get name(): PagedItem {\n    return this.nameInternal;\n  }\n\n  /**\n   * Returns the length of the page fetched each time by this pager.\n   *\n   * @remarks\n   * The number of items in the page is less than or equal to the page length.\n   */\n  get pageSize(): number {\n    return this.pageInternalSize;\n  }\n\n  /**\n   * Returns the headers of the API response.\n   */\n  get sdkHttpResponse(): types.HttpResponse | undefined {\n    return this.sdkHttpResponseInternal;\n  }\n\n  /**\n   * Returns the parameters when making the API request for the next page.\n   *\n   * @remarks\n   * Parameters contain a set of optional configs that can be\n   * used to customize the API request. For example, the `pageToken` parameter\n   * contains the token to request the next page.\n   */\n  get params(): PagedItemConfig {\n    return this.paramsInternal;\n  }\n\n  /**\n   * Returns the total number of items in the current page.\n   */\n  get pageLength(): number {\n    return this.pageInternal.length;\n  }\n\n  /**\n   * Returns the item at the given index.\n   */\n  getItem(index: number): T {\n    return this.pageInternal[index];\n  }\n\n  /**\n   * Returns an async iterator that support iterating through all items\n   * retrieved from the API.\n   *\n   * @remarks\n   * The iterator will automatically fetch the next page if there are more items\n   * to fetch from the API.\n   *\n   * @example\n   *\n   * ```ts\n   * const pager = await ai.files.list({config: {pageSize: 10}});\n   * for await (const file of pager) {\n   *   console.log(file.name);\n   * }\n   * ```\n   */\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return {\n      next: async () => {\n        if (this.idxInternal >= this.pageLength) {\n          if (this.hasNextPage()) {\n            await this.nextPage();\n          } else {\n            return {value: undefined, done: true};\n          }\n        }\n        const item = this.getItem(this.idxInternal);\n        this.idxInternal += 1;\n        return {value: item, done: false};\n      },\n      return: async () => {\n        return {value: undefined, done: true};\n      },\n    };\n  }\n\n  /**\n   * Fetches the next page of items. This makes a new API request.\n   *\n   * @throws {Error} If there are no more pages to fetch.\n   *\n   * @example\n   *\n   * ```ts\n   * const pager = await ai.files.list({config: {pageSize: 10}});\n   * let page = pager.page;\n   * while (true) {\n   *   for (const file of page) {\n   *     console.log(file.name);\n   *   }\n   *   if (!pager.hasNextPage()) {\n   *     break;\n   *   }\n   *   page = await pager.nextPage();\n   * }\n   * ```\n   */\n  async nextPage(): Promise<T[]> {\n    if (!this.hasNextPage()) {\n      throw new Error('No more pages to fetch.');\n    }\n    const response = await this.requestInternal(this.params);\n    this.initNextPage(response);\n    return this.page;\n  }\n\n  /**\n   * Returns true if there are more pages to fetch from the API.\n   */\n  hasNextPage(): boolean {\n    if (this.params['config']?.['pageToken'] !== undefined) {\n      return true;\n    }\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from './_api_client.js';\nimport * as common from './_common.js';\nimport {BaseModule} from './_common.js';\nimport * as converters from './converters/_batches_converters.js';\nimport {PagedItem, Pager} from './pagers.js';\nimport * as types from './types.js';\n\nexport class Batches extends BaseModule {\n  constructor(private readonly apiClient: ApiClient) {\n    super();\n  }\n\n  /**\n   * Create batch job.\n   *\n   * @param params - The parameters for create batch job request.\n   * @return The created batch job.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.batches.create({\n   *   model: 'gemini-2.0-flash',\n   *   src: {gcsUri: 'gs://bucket/path/to/file.jsonl', format: 'jsonl'},\n   *   config: {\n   *     dest: {gcsUri: 'gs://bucket/path/output/directory', format: 'jsonl'},\n   *   }\n   * });\n   * console.log(response);\n   * ```\n   */\n  create = async (\n    params: types.CreateBatchJobParameters,\n  ): Promise<types.BatchJob> => {\n    if (this.apiClient.isVertexAI()) {\n      // Format destination if not provided\n      // Cast params.src as Vertex AI path does not handle InlinedRequest[]\n      params.config = this.formatDestination(\n        params.src as string | types.BatchJobSource,\n        params.config,\n      );\n    }\n    return this.createInternal(params);\n  };\n\n  /**\n   * **Experimental** Creates an embedding batch job.\n   *\n   * @param params - The parameters for create embedding batch job request.\n   * @return The created batch job.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.batches.createEmbeddings({\n   *   model: 'text-embedding-004',\n   *   src: {fileName: 'files/my_embedding_input'},\n   * });\n   * console.log(response);\n   * ```\n   */\n  createEmbeddings = async (\n    params: types.CreateEmbeddingsBatchJobParameters,\n  ): Promise<types.BatchJob> => {\n    console.warn(\n      'batches.createEmbeddings() is experimental and may change without notice.',\n    );\n\n    if (this.apiClient.isVertexAI()) {\n      throw new Error('Vertex AI does not support batches.createEmbeddings.');\n    }\n\n    return this.createEmbeddingsInternal(params);\n  };\n\n  /**\n   * Lists batch job configurations.\n   *\n   * @param params - The parameters for the list request.\n   * @return The paginated results of the list of batch jobs.\n   *\n   * @example\n   * ```ts\n   * const batchJobs = await ai.batches.list({config: {'pageSize': 2}});\n   * for await (const batchJob of batchJobs) {\n   *   console.log(batchJob);\n   * }\n   * ```\n   */\n  list = async (\n    params: types.ListBatchJobsParameters = {},\n  ): Promise<Pager<types.BatchJob>> => {\n    return new Pager<types.BatchJob>(\n      PagedItem.PAGED_ITEM_BATCH_JOBS,\n      (x: types.ListBatchJobsParameters) => this.listInternal(x),\n      await this.listInternal(params),\n      params,\n    );\n  };\n\n  // Helper function to handle inlined generate content requests\n  private createInlinedGenerateContentRequest(\n    params: types.CreateBatchJobParameters,\n  ): {path: string; body: Record<string, unknown>} {\n    const body = converters.createBatchJobParametersToMldev(\n      this.apiClient, // Use instance apiClient\n      params,\n    );\n\n    const urlParams = body['_url'] as Record<string, unknown>;\n    const path = common.formatMap('{model}:batchGenerateContent', urlParams);\n\n    const batch = body['batch'] as {[key: string]: unknown};\n    const inputConfig = batch['inputConfig'] as {[key: string]: unknown};\n    const requestsWrapper = inputConfig['requests'] as {\n      [key: string]: unknown;\n    };\n    const requests = requestsWrapper['requests'] as Array<{\n      [key: string]: unknown;\n    }>;\n    const newRequests = [];\n\n    for (const request of requests) {\n      const requestDict = {...request}; // Clone\n      if (requestDict['systemInstruction']) {\n        const systemInstructionValue = requestDict['systemInstruction'];\n        delete requestDict['systemInstruction'];\n        const requestContent = requestDict['request'] as {\n          [key: string]: unknown;\n        };\n        requestContent['systemInstruction'] = systemInstructionValue;\n        requestDict['request'] = requestContent;\n      }\n      newRequests.push(requestDict);\n    }\n    requestsWrapper['requests'] = newRequests;\n\n    delete body['config'];\n    delete body['_url'];\n    delete body['_query'];\n\n    return {path, body};\n  }\n\n  // Helper function to get the first GCS URI\n  private getGcsUri(src: string | types.BatchJobSource): string | undefined {\n    if (typeof src === 'string') {\n      return src.startsWith('gs://') ? src : undefined;\n    }\n    if (!Array.isArray(src) && src.gcsUri && src.gcsUri.length > 0) {\n      return src.gcsUri[0];\n    }\n    return undefined;\n  }\n\n  // Helper function to get the BigQuery URI\n  private getBigqueryUri(\n    src: string | types.BatchJobSource,\n  ): string | undefined {\n    if (typeof src === 'string') {\n      return src.startsWith('bq://') ? src : undefined;\n    }\n    if (!Array.isArray(src)) {\n      return src.bigqueryUri;\n    }\n    return undefined;\n  }\n\n  // Function to format the destination configuration for Vertex AI\n  private formatDestination(\n    src: string | types.BatchJobSource,\n    config?: types.CreateBatchJobConfig,\n  ): types.CreateBatchJobConfig {\n    const newConfig = config ? {...config} : {};\n\n    const timestampStr = Date.now().toString();\n\n    if (!newConfig.displayName) {\n      newConfig.displayName = `genaiBatchJob_${timestampStr}`;\n    }\n\n    if (newConfig.dest === undefined) {\n      const gcsUri = this.getGcsUri(src);\n      const bigqueryUri = this.getBigqueryUri(src);\n\n      if (gcsUri) {\n        if (gcsUri.endsWith('.jsonl')) {\n          // For .jsonl files, remove suffix and add /dest\n          newConfig.dest = `${gcsUri.slice(0, -6)}/dest`;\n        } else {\n          // Fallback for other GCS URIs\n          newConfig.dest = `${gcsUri}_dest_${timestampStr}`;\n        }\n      } else if (bigqueryUri) {\n        newConfig.dest = `${bigqueryUri}_dest_${timestampStr}`;\n      } else {\n        throw new Error(\n          'Unsupported source for Vertex AI: No GCS or BigQuery URI found.',\n        );\n      }\n    }\n    return newConfig;\n  }\n\n  /**\n   * Internal method to create batch job.\n   *\n   * @param params - The parameters for create batch job request.\n   * @return The created batch job.\n   *\n   */\n  private async createInternal(\n    params: types.CreateBatchJobParameters,\n  ): Promise<types.BatchJob> {\n    let response: Promise<types.BatchJob>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.createBatchJobParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        'batchPredictionJobs',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.BatchJob>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.batchJobFromVertex(apiResponse);\n\n        return resp as types.BatchJob;\n      });\n    } else {\n      const body = converters.createBatchJobParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:batchGenerateContent',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.BatchJob>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.batchJobFromMldev(apiResponse);\n\n        return resp as types.BatchJob;\n      });\n    }\n  }\n\n  /**\n   * Internal method to create batch job.\n   *\n   * @param params - The parameters for create batch job request.\n   * @return The created batch job.\n   *\n   */\n  private async createEmbeddingsInternal(\n    params: types.CreateEmbeddingsBatchJobParameters,\n  ): Promise<types.BatchJob> {\n    let response: Promise<types.BatchJob>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      throw new Error(\n        'This method is only supported by the Gemini Developer API.',\n      );\n    } else {\n      const body = converters.createEmbeddingsBatchJobParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:asyncBatchEmbedContent',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.BatchJob>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.batchJobFromMldev(apiResponse);\n\n        return resp as types.BatchJob;\n      });\n    }\n  }\n\n  /**\n   * Gets batch job configurations.\n   *\n   * @param params - The parameters for the get request.\n   * @return The batch job.\n   *\n   * @example\n   * ```ts\n   * await ai.batches.get({name: '...'}); // The server-generated resource name.\n   * ```\n   */\n  async get(params: types.GetBatchJobParameters): Promise<types.BatchJob> {\n    let response: Promise<types.BatchJob>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.getBatchJobParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        'batchPredictionJobs/{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.BatchJob>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.batchJobFromVertex(apiResponse);\n\n        return resp as types.BatchJob;\n      });\n    } else {\n      const body = converters.getBatchJobParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        'batches/{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.BatchJob>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.batchJobFromMldev(apiResponse);\n\n        return resp as types.BatchJob;\n      });\n    }\n  }\n\n  /**\n   * Cancels a batch job.\n   *\n   * @param params - The parameters for the cancel request.\n   * @return The empty response returned by the API.\n   *\n   * @example\n   * ```ts\n   * await ai.batches.cancel({name: '...'}); // The server-generated resource name.\n   * ```\n   */\n  async cancel(params: types.CancelBatchJobParameters): Promise<void> {\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.cancelBatchJobParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        'batchPredictionJobs/{name}:cancel',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      await this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: params.config?.httpOptions,\n        abortSignal: params.config?.abortSignal,\n      });\n    } else {\n      const body = converters.cancelBatchJobParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        'batches/{name}:cancel',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      await this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: params.config?.httpOptions,\n        abortSignal: params.config?.abortSignal,\n      });\n    }\n  }\n\n  private async listInternal(\n    params: types.ListBatchJobsParameters,\n  ): Promise<types.ListBatchJobsResponse> {\n    let response: Promise<types.ListBatchJobsResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.listBatchJobsParametersToVertex(params);\n      path = common.formatMap(\n        'batchPredictionJobs',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.ListBatchJobsResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.ListBatchJobsResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.listBatchJobsResponseFromVertex(apiResponse);\n        const typedResp = new types.ListBatchJobsResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = converters.listBatchJobsParametersToMldev(params);\n      path = common.formatMap(\n        'batches',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.ListBatchJobsResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.ListBatchJobsResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.listBatchJobsResponseFromMldev(apiResponse);\n        const typedResp = new types.ListBatchJobsResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Deletes a batch job.\n   *\n   * @param params - The parameters for the delete request.\n   * @return The empty response returned by the API.\n   *\n   * @example\n   * ```ts\n   * await ai.batches.delete({name: '...'}); // The server-generated resource name.\n   * ```\n   */\n  async delete(\n    params: types.DeleteBatchJobParameters,\n  ): Promise<types.DeleteResourceJob> {\n    let response: Promise<types.DeleteResourceJob>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.deleteBatchJobParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        'batchPredictionJobs/{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'DELETE',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.DeleteResourceJob;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.DeleteResourceJob>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.deleteResourceJobFromVertex(apiResponse);\n\n        return resp as types.DeleteResourceJob;\n      });\n    } else {\n      const body = converters.deleteBatchJobParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        'batches/{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'DELETE',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.DeleteResourceJob;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.DeleteResourceJob>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.deleteResourceJobFromMldev(apiResponse);\n\n        return resp as types.DeleteResourceJob;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from '../_api_client.js';\nimport * as common from '../_common.js';\nimport * as t from '../_transformers.js';\nimport type * as types from '../types.js';\n\nexport function blobToMldev(fromObject: types.Blob): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['displayName']) !== undefined) {\n    throw new Error('displayName parameter is not supported in Gemini API.');\n  }\n\n  const fromData = common.getValueByPath(fromObject, ['data']);\n  if (fromData != null) {\n    common.setValueByPath(toObject, ['data'], fromData);\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function contentToMldev(\n  fromObject: types.Content,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromParts = common.getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    let transformedList = fromParts;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return partToMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['parts'], transformedList);\n  }\n\n  const fromRole = common.getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    common.setValueByPath(toObject, ['role'], fromRole);\n  }\n\n  return toObject;\n}\n\nexport function createCachedContentConfigToMldev(\n  fromObject: types.CreateCachedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTtl = common.getValueByPath(fromObject, ['ttl']);\n  if (parentObject !== undefined && fromTtl != null) {\n    common.setValueByPath(parentObject, ['ttl'], fromTtl);\n  }\n\n  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (parentObject !== undefined && fromDisplayName != null) {\n    common.setValueByPath(parentObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (parentObject !== undefined && fromContents != null) {\n    let transformedList = t.tContents(fromContents);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return contentToMldev(item);\n      });\n    }\n    common.setValueByPath(parentObject, ['contents'], transformedList);\n  }\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['systemInstruction'],\n      contentToMldev(t.tContent(fromSystemInstruction)),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    let transformedList = fromTools;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return toolToMldev(item);\n      });\n    }\n    common.setValueByPath(parentObject, ['tools'], transformedList);\n  }\n\n  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    common.setValueByPath(parentObject, ['toolConfig'], fromToolConfig);\n  }\n\n  if (common.getValueByPath(fromObject, ['kmsKeyName']) !== undefined) {\n    throw new Error('kmsKeyName parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function createCachedContentConfigToVertex(\n  fromObject: types.CreateCachedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTtl = common.getValueByPath(fromObject, ['ttl']);\n  if (parentObject !== undefined && fromTtl != null) {\n    common.setValueByPath(parentObject, ['ttl'], fromTtl);\n  }\n\n  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (parentObject !== undefined && fromDisplayName != null) {\n    common.setValueByPath(parentObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (parentObject !== undefined && fromContents != null) {\n    let transformedList = t.tContents(fromContents);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(parentObject, ['contents'], transformedList);\n  }\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['systemInstruction'],\n      t.tContent(fromSystemInstruction),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    let transformedList = fromTools;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return toolToVertex(item);\n      });\n    }\n    common.setValueByPath(parentObject, ['tools'], transformedList);\n  }\n\n  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    common.setValueByPath(parentObject, ['toolConfig'], fromToolConfig);\n  }\n\n  const fromKmsKeyName = common.getValueByPath(fromObject, ['kmsKeyName']);\n  if (parentObject !== undefined && fromKmsKeyName != null) {\n    common.setValueByPath(\n      parentObject,\n      ['encryption_spec', 'kmsKeyName'],\n      fromKmsKeyName,\n    );\n  }\n\n  return toObject;\n}\n\nexport function createCachedContentParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.CreateCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['model'],\n      t.tCachesModel(apiClient, fromModel),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    createCachedContentConfigToMldev(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function createCachedContentParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.CreateCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['model'],\n      t.tCachesModel(apiClient, fromModel),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    createCachedContentConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function deleteCachedContentParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.DeleteCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tCachedContentName(apiClient, fromName),\n    );\n  }\n\n  return toObject;\n}\n\nexport function deleteCachedContentParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.DeleteCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tCachedContentName(apiClient, fromName),\n    );\n  }\n\n  return toObject;\n}\n\nexport function deleteCachedContentResponseFromMldev(\n  fromObject: types.DeleteCachedContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  return toObject;\n}\n\nexport function deleteCachedContentResponseFromVertex(\n  fromObject: types.DeleteCachedContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  return toObject;\n}\n\nexport function fileDataToMldev(\n  fromObject: types.FileData,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['displayName']) !== undefined) {\n    throw new Error('displayName parameter is not supported in Gemini API.');\n  }\n\n  const fromFileUri = common.getValueByPath(fromObject, ['fileUri']);\n  if (fromFileUri != null) {\n    common.setValueByPath(toObject, ['fileUri'], fromFileUri);\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function functionDeclarationToVertex(\n  fromObject: types.FunctionDeclaration,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['behavior']) !== undefined) {\n    throw new Error('behavior parameter is not supported in Vertex AI.');\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromParameters = common.getValueByPath(fromObject, ['parameters']);\n  if (fromParameters != null) {\n    common.setValueByPath(toObject, ['parameters'], fromParameters);\n  }\n\n  const fromParametersJsonSchema = common.getValueByPath(fromObject, [\n    'parametersJsonSchema',\n  ]);\n  if (fromParametersJsonSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['parametersJsonSchema'],\n      fromParametersJsonSchema,\n    );\n  }\n\n  const fromResponse = common.getValueByPath(fromObject, ['response']);\n  if (fromResponse != null) {\n    common.setValueByPath(toObject, ['response'], fromResponse);\n  }\n\n  const fromResponseJsonSchema = common.getValueByPath(fromObject, [\n    'responseJsonSchema',\n  ]);\n  if (fromResponseJsonSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseJsonSchema'],\n      fromResponseJsonSchema,\n    );\n  }\n\n  return toObject;\n}\n\nexport function getCachedContentParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GetCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tCachedContentName(apiClient, fromName),\n    );\n  }\n\n  return toObject;\n}\n\nexport function getCachedContentParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GetCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tCachedContentName(apiClient, fromName),\n    );\n  }\n\n  return toObject;\n}\n\nexport function googleMapsToMldev(\n  fromObject: types.GoogleMaps,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['authConfig']) !== undefined) {\n    throw new Error('authConfig parameter is not supported in Gemini API.');\n  }\n\n  const fromEnableWidget = common.getValueByPath(fromObject, ['enableWidget']);\n  if (fromEnableWidget != null) {\n    common.setValueByPath(toObject, ['enableWidget'], fromEnableWidget);\n  }\n\n  return toObject;\n}\n\nexport function googleSearchToMldev(\n  fromObject: types.GoogleSearch,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTimeRangeFilter = common.getValueByPath(fromObject, [\n    'timeRangeFilter',\n  ]);\n  if (fromTimeRangeFilter != null) {\n    common.setValueByPath(toObject, ['timeRangeFilter'], fromTimeRangeFilter);\n  }\n\n  if (common.getValueByPath(fromObject, ['excludeDomains']) !== undefined) {\n    throw new Error('excludeDomains parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function listCachedContentsConfigToMldev(\n  fromObject: types.ListCachedContentsConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  return toObject;\n}\n\nexport function listCachedContentsConfigToVertex(\n  fromObject: types.ListCachedContentsConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  return toObject;\n}\n\nexport function listCachedContentsParametersToMldev(\n  fromObject: types.ListCachedContentsParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    listCachedContentsConfigToMldev(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function listCachedContentsParametersToVertex(\n  fromObject: types.ListCachedContentsParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    listCachedContentsConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function listCachedContentsResponseFromMldev(\n  fromObject: types.ListCachedContentsResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromNextPageToken = common.getValueByPath(fromObject, [\n    'nextPageToken',\n  ]);\n  if (fromNextPageToken != null) {\n    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n\n  const fromCachedContents = common.getValueByPath(fromObject, [\n    'cachedContents',\n  ]);\n  if (fromCachedContents != null) {\n    let transformedList = fromCachedContents;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['cachedContents'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function listCachedContentsResponseFromVertex(\n  fromObject: types.ListCachedContentsResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromNextPageToken = common.getValueByPath(fromObject, [\n    'nextPageToken',\n  ]);\n  if (fromNextPageToken != null) {\n    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n\n  const fromCachedContents = common.getValueByPath(fromObject, [\n    'cachedContents',\n  ]);\n  if (fromCachedContents != null) {\n    let transformedList = fromCachedContents;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['cachedContents'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function partToMldev(fromObject: types.Part): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVideoMetadata = common.getValueByPath(fromObject, [\n    'videoMetadata',\n  ]);\n  if (fromVideoMetadata != null) {\n    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n\n  const fromThought = common.getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    common.setValueByPath(toObject, ['thought'], fromThought);\n  }\n\n  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    common.setValueByPath(\n      toObject,\n      ['inlineData'],\n      blobToMldev(fromInlineData),\n    );\n  }\n\n  const fromFileData = common.getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    common.setValueByPath(\n      toObject,\n      ['fileData'],\n      fileDataToMldev(fromFileData),\n    );\n  }\n\n  const fromThoughtSignature = common.getValueByPath(fromObject, [\n    'thoughtSignature',\n  ]);\n  if (fromThoughtSignature != null) {\n    common.setValueByPath(toObject, ['thoughtSignature'], fromThoughtSignature);\n  }\n\n  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n\n  const fromCodeExecutionResult = common.getValueByPath(fromObject, [\n    'codeExecutionResult',\n  ]);\n  if (fromCodeExecutionResult != null) {\n    common.setValueByPath(\n      toObject,\n      ['codeExecutionResult'],\n      fromCodeExecutionResult,\n    );\n  }\n\n  const fromExecutableCode = common.getValueByPath(fromObject, [\n    'executableCode',\n  ]);\n  if (fromExecutableCode != null) {\n    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n\n  const fromFunctionResponse = common.getValueByPath(fromObject, [\n    'functionResponse',\n  ]);\n  if (fromFunctionResponse != null) {\n    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  return toObject;\n}\n\nexport function toolToMldev(fromObject: types.Tool): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionDeclarations = common.getValueByPath(fromObject, [\n    'functionDeclarations',\n  ]);\n  if (fromFunctionDeclarations != null) {\n    let transformedList = fromFunctionDeclarations;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['functionDeclarations'], transformedList);\n  }\n\n  if (common.getValueByPath(fromObject, ['retrieval']) !== undefined) {\n    throw new Error('retrieval parameter is not supported in Gemini API.');\n  }\n\n  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearch'],\n      googleSearchToMldev(fromGoogleSearch),\n    );\n  }\n\n  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [\n    'googleSearchRetrieval',\n  ]);\n  if (fromGoogleSearchRetrieval != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearchRetrieval'],\n      fromGoogleSearchRetrieval,\n    );\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['enterpriseWebSearch']) !== undefined\n  ) {\n    throw new Error(\n      'enterpriseWebSearch parameter is not supported in Gemini API.',\n    );\n  }\n\n  const fromGoogleMaps = common.getValueByPath(fromObject, ['googleMaps']);\n  if (fromGoogleMaps != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleMaps'],\n      googleMapsToMldev(fromGoogleMaps),\n    );\n  }\n\n  const fromUrlContext = common.getValueByPath(fromObject, ['urlContext']);\n  if (fromUrlContext != null) {\n    common.setValueByPath(toObject, ['urlContext'], fromUrlContext);\n  }\n\n  const fromComputerUse = common.getValueByPath(fromObject, ['computerUse']);\n  if (fromComputerUse != null) {\n    common.setValueByPath(toObject, ['computerUse'], fromComputerUse);\n  }\n\n  const fromCodeExecution = common.getValueByPath(fromObject, [\n    'codeExecution',\n  ]);\n  if (fromCodeExecution != null) {\n    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n\n  return toObject;\n}\n\nexport function toolToVertex(fromObject: types.Tool): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionDeclarations = common.getValueByPath(fromObject, [\n    'functionDeclarations',\n  ]);\n  if (fromFunctionDeclarations != null) {\n    let transformedList = fromFunctionDeclarations;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return functionDeclarationToVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['functionDeclarations'], transformedList);\n  }\n\n  const fromRetrieval = common.getValueByPath(fromObject, ['retrieval']);\n  if (fromRetrieval != null) {\n    common.setValueByPath(toObject, ['retrieval'], fromRetrieval);\n  }\n\n  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    common.setValueByPath(toObject, ['googleSearch'], fromGoogleSearch);\n  }\n\n  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [\n    'googleSearchRetrieval',\n  ]);\n  if (fromGoogleSearchRetrieval != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearchRetrieval'],\n      fromGoogleSearchRetrieval,\n    );\n  }\n\n  const fromEnterpriseWebSearch = common.getValueByPath(fromObject, [\n    'enterpriseWebSearch',\n  ]);\n  if (fromEnterpriseWebSearch != null) {\n    common.setValueByPath(\n      toObject,\n      ['enterpriseWebSearch'],\n      fromEnterpriseWebSearch,\n    );\n  }\n\n  const fromGoogleMaps = common.getValueByPath(fromObject, ['googleMaps']);\n  if (fromGoogleMaps != null) {\n    common.setValueByPath(toObject, ['googleMaps'], fromGoogleMaps);\n  }\n\n  const fromUrlContext = common.getValueByPath(fromObject, ['urlContext']);\n  if (fromUrlContext != null) {\n    common.setValueByPath(toObject, ['urlContext'], fromUrlContext);\n  }\n\n  const fromComputerUse = common.getValueByPath(fromObject, ['computerUse']);\n  if (fromComputerUse != null) {\n    common.setValueByPath(toObject, ['computerUse'], fromComputerUse);\n  }\n\n  const fromCodeExecution = common.getValueByPath(fromObject, [\n    'codeExecution',\n  ]);\n  if (fromCodeExecution != null) {\n    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n\n  return toObject;\n}\n\nexport function updateCachedContentConfigToMldev(\n  fromObject: types.UpdateCachedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTtl = common.getValueByPath(fromObject, ['ttl']);\n  if (parentObject !== undefined && fromTtl != null) {\n    common.setValueByPath(parentObject, ['ttl'], fromTtl);\n  }\n\n  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n\n  return toObject;\n}\n\nexport function updateCachedContentConfigToVertex(\n  fromObject: types.UpdateCachedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTtl = common.getValueByPath(fromObject, ['ttl']);\n  if (parentObject !== undefined && fromTtl != null) {\n    common.setValueByPath(parentObject, ['ttl'], fromTtl);\n  }\n\n  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n\n  return toObject;\n}\n\nexport function updateCachedContentParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.UpdateCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tCachedContentName(apiClient, fromName),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    updateCachedContentConfigToMldev(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function updateCachedContentParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.UpdateCachedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tCachedContentName(apiClient, fromName),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    updateCachedContentConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from './_api_client.js';\nimport * as common from './_common.js';\nimport {BaseModule} from './_common.js';\nimport * as converters from './converters/_caches_converters.js';\nimport {PagedItem, Pager} from './pagers.js';\nimport * as types from './types.js';\n\nexport class Caches extends BaseModule {\n  constructor(private readonly apiClient: ApiClient) {\n    super();\n  }\n\n  /**\n   * Lists cached content configurations.\n   *\n   * @param params - The parameters for the list request.\n   * @return The paginated results of the list of cached contents.\n   *\n   * @example\n   * ```ts\n   * const cachedContents = await ai.caches.list({config: {'pageSize': 2}});\n   * for await (const cachedContent of cachedContents) {\n   *   console.log(cachedContent);\n   * }\n   * ```\n   */\n  list = async (\n    params: types.ListCachedContentsParameters = {},\n  ): Promise<Pager<types.CachedContent>> => {\n    return new Pager<types.CachedContent>(\n      PagedItem.PAGED_ITEM_CACHED_CONTENTS,\n      (x: types.ListCachedContentsParameters) => this.listInternal(x),\n      await this.listInternal(params),\n      params,\n    );\n  };\n\n  /**\n   * Creates a cached contents resource.\n   *\n   * @remarks\n   * Context caching is only supported for specific models. See [Gemini\n   * Developer API reference](https://ai.google.dev/gemini-api/docs/caching?lang=node/context-cac)\n   * and [Vertex AI reference](https://cloud.google.com/vertex-ai/generative-ai/docs/context-cache/context-cache-overview#supported_models)\n   * for more information.\n   *\n   * @param params - The parameters for the create request.\n   * @return The created cached content.\n   *\n   * @example\n   * ```ts\n   * const contents = ...; // Initialize the content to cache.\n   * const response = await ai.caches.create({\n   *   model: 'gemini-2.0-flash-001',\n   *   config: {\n   *    'contents': contents,\n   *    'displayName': 'test cache',\n   *    'systemInstruction': 'What is the sum of the two pdfs?',\n   *    'ttl': '86400s',\n   *  }\n   * });\n   * ```\n   */\n  async create(\n    params: types.CreateCachedContentParameters,\n  ): Promise<types.CachedContent> {\n    let response: Promise<types.CachedContent>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.createCachedContentParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        'cachedContents',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CachedContent>;\n\n      return response.then((resp) => {\n        return resp as types.CachedContent;\n      });\n    } else {\n      const body = converters.createCachedContentParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        'cachedContents',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CachedContent>;\n\n      return response.then((resp) => {\n        return resp as types.CachedContent;\n      });\n    }\n  }\n\n  /**\n   * Gets cached content configurations.\n   *\n   * @param params - The parameters for the get request.\n   * @return The cached content.\n   *\n   * @example\n   * ```ts\n   * await ai.caches.get({name: '...'}); // The server-generated resource name.\n   * ```\n   */\n  async get(\n    params: types.GetCachedContentParameters,\n  ): Promise<types.CachedContent> {\n    let response: Promise<types.CachedContent>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.getCachedContentParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CachedContent>;\n\n      return response.then((resp) => {\n        return resp as types.CachedContent;\n      });\n    } else {\n      const body = converters.getCachedContentParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CachedContent>;\n\n      return response.then((resp) => {\n        return resp as types.CachedContent;\n      });\n    }\n  }\n\n  /**\n   * Deletes cached content.\n   *\n   * @param params - The parameters for the delete request.\n   * @return The empty response returned by the API.\n   *\n   * @example\n   * ```ts\n   * await ai.caches.delete({name: '...'}); // The server-generated resource name.\n   * ```\n   */\n  async delete(\n    params: types.DeleteCachedContentParameters,\n  ): Promise<types.DeleteCachedContentResponse> {\n    let response: Promise<types.DeleteCachedContentResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.deleteCachedContentParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'DELETE',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.DeleteCachedContentResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.DeleteCachedContentResponse>;\n\n      return response.then((apiResponse) => {\n        const resp =\n          converters.deleteCachedContentResponseFromVertex(apiResponse);\n        const typedResp = new types.DeleteCachedContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = converters.deleteCachedContentParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'DELETE',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.DeleteCachedContentResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.DeleteCachedContentResponse>;\n\n      return response.then((apiResponse) => {\n        const resp =\n          converters.deleteCachedContentResponseFromMldev(apiResponse);\n        const typedResp = new types.DeleteCachedContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Updates cached content configurations.\n   *\n   * @param params - The parameters for the update request.\n   * @return The updated cached content.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.caches.update({\n   *   name: '...',  // The server-generated resource name.\n   *   config: {'ttl': '7600s'}\n   * });\n   * ```\n   */\n  async update(\n    params: types.UpdateCachedContentParameters,\n  ): Promise<types.CachedContent> {\n    let response: Promise<types.CachedContent>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.updateCachedContentParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'PATCH',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CachedContent>;\n\n      return response.then((resp) => {\n        return resp as types.CachedContent;\n      });\n    } else {\n      const body = converters.updateCachedContentParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'PATCH',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CachedContent>;\n\n      return response.then((resp) => {\n        return resp as types.CachedContent;\n      });\n    }\n  }\n\n  private async listInternal(\n    params: types.ListCachedContentsParameters,\n  ): Promise<types.ListCachedContentsResponse> {\n    let response: Promise<types.ListCachedContentsResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.listCachedContentsParametersToVertex(params);\n      path = common.formatMap(\n        'cachedContents',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.ListCachedContentsResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.ListCachedContentsResponse>;\n\n      return response.then((apiResponse) => {\n        const resp =\n          converters.listCachedContentsResponseFromVertex(apiResponse);\n        const typedResp = new types.ListCachedContentsResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = converters.listCachedContentsParametersToMldev(params);\n      path = common.formatMap(\n        'cachedContents',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.ListCachedContentsResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.ListCachedContentsResponse>;\n\n      return response.then((apiResponse) => {\n        const resp =\n          converters.listCachedContentsResponseFromMldev(apiResponse);\n        const typedResp = new types.ListCachedContentsResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ApiClient} from './_api_client.js';\nimport * as t from './_transformers.js';\nimport {Models} from './models.js';\nimport * as types from './types.js';\n\n/**\n * Returns true if the response is valid, false otherwise.\n */\nfunction isValidResponse(response: types.GenerateContentResponse): boolean {\n  if (response.candidates == undefined || response.candidates.length === 0) {\n    return false;\n  }\n  const content = response.candidates[0]?.content;\n  if (content === undefined) {\n    return false;\n  }\n  return isValidContent(content);\n}\n\nfunction isValidContent(content: types.Content): boolean {\n  if (content.parts === undefined || content.parts.length === 0) {\n    return false;\n  }\n  for (const part of content.parts) {\n    if (part === undefined || Object.keys(part).length === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Validates the history contains the correct roles.\n *\n * @throws Error if the history does not start with a user turn.\n * @throws Error if the history contains an invalid role.\n */\nfunction validateHistory(history: types.Content[]) {\n  // Empty history is valid.\n  if (history.length === 0) {\n    return;\n  }\n  for (const content of history) {\n    if (content.role !== 'user' && content.role !== 'model') {\n      throw new Error(`Role must be user or model, but got ${content.role}.`);\n    }\n  }\n}\n\n/**\n * Extracts the curated (valid) history from a comprehensive history.\n *\n * @remarks\n * The model may sometimes generate invalid or empty contents(e.g., due to safty\n * filters or recitation). Extracting valid turns from the history\n * ensures that subsequent requests could be accpeted by the model.\n */\nfunction extractCuratedHistory(\n  comprehensiveHistory: types.Content[],\n): types.Content[] {\n  if (comprehensiveHistory === undefined || comprehensiveHistory.length === 0) {\n    return [];\n  }\n  const curatedHistory: types.Content[] = [];\n  const length = comprehensiveHistory.length;\n  let i = 0;\n  while (i < length) {\n    if (comprehensiveHistory[i].role === 'user') {\n      curatedHistory.push(comprehensiveHistory[i]);\n      i++;\n    } else {\n      const modelOutput: types.Content[] = [];\n      let isValid = true;\n      while (i < length && comprehensiveHistory[i].role === 'model') {\n        modelOutput.push(comprehensiveHistory[i]);\n        if (isValid && !isValidContent(comprehensiveHistory[i])) {\n          isValid = false;\n        }\n        i++;\n      }\n      if (isValid) {\n        curatedHistory.push(...modelOutput);\n      } else {\n        // Remove the last user input when model content is invalid.\n        curatedHistory.pop();\n      }\n    }\n  }\n  return curatedHistory;\n}\n\n/**\n * A utility class to create a chat session.\n */\nexport class Chats {\n  private readonly modelsModule: Models;\n  private readonly apiClient: ApiClient;\n\n  constructor(modelsModule: Models, apiClient: ApiClient) {\n    this.modelsModule = modelsModule;\n    this.apiClient = apiClient;\n  }\n\n  /**\n   * Creates a new chat session.\n   *\n   * @remarks\n   * The config in the params will be used for all requests within the chat\n   * session unless overridden by a per-request `config` in\n   * @see {@link types.SendMessageParameters#config}.\n   *\n   * @param params - Parameters for creating a chat session.\n   * @returns A new chat session.\n   *\n   * @example\n   * ```ts\n   * const chat = ai.chats.create({\n   *   model: 'gemini-2.0-flash'\n   *   config: {\n   *     temperature: 0.5,\n   *     maxOutputTokens: 1024,\n   *   }\n   * });\n   * ```\n   */\n  create(params: types.CreateChatParameters) {\n    return new Chat(\n      this.apiClient,\n      this.modelsModule,\n      params.model,\n      params.config,\n      // Deep copy the history to avoid mutating the history outside of the\n      // chat session.\n      structuredClone(params.history),\n    );\n  }\n}\n\n/**\n * Chat session that enables sending messages to the model with previous\n * conversation context.\n *\n * @remarks\n * The session maintains all the turns between user and model.\n */\nexport class Chat {\n  // A promise to represent the current state of the message being sent to the\n  // model.\n  private sendPromise: Promise<void> = Promise.resolve();\n\n  constructor(\n    private readonly apiClient: ApiClient,\n    private readonly modelsModule: Models,\n    private readonly model: string,\n    private readonly config: types.GenerateContentConfig = {},\n    private history: types.Content[] = [],\n  ) {\n    validateHistory(history);\n  }\n\n  /**\n   * Sends a message to the model and returns the response.\n   *\n   * @remarks\n   * This method will wait for the previous message to be processed before\n   * sending the next message.\n   *\n   * @see {@link Chat#sendMessageStream} for streaming method.\n   * @param params - parameters for sending messages within a chat session.\n   * @returns The model's response.\n   *\n   * @example\n   * ```ts\n   * const chat = ai.chats.create({model: 'gemini-2.0-flash'});\n   * const response = await chat.sendMessage({\n   *   message: 'Why is the sky blue?'\n   * });\n   * console.log(response.text);\n   * ```\n   */\n  async sendMessage(\n    params: types.SendMessageParameters,\n  ): Promise<types.GenerateContentResponse> {\n    await this.sendPromise;\n    const inputContent = t.tContent(params.message);\n    const responsePromise = this.modelsModule.generateContent({\n      model: this.model,\n      contents: this.getHistory(true).concat(inputContent),\n      config: params.config ?? this.config,\n    });\n    this.sendPromise = (async () => {\n      const response = await responsePromise;\n      const outputContent = response.candidates?.[0]?.content;\n\n      // Because the AFC input contains the entire curated chat history in\n      // addition to the new user input, we need to truncate the AFC history\n      // to deduplicate the existing chat history.\n      const fullAutomaticFunctionCallingHistory =\n        response.automaticFunctionCallingHistory;\n      const index = this.getHistory(true).length;\n\n      let automaticFunctionCallingHistory: types.Content[] = [];\n      if (fullAutomaticFunctionCallingHistory != null) {\n        automaticFunctionCallingHistory =\n          fullAutomaticFunctionCallingHistory.slice(index) ?? [];\n      }\n\n      const modelOutput = outputContent ? [outputContent] : [];\n      this.recordHistory(\n        inputContent,\n        modelOutput,\n        automaticFunctionCallingHistory,\n      );\n      return;\n    })();\n    await this.sendPromise.catch(() => {\n      // Resets sendPromise to avoid subsequent calls failing\n      this.sendPromise = Promise.resolve();\n    });\n    return responsePromise;\n  }\n\n  /**\n   * Sends a message to the model and returns the response in chunks.\n   *\n   * @remarks\n   * This method will wait for the previous message to be processed before\n   * sending the next message.\n   *\n   * @see {@link Chat#sendMessage} for non-streaming method.\n   * @param params - parameters for sending the message.\n   * @return The model's response.\n   *\n   * @example\n   * ```ts\n   * const chat = ai.chats.create({model: 'gemini-2.0-flash'});\n   * const response = await chat.sendMessageStream({\n   *   message: 'Why is the sky blue?'\n   * });\n   * for await (const chunk of response) {\n   *   console.log(chunk.text);\n   * }\n   * ```\n   */\n  async sendMessageStream(\n    params: types.SendMessageParameters,\n  ): Promise<AsyncGenerator<types.GenerateContentResponse>> {\n    await this.sendPromise;\n    const inputContent = t.tContent(params.message);\n    const streamResponse = this.modelsModule.generateContentStream({\n      model: this.model,\n      contents: this.getHistory(true).concat(inputContent),\n      config: params.config ?? this.config,\n    });\n    // Resolve the internal tracking of send completion promise - `sendPromise`\n    // for both success and failure response. The actual failure is still\n    // propagated by the `await streamResponse`.\n    this.sendPromise = streamResponse\n      .then(() => undefined)\n      .catch(() => undefined);\n    const response = await streamResponse;\n    const result = this.processStreamResponse(response, inputContent);\n    return result;\n  }\n\n  /**\n   * Returns the chat history.\n   *\n   * @remarks\n   * The history is a list of contents alternating between user and model.\n   *\n   * There are two types of history:\n   * - The `curated history` contains only the valid turns between user and\n   * model, which will be included in the subsequent requests sent to the model.\n   * - The `comprehensive history` contains all turns, including invalid or\n   *   empty model outputs, providing a complete record of the history.\n   *\n   * The history is updated after receiving the response from the model,\n   * for streaming response, it means receiving the last chunk of the response.\n   *\n   * The `comprehensive history` is returned by default. To get the `curated\n   * history`, set the `curated` parameter to `true`.\n   *\n   * @param curated - whether to return the curated history or the comprehensive\n   *     history.\n   * @return History contents alternating between user and model for the entire\n   *     chat session.\n   */\n  getHistory(curated: boolean = false): types.Content[] {\n    const history = curated\n      ? extractCuratedHistory(this.history)\n      : this.history;\n    // Deep copy the history to avoid mutating the history outside of the\n    // chat session.\n    return structuredClone(history);\n  }\n\n  private async *processStreamResponse(\n    streamResponse: AsyncGenerator<types.GenerateContentResponse>,\n    inputContent: types.Content,\n  ) {\n    const outputContent: types.Content[] = [];\n    for await (const chunk of streamResponse) {\n      if (isValidResponse(chunk)) {\n        const content = chunk.candidates?.[0]?.content;\n        if (content !== undefined) {\n          outputContent.push(content);\n        }\n      }\n      yield chunk;\n    }\n    this.recordHistory(inputContent, outputContent);\n  }\n\n  private recordHistory(\n    userInput: types.Content,\n    modelOutput: types.Content[],\n    automaticFunctionCallingHistory?: types.Content[],\n  ) {\n    let outputContents: types.Content[] = [];\n    if (\n      modelOutput.length > 0 &&\n      modelOutput.every((content) => content.role !== undefined)\n    ) {\n      outputContents = modelOutput;\n    } else {\n      // Appends an empty content when model returns empty response, so that the\n      // history is always alternating between user and model.\n      outputContents.push({\n        role: 'model',\n        parts: [],\n      } as types.Content);\n    }\n    if (\n      automaticFunctionCallingHistory &&\n      automaticFunctionCallingHistory.length > 0\n    ) {\n      this.history.push(\n        ...extractCuratedHistory(automaticFunctionCallingHistory!),\n      );\n    } else {\n      this.history.push(userInput);\n    }\n    this.history.push(...outputContents);\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Details for errors from calling the API.\n */\nexport interface ApiErrorInfo {\n  /** The error message. */\n  message: string;\n  /** The HTTP status code. */\n  status: number;\n}\n\n/**\n * API errors raised by the GenAI API.\n */\nexport class ApiError extends Error {\n  /** HTTP status code */\n  status: number;\n\n  constructor(options: ApiErrorInfo) {\n    super(options.message);\n    this.name = 'ApiError';\n    this.status = options.status;\n    Object.setPrototypeOf(this, ApiError.prototype);\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport * as common from '../_common.js';\nimport * as t from '../_transformers.js';\nimport type * as types from '../types.js';\n\nexport function createFileParametersToMldev(\n  fromObject: types.CreateFileParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFile = common.getValueByPath(fromObject, ['file']);\n  if (fromFile != null) {\n    common.setValueByPath(toObject, ['file'], fromFile);\n  }\n\n  return toObject;\n}\n\nexport function createFileResponseFromMldev(\n  fromObject: types.CreateFileResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  return toObject;\n}\n\nexport function deleteFileParametersToMldev(\n  fromObject: types.DeleteFileParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['_url', 'file'], t.tFileName(fromName));\n  }\n\n  return toObject;\n}\n\nexport function deleteFileResponseFromMldev(\n  fromObject: types.DeleteFileResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  return toObject;\n}\n\nexport function getFileParametersToMldev(\n  fromObject: types.GetFileParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['_url', 'file'], t.tFileName(fromName));\n  }\n\n  return toObject;\n}\n\nexport function listFilesConfigToMldev(\n  fromObject: types.ListFilesConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  return toObject;\n}\n\nexport function listFilesParametersToMldev(\n  fromObject: types.ListFilesParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    listFilesConfigToMldev(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function listFilesResponseFromMldev(\n  fromObject: types.ListFilesResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromNextPageToken = common.getValueByPath(fromObject, [\n    'nextPageToken',\n  ]);\n  if (fromNextPageToken != null) {\n    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n\n  const fromFiles = common.getValueByPath(fromObject, ['files']);\n  if (fromFiles != null) {\n    let transformedList = fromFiles;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['files'], transformedList);\n  }\n\n  return toObject;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from './_api_client.js';\nimport * as common from './_common.js';\nimport {BaseModule} from './_common.js';\nimport * as converters from './converters/_files_converters.js';\nimport {PagedItem, Pager} from './pagers.js';\nimport * as types from './types.js';\n\nexport class Files extends BaseModule {\n  constructor(private readonly apiClient: ApiClient) {\n    super();\n  }\n\n  /**\n   * Lists all current project files from the service.\n   *\n   * @param params - The parameters for the list request\n   * @return The paginated results of the list of files\n   *\n   * @example\n   * The following code prints the names of all files from the service, the\n   * size of each page is 10.\n   *\n   * ```ts\n   * const listResponse = await ai.files.list({config: {'pageSize': 10}});\n   * for await (const file of listResponse) {\n   *   console.log(file.name);\n   * }\n   * ```\n   */\n  list = async (\n    params: types.ListFilesParameters = {},\n  ): Promise<Pager<types.File>> => {\n    return new Pager<types.File>(\n      PagedItem.PAGED_ITEM_FILES,\n      (x: types.ListFilesParameters) => this.listInternal(x),\n      await this.listInternal(params),\n      params,\n    );\n  };\n\n  /**\n   * Uploads a file asynchronously to the Gemini API.\n   * This method is not available in Vertex AI.\n   * Supported upload sources:\n   * - Node.js: File path (string) or Blob object.\n   * - Browser: Blob object (e.g., File).\n   *\n   * @remarks\n   * The `mimeType` can be specified in the `config` parameter. If omitted:\n   *  - For file path (string) inputs, the `mimeType` will be inferred from the\n   *     file extension.\n   *  - For Blob object inputs, the `mimeType` will be set to the Blob's `type`\n   *     property.\n   * Somex eamples for file extension to mimeType mapping:\n   * .txt -> text/plain\n   * .json -> application/json\n   * .jpg  -> image/jpeg\n   * .png -> image/png\n   * .mp3 -> audio/mpeg\n   * .mp4 -> video/mp4\n   *\n   * This section can contain multiple paragraphs and code examples.\n   *\n   * @param params - Optional parameters specified in the\n   *        `types.UploadFileParameters` interface.\n   *         @see {@link types.UploadFileParameters#config} for the optional\n   *         config in the parameters.\n   * @return A promise that resolves to a `types.File` object.\n   * @throws An error if called on a Vertex AI client.\n   * @throws An error if the `mimeType` is not provided and can not be inferred,\n   * the `mimeType` can be provided in the `params.config` parameter.\n   * @throws An error occurs if a suitable upload location cannot be established.\n   *\n   * @example\n   * The following code uploads a file to Gemini API.\n   *\n   * ```ts\n   * const file = await ai.files.upload({file: 'file.txt', config: {\n   *   mimeType: 'text/plain',\n   * }});\n   * console.log(file.name);\n   * ```\n   */\n  async upload(params: types.UploadFileParameters): Promise<types.File> {\n    if (this.apiClient.isVertexAI()) {\n      throw new Error(\n        'Vertex AI does not support uploading files. You can share files through a GCS bucket.',\n      );\n    }\n\n    return this.apiClient\n      .uploadFile(params.file, params.config)\n      .then((resp) => {\n        return resp as types.File;\n      });\n  }\n\n  /**\n   * Downloads a remotely stored file asynchronously to a location specified in\n   * the `params` object. This method only works on Node environment, to\n   * download files in the browser, use a browser compliant method like an <a>\n   * tag.\n   *\n   * @param params - The parameters for the download request.\n   *\n   * @example\n   * The following code downloads an example file named \"files/mehozpxf877d\" as\n   * \"file.txt\".\n   *\n   * ```ts\n   * await ai.files.download({file: file.name, downloadPath: 'file.txt'});\n   * ```\n   */\n\n  async download(params: types.DownloadFileParameters): Promise<void> {\n    await this.apiClient.downloadFile(params);\n  }\n\n  private async listInternal(\n    params: types.ListFilesParameters,\n  ): Promise<types.ListFilesResponse> {\n    let response: Promise<types.ListFilesResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      throw new Error(\n        'This method is only supported by the Gemini Developer API.',\n      );\n    } else {\n      const body = converters.listFilesParametersToMldev(params);\n      path = common.formatMap('files', body['_url'] as Record<string, unknown>);\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.ListFilesResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.ListFilesResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.listFilesResponseFromMldev(apiResponse);\n        const typedResp = new types.ListFilesResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  private async createInternal(\n    params: types.CreateFileParameters,\n  ): Promise<types.CreateFileResponse> {\n    let response: Promise<types.CreateFileResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      throw new Error(\n        'This method is only supported by the Gemini Developer API.',\n      );\n    } else {\n      const body = converters.createFileParametersToMldev(params);\n      path = common.formatMap(\n        'upload/v1beta/files',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.CreateFileResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.createFileResponseFromMldev(apiResponse);\n        const typedResp = new types.CreateFileResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Retrieves the file information from the service.\n   *\n   * @param params - The parameters for the get request\n   * @return The Promise that resolves to the types.File object requested.\n   *\n   * @example\n   * ```ts\n   * const config: GetFileParameters = {\n   *   name: fileName,\n   * };\n   * file = await ai.files.get(config);\n   * console.log(file.name);\n   * ```\n   */\n  async get(params: types.GetFileParameters): Promise<types.File> {\n    let response: Promise<types.File>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      throw new Error(\n        'This method is only supported by the Gemini Developer API.',\n      );\n    } else {\n      const body = converters.getFileParametersToMldev(params);\n      path = common.formatMap(\n        'files/{file}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.File>;\n\n      return response.then((resp) => {\n        return resp as types.File;\n      });\n    }\n  }\n\n  /**\n   * Deletes a remotely stored file.\n   *\n   * @param params - The parameters for the delete request.\n   * @return The DeleteFileResponse, the response for the delete method.\n   *\n   * @example\n   * The following code deletes an example file named \"files/mehozpxf877d\".\n   *\n   * ```ts\n   * await ai.files.delete({name: file.name});\n   * ```\n   */\n  async delete(\n    params: types.DeleteFileParameters,\n  ): Promise<types.DeleteFileResponse> {\n    let response: Promise<types.DeleteFileResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      throw new Error(\n        'This method is only supported by the Gemini Developer API.',\n      );\n    } else {\n      const body = converters.deleteFileParametersToMldev(params);\n      path = common.formatMap(\n        'files/{file}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'DELETE',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.DeleteFileResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.DeleteFileResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.deleteFileResponseFromMldev(apiResponse);\n        const typedResp = new types.DeleteFileResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from '../_api_client.js';\nimport * as common from '../_common.js';\nimport * as t from '../_transformers.js';\nimport type * as types from '../types.js';\n\nexport function blobToMldev(fromObject: types.Blob): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['displayName']) !== undefined) {\n    throw new Error('displayName parameter is not supported in Gemini API.');\n  }\n\n  const fromData = common.getValueByPath(fromObject, ['data']);\n  if (fromData != null) {\n    common.setValueByPath(toObject, ['data'], fromData);\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function contentToMldev(\n  fromObject: types.Content,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromParts = common.getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    let transformedList = fromParts;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return partToMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['parts'], transformedList);\n  }\n\n  const fromRole = common.getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    common.setValueByPath(toObject, ['role'], fromRole);\n  }\n\n  return toObject;\n}\n\nexport function fileDataToMldev(\n  fromObject: types.FileData,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['displayName']) !== undefined) {\n    throw new Error('displayName parameter is not supported in Gemini API.');\n  }\n\n  const fromFileUri = common.getValueByPath(fromObject, ['fileUri']);\n  if (fromFileUri != null) {\n    common.setValueByPath(toObject, ['fileUri'], fromFileUri);\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function functionDeclarationToVertex(\n  fromObject: types.FunctionDeclaration,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['behavior']) !== undefined) {\n    throw new Error('behavior parameter is not supported in Vertex AI.');\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromParameters = common.getValueByPath(fromObject, ['parameters']);\n  if (fromParameters != null) {\n    common.setValueByPath(toObject, ['parameters'], fromParameters);\n  }\n\n  const fromParametersJsonSchema = common.getValueByPath(fromObject, [\n    'parametersJsonSchema',\n  ]);\n  if (fromParametersJsonSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['parametersJsonSchema'],\n      fromParametersJsonSchema,\n    );\n  }\n\n  const fromResponse = common.getValueByPath(fromObject, ['response']);\n  if (fromResponse != null) {\n    common.setValueByPath(toObject, ['response'], fromResponse);\n  }\n\n  const fromResponseJsonSchema = common.getValueByPath(fromObject, [\n    'responseJsonSchema',\n  ]);\n  if (fromResponseJsonSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseJsonSchema'],\n      fromResponseJsonSchema,\n    );\n  }\n\n  return toObject;\n}\n\nexport function generationConfigToVertex(\n  fromObject: types.GenerationConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModelSelectionConfig = common.getValueByPath(fromObject, [\n    'modelSelectionConfig',\n  ]);\n  if (fromModelSelectionConfig != null) {\n    common.setValueByPath(toObject, ['modelConfig'], fromModelSelectionConfig);\n  }\n\n  const fromAudioTimestamp = common.getValueByPath(fromObject, [\n    'audioTimestamp',\n  ]);\n  if (fromAudioTimestamp != null) {\n    common.setValueByPath(toObject, ['audioTimestamp'], fromAudioTimestamp);\n  }\n\n  const fromCandidateCount = common.getValueByPath(fromObject, [\n    'candidateCount',\n  ]);\n  if (fromCandidateCount != null) {\n    common.setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n  }\n\n  const fromEnableAffectiveDialog = common.getValueByPath(fromObject, [\n    'enableAffectiveDialog',\n  ]);\n  if (fromEnableAffectiveDialog != null) {\n    common.setValueByPath(\n      toObject,\n      ['enableAffectiveDialog'],\n      fromEnableAffectiveDialog,\n    );\n  }\n\n  const fromFrequencyPenalty = common.getValueByPath(fromObject, [\n    'frequencyPenalty',\n  ]);\n  if (fromFrequencyPenalty != null) {\n    common.setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n  }\n\n  const fromLogprobs = common.getValueByPath(fromObject, ['logprobs']);\n  if (fromLogprobs != null) {\n    common.setValueByPath(toObject, ['logprobs'], fromLogprobs);\n  }\n\n  const fromMaxOutputTokens = common.getValueByPath(fromObject, [\n    'maxOutputTokens',\n  ]);\n  if (fromMaxOutputTokens != null) {\n    common.setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n  }\n\n  const fromMediaResolution = common.getValueByPath(fromObject, [\n    'mediaResolution',\n  ]);\n  if (fromMediaResolution != null) {\n    common.setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n  }\n\n  const fromPresencePenalty = common.getValueByPath(fromObject, [\n    'presencePenalty',\n  ]);\n  if (fromPresencePenalty != null) {\n    common.setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n  }\n\n  const fromResponseJsonSchema = common.getValueByPath(fromObject, [\n    'responseJsonSchema',\n  ]);\n  if (fromResponseJsonSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseJsonSchema'],\n      fromResponseJsonSchema,\n    );\n  }\n\n  const fromResponseLogprobs = common.getValueByPath(fromObject, [\n    'responseLogprobs',\n  ]);\n  if (fromResponseLogprobs != null) {\n    common.setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n  }\n\n  const fromResponseMimeType = common.getValueByPath(fromObject, [\n    'responseMimeType',\n  ]);\n  if (fromResponseMimeType != null) {\n    common.setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n  }\n\n  const fromResponseModalities = common.getValueByPath(fromObject, [\n    'responseModalities',\n  ]);\n  if (fromResponseModalities != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseModalities'],\n      fromResponseModalities,\n    );\n  }\n\n  const fromResponseSchema = common.getValueByPath(fromObject, [\n    'responseSchema',\n  ]);\n  if (fromResponseSchema != null) {\n    common.setValueByPath(toObject, ['responseSchema'], fromResponseSchema);\n  }\n\n  const fromRoutingConfig = common.getValueByPath(fromObject, [\n    'routingConfig',\n  ]);\n  if (fromRoutingConfig != null) {\n    common.setValueByPath(toObject, ['routingConfig'], fromRoutingConfig);\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (fromSeed != null) {\n    common.setValueByPath(toObject, ['seed'], fromSeed);\n  }\n\n  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['speechConfig'],\n      speechConfigToVertex(fromSpeechConfig),\n    );\n  }\n\n  const fromStopSequences = common.getValueByPath(fromObject, [\n    'stopSequences',\n  ]);\n  if (fromStopSequences != null) {\n    common.setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n  }\n\n  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);\n  if (fromTemperature != null) {\n    common.setValueByPath(toObject, ['temperature'], fromTemperature);\n  }\n\n  const fromThinkingConfig = common.getValueByPath(fromObject, [\n    'thinkingConfig',\n  ]);\n  if (fromThinkingConfig != null) {\n    common.setValueByPath(toObject, ['thinkingConfig'], fromThinkingConfig);\n  }\n\n  const fromTopK = common.getValueByPath(fromObject, ['topK']);\n  if (fromTopK != null) {\n    common.setValueByPath(toObject, ['topK'], fromTopK);\n  }\n\n  const fromTopP = common.getValueByPath(fromObject, ['topP']);\n  if (fromTopP != null) {\n    common.setValueByPath(toObject, ['topP'], fromTopP);\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['enableEnhancedCivicAnswers']) !==\n    undefined\n  ) {\n    throw new Error(\n      'enableEnhancedCivicAnswers parameter is not supported in Vertex AI.',\n    );\n  }\n\n  return toObject;\n}\n\nexport function googleMapsToMldev(\n  fromObject: types.GoogleMaps,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['authConfig']) !== undefined) {\n    throw new Error('authConfig parameter is not supported in Gemini API.');\n  }\n\n  const fromEnableWidget = common.getValueByPath(fromObject, ['enableWidget']);\n  if (fromEnableWidget != null) {\n    common.setValueByPath(toObject, ['enableWidget'], fromEnableWidget);\n  }\n\n  return toObject;\n}\n\nexport function googleSearchToMldev(\n  fromObject: types.GoogleSearch,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTimeRangeFilter = common.getValueByPath(fromObject, [\n    'timeRangeFilter',\n  ]);\n  if (fromTimeRangeFilter != null) {\n    common.setValueByPath(toObject, ['timeRangeFilter'], fromTimeRangeFilter);\n  }\n\n  if (common.getValueByPath(fromObject, ['excludeDomains']) !== undefined) {\n    throw new Error('excludeDomains parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function liveClientContentToMldev(\n  fromObject: types.LiveClientContent,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTurns = common.getValueByPath(fromObject, ['turns']);\n  if (fromTurns != null) {\n    let transformedList = fromTurns;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return contentToMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['turns'], transformedList);\n  }\n\n  const fromTurnComplete = common.getValueByPath(fromObject, ['turnComplete']);\n  if (fromTurnComplete != null) {\n    common.setValueByPath(toObject, ['turnComplete'], fromTurnComplete);\n  }\n\n  return toObject;\n}\n\nexport function liveClientMessageToMldev(\n  fromObject: types.LiveClientMessage,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSetup = common.getValueByPath(fromObject, ['setup']);\n  if (fromSetup != null) {\n    common.setValueByPath(\n      toObject,\n      ['setup'],\n      liveClientSetupToMldev(fromSetup),\n    );\n  }\n\n  const fromClientContent = common.getValueByPath(fromObject, [\n    'clientContent',\n  ]);\n  if (fromClientContent != null) {\n    common.setValueByPath(\n      toObject,\n      ['clientContent'],\n      liveClientContentToMldev(fromClientContent),\n    );\n  }\n\n  const fromRealtimeInput = common.getValueByPath(fromObject, [\n    'realtimeInput',\n  ]);\n  if (fromRealtimeInput != null) {\n    common.setValueByPath(\n      toObject,\n      ['realtimeInput'],\n      liveClientRealtimeInputToMldev(fromRealtimeInput),\n    );\n  }\n\n  const fromToolResponse = common.getValueByPath(fromObject, ['toolResponse']);\n  if (fromToolResponse != null) {\n    common.setValueByPath(toObject, ['toolResponse'], fromToolResponse);\n  }\n\n  return toObject;\n}\n\nexport function liveClientMessageToVertex(\n  fromObject: types.LiveClientMessage,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSetup = common.getValueByPath(fromObject, ['setup']);\n  if (fromSetup != null) {\n    common.setValueByPath(\n      toObject,\n      ['setup'],\n      liveClientSetupToVertex(fromSetup),\n    );\n  }\n\n  const fromClientContent = common.getValueByPath(fromObject, [\n    'clientContent',\n  ]);\n  if (fromClientContent != null) {\n    common.setValueByPath(toObject, ['clientContent'], fromClientContent);\n  }\n\n  const fromRealtimeInput = common.getValueByPath(fromObject, [\n    'realtimeInput',\n  ]);\n  if (fromRealtimeInput != null) {\n    common.setValueByPath(\n      toObject,\n      ['realtimeInput'],\n      liveClientRealtimeInputToVertex(fromRealtimeInput),\n    );\n  }\n\n  const fromToolResponse = common.getValueByPath(fromObject, ['toolResponse']);\n  if (fromToolResponse != null) {\n    common.setValueByPath(toObject, ['toolResponse'], fromToolResponse);\n  }\n\n  return toObject;\n}\n\nexport function liveClientRealtimeInputToMldev(\n  fromObject: types.LiveClientRealtimeInput,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMediaChunks = common.getValueByPath(fromObject, ['mediaChunks']);\n  if (fromMediaChunks != null) {\n    let transformedList = fromMediaChunks;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return blobToMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['mediaChunks'], transformedList);\n  }\n\n  const fromAudio = common.getValueByPath(fromObject, ['audio']);\n  if (fromAudio != null) {\n    common.setValueByPath(toObject, ['audio'], blobToMldev(fromAudio));\n  }\n\n  const fromAudioStreamEnd = common.getValueByPath(fromObject, [\n    'audioStreamEnd',\n  ]);\n  if (fromAudioStreamEnd != null) {\n    common.setValueByPath(toObject, ['audioStreamEnd'], fromAudioStreamEnd);\n  }\n\n  const fromVideo = common.getValueByPath(fromObject, ['video']);\n  if (fromVideo != null) {\n    common.setValueByPath(toObject, ['video'], blobToMldev(fromVideo));\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  const fromActivityStart = common.getValueByPath(fromObject, [\n    'activityStart',\n  ]);\n  if (fromActivityStart != null) {\n    common.setValueByPath(toObject, ['activityStart'], fromActivityStart);\n  }\n\n  const fromActivityEnd = common.getValueByPath(fromObject, ['activityEnd']);\n  if (fromActivityEnd != null) {\n    common.setValueByPath(toObject, ['activityEnd'], fromActivityEnd);\n  }\n\n  return toObject;\n}\n\nexport function liveClientRealtimeInputToVertex(\n  fromObject: types.LiveClientRealtimeInput,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMediaChunks = common.getValueByPath(fromObject, ['mediaChunks']);\n  if (fromMediaChunks != null) {\n    let transformedList = fromMediaChunks;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['mediaChunks'], transformedList);\n  }\n\n  const fromAudio = common.getValueByPath(fromObject, ['audio']);\n  if (fromAudio != null) {\n    common.setValueByPath(toObject, ['audio'], fromAudio);\n  }\n\n  if (common.getValueByPath(fromObject, ['audioStreamEnd']) !== undefined) {\n    throw new Error('audioStreamEnd parameter is not supported in Vertex AI.');\n  }\n\n  const fromVideo = common.getValueByPath(fromObject, ['video']);\n  if (fromVideo != null) {\n    common.setValueByPath(toObject, ['video'], fromVideo);\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  const fromActivityStart = common.getValueByPath(fromObject, [\n    'activityStart',\n  ]);\n  if (fromActivityStart != null) {\n    common.setValueByPath(toObject, ['activityStart'], fromActivityStart);\n  }\n\n  const fromActivityEnd = common.getValueByPath(fromObject, ['activityEnd']);\n  if (fromActivityEnd != null) {\n    common.setValueByPath(toObject, ['activityEnd'], fromActivityEnd);\n  }\n\n  return toObject;\n}\n\nexport function liveClientSetupToMldev(\n  fromObject: types.LiveClientSetup,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(toObject, ['model'], fromModel);\n  }\n\n  const fromGenerationConfig = common.getValueByPath(fromObject, [\n    'generationConfig',\n  ]);\n  if (fromGenerationConfig != null) {\n    common.setValueByPath(toObject, ['generationConfig'], fromGenerationConfig);\n  }\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (fromSystemInstruction != null) {\n    common.setValueByPath(\n      toObject,\n      ['systemInstruction'],\n      contentToMldev(t.tContent(fromSystemInstruction)),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (fromTools != null) {\n    let transformedList = t.tTools(fromTools);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return toolToMldev(t.tTool(item));\n      });\n    }\n    common.setValueByPath(toObject, ['tools'], transformedList);\n  }\n\n  const fromRealtimeInputConfig = common.getValueByPath(fromObject, [\n    'realtimeInputConfig',\n  ]);\n  if (fromRealtimeInputConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['realtimeInputConfig'],\n      fromRealtimeInputConfig,\n    );\n  }\n\n  const fromSessionResumption = common.getValueByPath(fromObject, [\n    'sessionResumption',\n  ]);\n  if (fromSessionResumption != null) {\n    common.setValueByPath(\n      toObject,\n      ['sessionResumption'],\n      sessionResumptionConfigToMldev(fromSessionResumption),\n    );\n  }\n\n  const fromContextWindowCompression = common.getValueByPath(fromObject, [\n    'contextWindowCompression',\n  ]);\n  if (fromContextWindowCompression != null) {\n    common.setValueByPath(\n      toObject,\n      ['contextWindowCompression'],\n      fromContextWindowCompression,\n    );\n  }\n\n  const fromInputAudioTranscription = common.getValueByPath(fromObject, [\n    'inputAudioTranscription',\n  ]);\n  if (fromInputAudioTranscription != null) {\n    common.setValueByPath(\n      toObject,\n      ['inputAudioTranscription'],\n      fromInputAudioTranscription,\n    );\n  }\n\n  const fromOutputAudioTranscription = common.getValueByPath(fromObject, [\n    'outputAudioTranscription',\n  ]);\n  if (fromOutputAudioTranscription != null) {\n    common.setValueByPath(\n      toObject,\n      ['outputAudioTranscription'],\n      fromOutputAudioTranscription,\n    );\n  }\n\n  const fromProactivity = common.getValueByPath(fromObject, ['proactivity']);\n  if (fromProactivity != null) {\n    common.setValueByPath(toObject, ['proactivity'], fromProactivity);\n  }\n\n  return toObject;\n}\n\nexport function liveClientSetupToVertex(\n  fromObject: types.LiveClientSetup,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(toObject, ['model'], fromModel);\n  }\n\n  const fromGenerationConfig = common.getValueByPath(fromObject, [\n    'generationConfig',\n  ]);\n  if (fromGenerationConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['generationConfig'],\n      generationConfigToVertex(fromGenerationConfig),\n    );\n  }\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (fromSystemInstruction != null) {\n    common.setValueByPath(\n      toObject,\n      ['systemInstruction'],\n      t.tContent(fromSystemInstruction),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (fromTools != null) {\n    let transformedList = t.tTools(fromTools);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return toolToVertex(t.tTool(item));\n      });\n    }\n    common.setValueByPath(toObject, ['tools'], transformedList);\n  }\n\n  const fromRealtimeInputConfig = common.getValueByPath(fromObject, [\n    'realtimeInputConfig',\n  ]);\n  if (fromRealtimeInputConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['realtimeInputConfig'],\n      fromRealtimeInputConfig,\n    );\n  }\n\n  const fromSessionResumption = common.getValueByPath(fromObject, [\n    'sessionResumption',\n  ]);\n  if (fromSessionResumption != null) {\n    common.setValueByPath(\n      toObject,\n      ['sessionResumption'],\n      fromSessionResumption,\n    );\n  }\n\n  const fromContextWindowCompression = common.getValueByPath(fromObject, [\n    'contextWindowCompression',\n  ]);\n  if (fromContextWindowCompression != null) {\n    common.setValueByPath(\n      toObject,\n      ['contextWindowCompression'],\n      fromContextWindowCompression,\n    );\n  }\n\n  const fromInputAudioTranscription = common.getValueByPath(fromObject, [\n    'inputAudioTranscription',\n  ]);\n  if (fromInputAudioTranscription != null) {\n    common.setValueByPath(\n      toObject,\n      ['inputAudioTranscription'],\n      fromInputAudioTranscription,\n    );\n  }\n\n  const fromOutputAudioTranscription = common.getValueByPath(fromObject, [\n    'outputAudioTranscription',\n  ]);\n  if (fromOutputAudioTranscription != null) {\n    common.setValueByPath(\n      toObject,\n      ['outputAudioTranscription'],\n      fromOutputAudioTranscription,\n    );\n  }\n\n  const fromProactivity = common.getValueByPath(fromObject, ['proactivity']);\n  if (fromProactivity != null) {\n    common.setValueByPath(toObject, ['proactivity'], fromProactivity);\n  }\n\n  return toObject;\n}\n\nexport function liveConnectConfigToMldev(\n  fromObject: types.LiveConnectConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGenerationConfig = common.getValueByPath(fromObject, [\n    'generationConfig',\n  ]);\n  if (parentObject !== undefined && fromGenerationConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig'],\n      fromGenerationConfig,\n    );\n  }\n\n  const fromResponseModalities = common.getValueByPath(fromObject, [\n    'responseModalities',\n  ]);\n  if (parentObject !== undefined && fromResponseModalities != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'responseModalities'],\n      fromResponseModalities,\n    );\n  }\n\n  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);\n  if (parentObject !== undefined && fromTemperature != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'temperature'],\n      fromTemperature,\n    );\n  }\n\n  const fromTopP = common.getValueByPath(fromObject, ['topP']);\n  if (parentObject !== undefined && fromTopP != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'topP'],\n      fromTopP,\n    );\n  }\n\n  const fromTopK = common.getValueByPath(fromObject, ['topK']);\n  if (parentObject !== undefined && fromTopK != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'topK'],\n      fromTopK,\n    );\n  }\n\n  const fromMaxOutputTokens = common.getValueByPath(fromObject, [\n    'maxOutputTokens',\n  ]);\n  if (parentObject !== undefined && fromMaxOutputTokens != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'maxOutputTokens'],\n      fromMaxOutputTokens,\n    );\n  }\n\n  const fromMediaResolution = common.getValueByPath(fromObject, [\n    'mediaResolution',\n  ]);\n  if (parentObject !== undefined && fromMediaResolution != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'mediaResolution'],\n      fromMediaResolution,\n    );\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (parentObject !== undefined && fromSeed != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'seed'],\n      fromSeed,\n    );\n  }\n\n  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);\n  if (parentObject !== undefined && fromSpeechConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'speechConfig'],\n      t.tLiveSpeechConfig(fromSpeechConfig),\n    );\n  }\n\n  const fromThinkingConfig = common.getValueByPath(fromObject, [\n    'thinkingConfig',\n  ]);\n  if (parentObject !== undefined && fromThinkingConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'thinkingConfig'],\n      fromThinkingConfig,\n    );\n  }\n\n  const fromEnableAffectiveDialog = common.getValueByPath(fromObject, [\n    'enableAffectiveDialog',\n  ]);\n  if (parentObject !== undefined && fromEnableAffectiveDialog != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'enableAffectiveDialog'],\n      fromEnableAffectiveDialog,\n    );\n  }\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'systemInstruction'],\n      contentToMldev(t.tContent(fromSystemInstruction)),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    let transformedList = t.tTools(fromTools);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return toolToMldev(t.tTool(item));\n      });\n    }\n    common.setValueByPath(parentObject, ['setup', 'tools'], transformedList);\n  }\n\n  const fromSessionResumption = common.getValueByPath(fromObject, [\n    'sessionResumption',\n  ]);\n  if (parentObject !== undefined && fromSessionResumption != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'sessionResumption'],\n      sessionResumptionConfigToMldev(fromSessionResumption),\n    );\n  }\n\n  const fromInputAudioTranscription = common.getValueByPath(fromObject, [\n    'inputAudioTranscription',\n  ]);\n  if (parentObject !== undefined && fromInputAudioTranscription != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'inputAudioTranscription'],\n      fromInputAudioTranscription,\n    );\n  }\n\n  const fromOutputAudioTranscription = common.getValueByPath(fromObject, [\n    'outputAudioTranscription',\n  ]);\n  if (parentObject !== undefined && fromOutputAudioTranscription != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'outputAudioTranscription'],\n      fromOutputAudioTranscription,\n    );\n  }\n\n  const fromRealtimeInputConfig = common.getValueByPath(fromObject, [\n    'realtimeInputConfig',\n  ]);\n  if (parentObject !== undefined && fromRealtimeInputConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'realtimeInputConfig'],\n      fromRealtimeInputConfig,\n    );\n  }\n\n  const fromContextWindowCompression = common.getValueByPath(fromObject, [\n    'contextWindowCompression',\n  ]);\n  if (parentObject !== undefined && fromContextWindowCompression != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'contextWindowCompression'],\n      fromContextWindowCompression,\n    );\n  }\n\n  const fromProactivity = common.getValueByPath(fromObject, ['proactivity']);\n  if (parentObject !== undefined && fromProactivity != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'proactivity'],\n      fromProactivity,\n    );\n  }\n\n  return toObject;\n}\n\nexport function liveConnectConfigToVertex(\n  fromObject: types.LiveConnectConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGenerationConfig = common.getValueByPath(fromObject, [\n    'generationConfig',\n  ]);\n  if (parentObject !== undefined && fromGenerationConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig'],\n      generationConfigToVertex(fromGenerationConfig),\n    );\n  }\n\n  const fromResponseModalities = common.getValueByPath(fromObject, [\n    'responseModalities',\n  ]);\n  if (parentObject !== undefined && fromResponseModalities != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'responseModalities'],\n      fromResponseModalities,\n    );\n  }\n\n  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);\n  if (parentObject !== undefined && fromTemperature != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'temperature'],\n      fromTemperature,\n    );\n  }\n\n  const fromTopP = common.getValueByPath(fromObject, ['topP']);\n  if (parentObject !== undefined && fromTopP != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'topP'],\n      fromTopP,\n    );\n  }\n\n  const fromTopK = common.getValueByPath(fromObject, ['topK']);\n  if (parentObject !== undefined && fromTopK != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'topK'],\n      fromTopK,\n    );\n  }\n\n  const fromMaxOutputTokens = common.getValueByPath(fromObject, [\n    'maxOutputTokens',\n  ]);\n  if (parentObject !== undefined && fromMaxOutputTokens != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'maxOutputTokens'],\n      fromMaxOutputTokens,\n    );\n  }\n\n  const fromMediaResolution = common.getValueByPath(fromObject, [\n    'mediaResolution',\n  ]);\n  if (parentObject !== undefined && fromMediaResolution != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'mediaResolution'],\n      fromMediaResolution,\n    );\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (parentObject !== undefined && fromSeed != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'seed'],\n      fromSeed,\n    );\n  }\n\n  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);\n  if (parentObject !== undefined && fromSpeechConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'speechConfig'],\n      speechConfigToVertex(t.tLiveSpeechConfig(fromSpeechConfig)),\n    );\n  }\n\n  const fromThinkingConfig = common.getValueByPath(fromObject, [\n    'thinkingConfig',\n  ]);\n  if (parentObject !== undefined && fromThinkingConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'thinkingConfig'],\n      fromThinkingConfig,\n    );\n  }\n\n  const fromEnableAffectiveDialog = common.getValueByPath(fromObject, [\n    'enableAffectiveDialog',\n  ]);\n  if (parentObject !== undefined && fromEnableAffectiveDialog != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'enableAffectiveDialog'],\n      fromEnableAffectiveDialog,\n    );\n  }\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'systemInstruction'],\n      t.tContent(fromSystemInstruction),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    let transformedList = t.tTools(fromTools);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return toolToVertex(t.tTool(item));\n      });\n    }\n    common.setValueByPath(parentObject, ['setup', 'tools'], transformedList);\n  }\n\n  const fromSessionResumption = common.getValueByPath(fromObject, [\n    'sessionResumption',\n  ]);\n  if (parentObject !== undefined && fromSessionResumption != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'sessionResumption'],\n      fromSessionResumption,\n    );\n  }\n\n  const fromInputAudioTranscription = common.getValueByPath(fromObject, [\n    'inputAudioTranscription',\n  ]);\n  if (parentObject !== undefined && fromInputAudioTranscription != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'inputAudioTranscription'],\n      fromInputAudioTranscription,\n    );\n  }\n\n  const fromOutputAudioTranscription = common.getValueByPath(fromObject, [\n    'outputAudioTranscription',\n  ]);\n  if (parentObject !== undefined && fromOutputAudioTranscription != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'outputAudioTranscription'],\n      fromOutputAudioTranscription,\n    );\n  }\n\n  const fromRealtimeInputConfig = common.getValueByPath(fromObject, [\n    'realtimeInputConfig',\n  ]);\n  if (parentObject !== undefined && fromRealtimeInputConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'realtimeInputConfig'],\n      fromRealtimeInputConfig,\n    );\n  }\n\n  const fromContextWindowCompression = common.getValueByPath(fromObject, [\n    'contextWindowCompression',\n  ]);\n  if (parentObject !== undefined && fromContextWindowCompression != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'contextWindowCompression'],\n      fromContextWindowCompression,\n    );\n  }\n\n  const fromProactivity = common.getValueByPath(fromObject, ['proactivity']);\n  if (parentObject !== undefined && fromProactivity != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'proactivity'],\n      fromProactivity,\n    );\n  }\n\n  return toObject;\n}\n\nexport function liveConnectParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.LiveConnectParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['setup', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      liveConnectConfigToMldev(fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nexport function liveConnectParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.LiveConnectParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['setup', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      liveConnectConfigToVertex(fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nexport function liveMusicClientMessageToVertex(\n  fromObject: types.LiveMusicClientMessage,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['setup']) !== undefined) {\n    throw new Error('setup parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['clientContent']) !== undefined) {\n    throw new Error('clientContent parameter is not supported in Vertex AI.');\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['musicGenerationConfig']) !== undefined\n  ) {\n    throw new Error(\n      'musicGenerationConfig parameter is not supported in Vertex AI.',\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['playbackControl']) !== undefined) {\n    throw new Error('playbackControl parameter is not supported in Vertex AI.');\n  }\n\n  return toObject;\n}\n\nexport function liveMusicConnectParametersToMldev(\n  fromObject: types.LiveMusicConnectParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(toObject, ['setup', 'model'], fromModel);\n  }\n\n  const fromCallbacks = common.getValueByPath(fromObject, ['callbacks']);\n  if (fromCallbacks != null) {\n    common.setValueByPath(toObject, ['callbacks'], fromCallbacks);\n  }\n\n  return toObject;\n}\n\nexport function liveMusicConnectParametersToVertex(\n  fromObject: types.LiveMusicConnectParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['model']) !== undefined) {\n    throw new Error('model parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['callbacks']) !== undefined) {\n    throw new Error('callbacks parameter is not supported in Vertex AI.');\n  }\n\n  return toObject;\n}\n\nexport function liveMusicSetConfigParametersToMldev(\n  fromObject: types.LiveMusicSetConfigParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMusicGenerationConfig = common.getValueByPath(fromObject, [\n    'musicGenerationConfig',\n  ]);\n  if (fromMusicGenerationConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['musicGenerationConfig'],\n      fromMusicGenerationConfig,\n    );\n  }\n\n  return toObject;\n}\n\nexport function liveMusicSetConfigParametersToVertex(\n  fromObject: types.LiveMusicSetConfigParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (\n    common.getValueByPath(fromObject, ['musicGenerationConfig']) !== undefined\n  ) {\n    throw new Error(\n      'musicGenerationConfig parameter is not supported in Vertex AI.',\n    );\n  }\n\n  return toObject;\n}\n\nexport function liveMusicSetWeightedPromptsParametersToMldev(\n  fromObject: types.LiveMusicSetWeightedPromptsParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromWeightedPrompts = common.getValueByPath(fromObject, [\n    'weightedPrompts',\n  ]);\n  if (fromWeightedPrompts != null) {\n    let transformedList = fromWeightedPrompts;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['weightedPrompts'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function liveMusicSetWeightedPromptsParametersToVertex(\n  fromObject: types.LiveMusicSetWeightedPromptsParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['weightedPrompts']) !== undefined) {\n    throw new Error('weightedPrompts parameter is not supported in Vertex AI.');\n  }\n\n  return toObject;\n}\n\nexport function liveSendRealtimeInputParametersToMldev(\n  fromObject: types.LiveSendRealtimeInputParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMedia = common.getValueByPath(fromObject, ['media']);\n  if (fromMedia != null) {\n    let transformedList = t.tBlobs(fromMedia);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return blobToMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['mediaChunks'], transformedList);\n  }\n\n  const fromAudio = common.getValueByPath(fromObject, ['audio']);\n  if (fromAudio != null) {\n    common.setValueByPath(\n      toObject,\n      ['audio'],\n      blobToMldev(t.tAudioBlob(fromAudio)),\n    );\n  }\n\n  const fromAudioStreamEnd = common.getValueByPath(fromObject, [\n    'audioStreamEnd',\n  ]);\n  if (fromAudioStreamEnd != null) {\n    common.setValueByPath(toObject, ['audioStreamEnd'], fromAudioStreamEnd);\n  }\n\n  const fromVideo = common.getValueByPath(fromObject, ['video']);\n  if (fromVideo != null) {\n    common.setValueByPath(\n      toObject,\n      ['video'],\n      blobToMldev(t.tImageBlob(fromVideo)),\n    );\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  const fromActivityStart = common.getValueByPath(fromObject, [\n    'activityStart',\n  ]);\n  if (fromActivityStart != null) {\n    common.setValueByPath(toObject, ['activityStart'], fromActivityStart);\n  }\n\n  const fromActivityEnd = common.getValueByPath(fromObject, ['activityEnd']);\n  if (fromActivityEnd != null) {\n    common.setValueByPath(toObject, ['activityEnd'], fromActivityEnd);\n  }\n\n  return toObject;\n}\n\nexport function liveSendRealtimeInputParametersToVertex(\n  fromObject: types.LiveSendRealtimeInputParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMedia = common.getValueByPath(fromObject, ['media']);\n  if (fromMedia != null) {\n    let transformedList = t.tBlobs(fromMedia);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['mediaChunks'], transformedList);\n  }\n\n  const fromAudio = common.getValueByPath(fromObject, ['audio']);\n  if (fromAudio != null) {\n    common.setValueByPath(toObject, ['audio'], t.tAudioBlob(fromAudio));\n  }\n\n  const fromAudioStreamEnd = common.getValueByPath(fromObject, [\n    'audioStreamEnd',\n  ]);\n  if (fromAudioStreamEnd != null) {\n    common.setValueByPath(toObject, ['audioStreamEnd'], fromAudioStreamEnd);\n  }\n\n  const fromVideo = common.getValueByPath(fromObject, ['video']);\n  if (fromVideo != null) {\n    common.setValueByPath(toObject, ['video'], t.tImageBlob(fromVideo));\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  const fromActivityStart = common.getValueByPath(fromObject, [\n    'activityStart',\n  ]);\n  if (fromActivityStart != null) {\n    common.setValueByPath(toObject, ['activityStart'], fromActivityStart);\n  }\n\n  const fromActivityEnd = common.getValueByPath(fromObject, ['activityEnd']);\n  if (fromActivityEnd != null) {\n    common.setValueByPath(toObject, ['activityEnd'], fromActivityEnd);\n  }\n\n  return toObject;\n}\n\nexport function liveServerMessageFromVertex(\n  fromObject: types.LiveServerMessage,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSetupComplete = common.getValueByPath(fromObject, [\n    'setupComplete',\n  ]);\n  if (fromSetupComplete != null) {\n    common.setValueByPath(toObject, ['setupComplete'], fromSetupComplete);\n  }\n\n  const fromServerContent = common.getValueByPath(fromObject, [\n    'serverContent',\n  ]);\n  if (fromServerContent != null) {\n    common.setValueByPath(toObject, ['serverContent'], fromServerContent);\n  }\n\n  const fromToolCall = common.getValueByPath(fromObject, ['toolCall']);\n  if (fromToolCall != null) {\n    common.setValueByPath(toObject, ['toolCall'], fromToolCall);\n  }\n\n  const fromToolCallCancellation = common.getValueByPath(fromObject, [\n    'toolCallCancellation',\n  ]);\n  if (fromToolCallCancellation != null) {\n    common.setValueByPath(\n      toObject,\n      ['toolCallCancellation'],\n      fromToolCallCancellation,\n    );\n  }\n\n  const fromUsageMetadata = common.getValueByPath(fromObject, [\n    'usageMetadata',\n  ]);\n  if (fromUsageMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['usageMetadata'],\n      usageMetadataFromVertex(fromUsageMetadata),\n    );\n  }\n\n  const fromGoAway = common.getValueByPath(fromObject, ['goAway']);\n  if (fromGoAway != null) {\n    common.setValueByPath(toObject, ['goAway'], fromGoAway);\n  }\n\n  const fromSessionResumptionUpdate = common.getValueByPath(fromObject, [\n    'sessionResumptionUpdate',\n  ]);\n  if (fromSessionResumptionUpdate != null) {\n    common.setValueByPath(\n      toObject,\n      ['sessionResumptionUpdate'],\n      fromSessionResumptionUpdate,\n    );\n  }\n\n  return toObject;\n}\n\nexport function partToMldev(fromObject: types.Part): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVideoMetadata = common.getValueByPath(fromObject, [\n    'videoMetadata',\n  ]);\n  if (fromVideoMetadata != null) {\n    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n\n  const fromThought = common.getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    common.setValueByPath(toObject, ['thought'], fromThought);\n  }\n\n  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    common.setValueByPath(\n      toObject,\n      ['inlineData'],\n      blobToMldev(fromInlineData),\n    );\n  }\n\n  const fromFileData = common.getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    common.setValueByPath(\n      toObject,\n      ['fileData'],\n      fileDataToMldev(fromFileData),\n    );\n  }\n\n  const fromThoughtSignature = common.getValueByPath(fromObject, [\n    'thoughtSignature',\n  ]);\n  if (fromThoughtSignature != null) {\n    common.setValueByPath(toObject, ['thoughtSignature'], fromThoughtSignature);\n  }\n\n  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n\n  const fromCodeExecutionResult = common.getValueByPath(fromObject, [\n    'codeExecutionResult',\n  ]);\n  if (fromCodeExecutionResult != null) {\n    common.setValueByPath(\n      toObject,\n      ['codeExecutionResult'],\n      fromCodeExecutionResult,\n    );\n  }\n\n  const fromExecutableCode = common.getValueByPath(fromObject, [\n    'executableCode',\n  ]);\n  if (fromExecutableCode != null) {\n    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n\n  const fromFunctionResponse = common.getValueByPath(fromObject, [\n    'functionResponse',\n  ]);\n  if (fromFunctionResponse != null) {\n    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  return toObject;\n}\n\nexport function sessionResumptionConfigToMldev(\n  fromObject: types.SessionResumptionConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromHandle = common.getValueByPath(fromObject, ['handle']);\n  if (fromHandle != null) {\n    common.setValueByPath(toObject, ['handle'], fromHandle);\n  }\n\n  if (common.getValueByPath(fromObject, ['transparent']) !== undefined) {\n    throw new Error('transparent parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function speechConfigToVertex(\n  fromObject: types.SpeechConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVoiceConfig = common.getValueByPath(fromObject, ['voiceConfig']);\n  if (fromVoiceConfig != null) {\n    common.setValueByPath(toObject, ['voiceConfig'], fromVoiceConfig);\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['multiSpeakerVoiceConfig']) !== undefined\n  ) {\n    throw new Error(\n      'multiSpeakerVoiceConfig parameter is not supported in Vertex AI.',\n    );\n  }\n\n  const fromLanguageCode = common.getValueByPath(fromObject, ['languageCode']);\n  if (fromLanguageCode != null) {\n    common.setValueByPath(toObject, ['languageCode'], fromLanguageCode);\n  }\n\n  return toObject;\n}\n\nexport function toolToMldev(fromObject: types.Tool): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionDeclarations = common.getValueByPath(fromObject, [\n    'functionDeclarations',\n  ]);\n  if (fromFunctionDeclarations != null) {\n    let transformedList = fromFunctionDeclarations;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['functionDeclarations'], transformedList);\n  }\n\n  if (common.getValueByPath(fromObject, ['retrieval']) !== undefined) {\n    throw new Error('retrieval parameter is not supported in Gemini API.');\n  }\n\n  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearch'],\n      googleSearchToMldev(fromGoogleSearch),\n    );\n  }\n\n  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [\n    'googleSearchRetrieval',\n  ]);\n  if (fromGoogleSearchRetrieval != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearchRetrieval'],\n      fromGoogleSearchRetrieval,\n    );\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['enterpriseWebSearch']) !== undefined\n  ) {\n    throw new Error(\n      'enterpriseWebSearch parameter is not supported in Gemini API.',\n    );\n  }\n\n  const fromGoogleMaps = common.getValueByPath(fromObject, ['googleMaps']);\n  if (fromGoogleMaps != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleMaps'],\n      googleMapsToMldev(fromGoogleMaps),\n    );\n  }\n\n  const fromUrlContext = common.getValueByPath(fromObject, ['urlContext']);\n  if (fromUrlContext != null) {\n    common.setValueByPath(toObject, ['urlContext'], fromUrlContext);\n  }\n\n  const fromComputerUse = common.getValueByPath(fromObject, ['computerUse']);\n  if (fromComputerUse != null) {\n    common.setValueByPath(toObject, ['computerUse'], fromComputerUse);\n  }\n\n  const fromCodeExecution = common.getValueByPath(fromObject, [\n    'codeExecution',\n  ]);\n  if (fromCodeExecution != null) {\n    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n\n  return toObject;\n}\n\nexport function toolToVertex(fromObject: types.Tool): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionDeclarations = common.getValueByPath(fromObject, [\n    'functionDeclarations',\n  ]);\n  if (fromFunctionDeclarations != null) {\n    let transformedList = fromFunctionDeclarations;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return functionDeclarationToVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['functionDeclarations'], transformedList);\n  }\n\n  const fromRetrieval = common.getValueByPath(fromObject, ['retrieval']);\n  if (fromRetrieval != null) {\n    common.setValueByPath(toObject, ['retrieval'], fromRetrieval);\n  }\n\n  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    common.setValueByPath(toObject, ['googleSearch'], fromGoogleSearch);\n  }\n\n  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [\n    'googleSearchRetrieval',\n  ]);\n  if (fromGoogleSearchRetrieval != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearchRetrieval'],\n      fromGoogleSearchRetrieval,\n    );\n  }\n\n  const fromEnterpriseWebSearch = common.getValueByPath(fromObject, [\n    'enterpriseWebSearch',\n  ]);\n  if (fromEnterpriseWebSearch != null) {\n    common.setValueByPath(\n      toObject,\n      ['enterpriseWebSearch'],\n      fromEnterpriseWebSearch,\n    );\n  }\n\n  const fromGoogleMaps = common.getValueByPath(fromObject, ['googleMaps']);\n  if (fromGoogleMaps != null) {\n    common.setValueByPath(toObject, ['googleMaps'], fromGoogleMaps);\n  }\n\n  const fromUrlContext = common.getValueByPath(fromObject, ['urlContext']);\n  if (fromUrlContext != null) {\n    common.setValueByPath(toObject, ['urlContext'], fromUrlContext);\n  }\n\n  const fromComputerUse = common.getValueByPath(fromObject, ['computerUse']);\n  if (fromComputerUse != null) {\n    common.setValueByPath(toObject, ['computerUse'], fromComputerUse);\n  }\n\n  const fromCodeExecution = common.getValueByPath(fromObject, [\n    'codeExecution',\n  ]);\n  if (fromCodeExecution != null) {\n    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n\n  return toObject;\n}\n\nexport function usageMetadataFromVertex(\n  fromObject: types.UsageMetadata,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPromptTokenCount = common.getValueByPath(fromObject, [\n    'promptTokenCount',\n  ]);\n  if (fromPromptTokenCount != null) {\n    common.setValueByPath(toObject, ['promptTokenCount'], fromPromptTokenCount);\n  }\n\n  const fromCachedContentTokenCount = common.getValueByPath(fromObject, [\n    'cachedContentTokenCount',\n  ]);\n  if (fromCachedContentTokenCount != null) {\n    common.setValueByPath(\n      toObject,\n      ['cachedContentTokenCount'],\n      fromCachedContentTokenCount,\n    );\n  }\n\n  const fromResponseTokenCount = common.getValueByPath(fromObject, [\n    'candidatesTokenCount',\n  ]);\n  if (fromResponseTokenCount != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseTokenCount'],\n      fromResponseTokenCount,\n    );\n  }\n\n  const fromToolUsePromptTokenCount = common.getValueByPath(fromObject, [\n    'toolUsePromptTokenCount',\n  ]);\n  if (fromToolUsePromptTokenCount != null) {\n    common.setValueByPath(\n      toObject,\n      ['toolUsePromptTokenCount'],\n      fromToolUsePromptTokenCount,\n    );\n  }\n\n  const fromThoughtsTokenCount = common.getValueByPath(fromObject, [\n    'thoughtsTokenCount',\n  ]);\n  if (fromThoughtsTokenCount != null) {\n    common.setValueByPath(\n      toObject,\n      ['thoughtsTokenCount'],\n      fromThoughtsTokenCount,\n    );\n  }\n\n  const fromTotalTokenCount = common.getValueByPath(fromObject, [\n    'totalTokenCount',\n  ]);\n  if (fromTotalTokenCount != null) {\n    common.setValueByPath(toObject, ['totalTokenCount'], fromTotalTokenCount);\n  }\n\n  const fromPromptTokensDetails = common.getValueByPath(fromObject, [\n    'promptTokensDetails',\n  ]);\n  if (fromPromptTokensDetails != null) {\n    let transformedList = fromPromptTokensDetails;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['promptTokensDetails'], transformedList);\n  }\n\n  const fromCacheTokensDetails = common.getValueByPath(fromObject, [\n    'cacheTokensDetails',\n  ]);\n  if (fromCacheTokensDetails != null) {\n    let transformedList = fromCacheTokensDetails;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['cacheTokensDetails'], transformedList);\n  }\n\n  const fromResponseTokensDetails = common.getValueByPath(fromObject, [\n    'candidatesTokensDetails',\n  ]);\n  if (fromResponseTokensDetails != null) {\n    let transformedList = fromResponseTokensDetails;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['responseTokensDetails'], transformedList);\n  }\n\n  const fromToolUsePromptTokensDetails = common.getValueByPath(fromObject, [\n    'toolUsePromptTokensDetails',\n  ]);\n  if (fromToolUsePromptTokensDetails != null) {\n    let transformedList = fromToolUsePromptTokensDetails;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(\n      toObject,\n      ['toolUsePromptTokensDetails'],\n      transformedList,\n    );\n  }\n\n  const fromTrafficType = common.getValueByPath(fromObject, ['trafficType']);\n  if (fromTrafficType != null) {\n    common.setValueByPath(toObject, ['trafficType'], fromTrafficType);\n  }\n\n  return toObject;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from '../_api_client.js';\nimport * as common from '../_common.js';\nimport type * as _internal_types from '../_internal_types.js';\nimport * as t from '../_transformers.js';\nimport type * as types from '../types.js';\n\nexport function blobToMldev(fromObject: types.Blob): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['displayName']) !== undefined) {\n    throw new Error('displayName parameter is not supported in Gemini API.');\n  }\n\n  const fromData = common.getValueByPath(fromObject, ['data']);\n  if (fromData != null) {\n    common.setValueByPath(toObject, ['data'], fromData);\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function candidateFromMldev(\n  fromObject: types.Candidate,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromContent = common.getValueByPath(fromObject, ['content']);\n  if (fromContent != null) {\n    common.setValueByPath(toObject, ['content'], fromContent);\n  }\n\n  const fromCitationMetadata = common.getValueByPath(fromObject, [\n    'citationMetadata',\n  ]);\n  if (fromCitationMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['citationMetadata'],\n      citationMetadataFromMldev(fromCitationMetadata),\n    );\n  }\n\n  const fromTokenCount = common.getValueByPath(fromObject, ['tokenCount']);\n  if (fromTokenCount != null) {\n    common.setValueByPath(toObject, ['tokenCount'], fromTokenCount);\n  }\n\n  const fromFinishReason = common.getValueByPath(fromObject, ['finishReason']);\n  if (fromFinishReason != null) {\n    common.setValueByPath(toObject, ['finishReason'], fromFinishReason);\n  }\n\n  const fromUrlContextMetadata = common.getValueByPath(fromObject, [\n    'urlContextMetadata',\n  ]);\n  if (fromUrlContextMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['urlContextMetadata'],\n      fromUrlContextMetadata,\n    );\n  }\n\n  const fromAvgLogprobs = common.getValueByPath(fromObject, ['avgLogprobs']);\n  if (fromAvgLogprobs != null) {\n    common.setValueByPath(toObject, ['avgLogprobs'], fromAvgLogprobs);\n  }\n\n  const fromGroundingMetadata = common.getValueByPath(fromObject, [\n    'groundingMetadata',\n  ]);\n  if (fromGroundingMetadata != null) {\n    common.setValueByPath(\n      toObject,\n      ['groundingMetadata'],\n      fromGroundingMetadata,\n    );\n  }\n\n  const fromIndex = common.getValueByPath(fromObject, ['index']);\n  if (fromIndex != null) {\n    common.setValueByPath(toObject, ['index'], fromIndex);\n  }\n\n  const fromLogprobsResult = common.getValueByPath(fromObject, [\n    'logprobsResult',\n  ]);\n  if (fromLogprobsResult != null) {\n    common.setValueByPath(toObject, ['logprobsResult'], fromLogprobsResult);\n  }\n\n  const fromSafetyRatings = common.getValueByPath(fromObject, [\n    'safetyRatings',\n  ]);\n  if (fromSafetyRatings != null) {\n    let transformedList = fromSafetyRatings;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['safetyRatings'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function citationMetadataFromMldev(\n  fromObject: types.CitationMetadata,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromCitations = common.getValueByPath(fromObject, ['citationSources']);\n  if (fromCitations != null) {\n    let transformedList = fromCitations;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['citations'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function computeTokensParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.ComputeTokensParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    let transformedList = t.tContents(fromContents);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['contents'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function computeTokensResponseFromVertex(\n  fromObject: types.ComputeTokensResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromTokensInfo = common.getValueByPath(fromObject, ['tokensInfo']);\n  if (fromTokensInfo != null) {\n    let transformedList = fromTokensInfo;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['tokensInfo'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function contentEmbeddingFromVertex(\n  fromObject: types.ContentEmbedding,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromValues = common.getValueByPath(fromObject, ['values']);\n  if (fromValues != null) {\n    common.setValueByPath(toObject, ['values'], fromValues);\n  }\n\n  const fromStatistics = common.getValueByPath(fromObject, ['statistics']);\n  if (fromStatistics != null) {\n    common.setValueByPath(\n      toObject,\n      ['statistics'],\n      contentEmbeddingStatisticsFromVertex(fromStatistics),\n    );\n  }\n\n  return toObject;\n}\n\nexport function contentEmbeddingStatisticsFromVertex(\n  fromObject: types.ContentEmbeddingStatistics,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTruncated = common.getValueByPath(fromObject, ['truncated']);\n  if (fromTruncated != null) {\n    common.setValueByPath(toObject, ['truncated'], fromTruncated);\n  }\n\n  const fromTokenCount = common.getValueByPath(fromObject, ['token_count']);\n  if (fromTokenCount != null) {\n    common.setValueByPath(toObject, ['tokenCount'], fromTokenCount);\n  }\n\n  return toObject;\n}\n\nexport function contentToMldev(\n  fromObject: types.Content,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromParts = common.getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    let transformedList = fromParts;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return partToMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['parts'], transformedList);\n  }\n\n  const fromRole = common.getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    common.setValueByPath(toObject, ['role'], fromRole);\n  }\n\n  return toObject;\n}\n\nexport function controlReferenceConfigToVertex(\n  fromObject: types.ControlReferenceConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromControlType = common.getValueByPath(fromObject, ['controlType']);\n  if (fromControlType != null) {\n    common.setValueByPath(toObject, ['controlType'], fromControlType);\n  }\n\n  const fromEnableControlImageComputation = common.getValueByPath(fromObject, [\n    'enableControlImageComputation',\n  ]);\n  if (fromEnableControlImageComputation != null) {\n    common.setValueByPath(\n      toObject,\n      ['computeControl'],\n      fromEnableControlImageComputation,\n    );\n  }\n\n  return toObject;\n}\n\nexport function countTokensConfigToMldev(\n  fromObject: types.CountTokensConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['systemInstruction']) !== undefined) {\n    throw new Error(\n      'systemInstruction parameter is not supported in Gemini API.',\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['tools']) !== undefined) {\n    throw new Error('tools parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['generationConfig']) !== undefined) {\n    throw new Error(\n      'generationConfig parameter is not supported in Gemini API.',\n    );\n  }\n\n  return toObject;\n}\n\nexport function countTokensConfigToVertex(\n  fromObject: types.CountTokensConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['systemInstruction'],\n      t.tContent(fromSystemInstruction),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    let transformedList = fromTools;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return toolToVertex(item);\n      });\n    }\n    common.setValueByPath(parentObject, ['tools'], transformedList);\n  }\n\n  const fromGenerationConfig = common.getValueByPath(fromObject, [\n    'generationConfig',\n  ]);\n  if (parentObject !== undefined && fromGenerationConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['generationConfig'],\n      generationConfigToVertex(fromGenerationConfig),\n    );\n  }\n\n  return toObject;\n}\n\nexport function countTokensParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.CountTokensParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    let transformedList = t.tContents(fromContents);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return contentToMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['contents'], transformedList);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    countTokensConfigToMldev(fromConfig);\n  }\n\n  return toObject;\n}\n\nexport function countTokensParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.CountTokensParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    let transformedList = t.tContents(fromContents);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['contents'], transformedList);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    countTokensConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function countTokensResponseFromMldev(\n  fromObject: types.CountTokensResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromTotalTokens = common.getValueByPath(fromObject, ['totalTokens']);\n  if (fromTotalTokens != null) {\n    common.setValueByPath(toObject, ['totalTokens'], fromTotalTokens);\n  }\n\n  const fromCachedContentTokenCount = common.getValueByPath(fromObject, [\n    'cachedContentTokenCount',\n  ]);\n  if (fromCachedContentTokenCount != null) {\n    common.setValueByPath(\n      toObject,\n      ['cachedContentTokenCount'],\n      fromCachedContentTokenCount,\n    );\n  }\n\n  return toObject;\n}\n\nexport function countTokensResponseFromVertex(\n  fromObject: types.CountTokensResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromTotalTokens = common.getValueByPath(fromObject, ['totalTokens']);\n  if (fromTotalTokens != null) {\n    common.setValueByPath(toObject, ['totalTokens'], fromTotalTokens);\n  }\n\n  return toObject;\n}\n\nexport function deleteModelParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.DeleteModelParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  return toObject;\n}\n\nexport function deleteModelParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.DeleteModelParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  return toObject;\n}\n\nexport function deleteModelResponseFromMldev(\n  fromObject: types.DeleteModelResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  return toObject;\n}\n\nexport function deleteModelResponseFromVertex(\n  fromObject: types.DeleteModelResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  return toObject;\n}\n\nexport function editImageConfigToVertex(\n  fromObject: types.EditImageConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromOutputGcsUri = common.getValueByPath(fromObject, ['outputGcsUri']);\n  if (parentObject !== undefined && fromOutputGcsUri != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'storageUri'],\n      fromOutputGcsUri,\n    );\n  }\n\n  const fromNegativePrompt = common.getValueByPath(fromObject, [\n    'negativePrompt',\n  ]);\n  if (parentObject !== undefined && fromNegativePrompt != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'negativePrompt'],\n      fromNegativePrompt,\n    );\n  }\n\n  const fromNumberOfImages = common.getValueByPath(fromObject, [\n    'numberOfImages',\n  ]);\n  if (parentObject !== undefined && fromNumberOfImages != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'sampleCount'],\n      fromNumberOfImages,\n    );\n  }\n\n  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);\n  if (parentObject !== undefined && fromAspectRatio != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'aspectRatio'],\n      fromAspectRatio,\n    );\n  }\n\n  const fromGuidanceScale = common.getValueByPath(fromObject, [\n    'guidanceScale',\n  ]);\n  if (parentObject !== undefined && fromGuidanceScale != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'guidanceScale'],\n      fromGuidanceScale,\n    );\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (parentObject !== undefined && fromSeed != null) {\n    common.setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);\n  }\n\n  const fromSafetyFilterLevel = common.getValueByPath(fromObject, [\n    'safetyFilterLevel',\n  ]);\n  if (parentObject !== undefined && fromSafetyFilterLevel != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'safetySetting'],\n      fromSafetyFilterLevel,\n    );\n  }\n\n  const fromPersonGeneration = common.getValueByPath(fromObject, [\n    'personGeneration',\n  ]);\n  if (parentObject !== undefined && fromPersonGeneration != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'personGeneration'],\n      fromPersonGeneration,\n    );\n  }\n\n  const fromIncludeSafetyAttributes = common.getValueByPath(fromObject, [\n    'includeSafetyAttributes',\n  ]);\n  if (parentObject !== undefined && fromIncludeSafetyAttributes != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'includeSafetyAttributes'],\n      fromIncludeSafetyAttributes,\n    );\n  }\n\n  const fromIncludeRaiReason = common.getValueByPath(fromObject, [\n    'includeRaiReason',\n  ]);\n  if (parentObject !== undefined && fromIncludeRaiReason != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'includeRaiReason'],\n      fromIncludeRaiReason,\n    );\n  }\n\n  const fromLanguage = common.getValueByPath(fromObject, ['language']);\n  if (parentObject !== undefined && fromLanguage != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'language'],\n      fromLanguage,\n    );\n  }\n\n  const fromOutputMimeType = common.getValueByPath(fromObject, [\n    'outputMimeType',\n  ]);\n  if (parentObject !== undefined && fromOutputMimeType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'mimeType'],\n      fromOutputMimeType,\n    );\n  }\n\n  const fromOutputCompressionQuality = common.getValueByPath(fromObject, [\n    'outputCompressionQuality',\n  ]);\n  if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'compressionQuality'],\n      fromOutputCompressionQuality,\n    );\n  }\n\n  const fromAddWatermark = common.getValueByPath(fromObject, ['addWatermark']);\n  if (parentObject !== undefined && fromAddWatermark != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'addWatermark'],\n      fromAddWatermark,\n    );\n  }\n\n  const fromLabels = common.getValueByPath(fromObject, ['labels']);\n  if (parentObject !== undefined && fromLabels != null) {\n    common.setValueByPath(parentObject, ['labels'], fromLabels);\n  }\n\n  const fromEditMode = common.getValueByPath(fromObject, ['editMode']);\n  if (parentObject !== undefined && fromEditMode != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'editMode'],\n      fromEditMode,\n    );\n  }\n\n  const fromBaseSteps = common.getValueByPath(fromObject, ['baseSteps']);\n  if (parentObject !== undefined && fromBaseSteps != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'editConfig', 'baseSteps'],\n      fromBaseSteps,\n    );\n  }\n\n  return toObject;\n}\n\nexport function editImageParametersInternalToVertex(\n  apiClient: ApiClient,\n  fromObject: _internal_types.EditImageParametersInternal,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (fromPrompt != null) {\n    common.setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n\n  const fromReferenceImages = common.getValueByPath(fromObject, [\n    'referenceImages',\n  ]);\n  if (fromReferenceImages != null) {\n    let transformedList = fromReferenceImages;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return referenceImageAPIInternalToVertex(item);\n      });\n    }\n    common.setValueByPath(\n      toObject,\n      ['instances[0]', 'referenceImages'],\n      transformedList,\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    editImageConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function editImageResponseFromVertex(\n  fromObject: types.EditImageResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromGeneratedImages = common.getValueByPath(fromObject, [\n    'predictions',\n  ]);\n  if (fromGeneratedImages != null) {\n    let transformedList = fromGeneratedImages;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return generatedImageFromVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['generatedImages'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function embedContentConfigToMldev(\n  fromObject: types.EmbedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTaskType = common.getValueByPath(fromObject, ['taskType']);\n  if (parentObject !== undefined && fromTaskType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['requests[]', 'taskType'],\n      fromTaskType,\n    );\n  }\n\n  const fromTitle = common.getValueByPath(fromObject, ['title']);\n  if (parentObject !== undefined && fromTitle != null) {\n    common.setValueByPath(parentObject, ['requests[]', 'title'], fromTitle);\n  }\n\n  const fromOutputDimensionality = common.getValueByPath(fromObject, [\n    'outputDimensionality',\n  ]);\n  if (parentObject !== undefined && fromOutputDimensionality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['requests[]', 'outputDimensionality'],\n      fromOutputDimensionality,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['mimeType']) !== undefined) {\n    throw new Error('mimeType parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['autoTruncate']) !== undefined) {\n    throw new Error('autoTruncate parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function embedContentConfigToVertex(\n  fromObject: types.EmbedContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTaskType = common.getValueByPath(fromObject, ['taskType']);\n  if (parentObject !== undefined && fromTaskType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[]', 'task_type'],\n      fromTaskType,\n    );\n  }\n\n  const fromTitle = common.getValueByPath(fromObject, ['title']);\n  if (parentObject !== undefined && fromTitle != null) {\n    common.setValueByPath(parentObject, ['instances[]', 'title'], fromTitle);\n  }\n\n  const fromOutputDimensionality = common.getValueByPath(fromObject, [\n    'outputDimensionality',\n  ]);\n  if (parentObject !== undefined && fromOutputDimensionality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputDimensionality'],\n      fromOutputDimensionality,\n    );\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (parentObject !== undefined && fromMimeType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[]', 'mimeType'],\n      fromMimeType,\n    );\n  }\n\n  const fromAutoTruncate = common.getValueByPath(fromObject, ['autoTruncate']);\n  if (parentObject !== undefined && fromAutoTruncate != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'autoTruncate'],\n      fromAutoTruncate,\n    );\n  }\n\n  return toObject;\n}\n\nexport function embedContentParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.EmbedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    let transformedList = t.tContentsForEmbed(apiClient, fromContents);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['requests[]', 'content'], transformedList);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    embedContentConfigToMldev(fromConfig, toObject);\n  }\n\n  const fromModelForEmbedContent = common.getValueByPath(fromObject, ['model']);\n  if (fromModelForEmbedContent !== undefined) {\n    common.setValueByPath(\n      toObject,\n      ['requests[]', 'model'],\n      t.tModel(apiClient, fromModelForEmbedContent),\n    );\n  }\n\n  return toObject;\n}\n\nexport function embedContentParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.EmbedContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    let transformedList = t.tContentsForEmbed(apiClient, fromContents);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(\n      toObject,\n      ['instances[]', 'content'],\n      transformedList,\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    embedContentConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function embedContentResponseFromMldev(\n  fromObject: types.EmbedContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromEmbeddings = common.getValueByPath(fromObject, ['embeddings']);\n  if (fromEmbeddings != null) {\n    let transformedList = fromEmbeddings;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['embeddings'], transformedList);\n  }\n\n  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);\n  if (fromMetadata != null) {\n    common.setValueByPath(toObject, ['metadata'], fromMetadata);\n  }\n\n  return toObject;\n}\n\nexport function embedContentResponseFromVertex(\n  fromObject: types.EmbedContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromEmbeddings = common.getValueByPath(fromObject, [\n    'predictions[]',\n    'embeddings',\n  ]);\n  if (fromEmbeddings != null) {\n    let transformedList = fromEmbeddings;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return contentEmbeddingFromVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['embeddings'], transformedList);\n  }\n\n  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);\n  if (fromMetadata != null) {\n    common.setValueByPath(toObject, ['metadata'], fromMetadata);\n  }\n\n  return toObject;\n}\n\nexport function endpointFromVertex(\n  fromObject: types.Endpoint,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['endpoint']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromDeployedModelId = common.getValueByPath(fromObject, [\n    'deployedModelId',\n  ]);\n  if (fromDeployedModelId != null) {\n    common.setValueByPath(toObject, ['deployedModelId'], fromDeployedModelId);\n  }\n\n  return toObject;\n}\n\nexport function fileDataToMldev(\n  fromObject: types.FileData,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['displayName']) !== undefined) {\n    throw new Error('displayName parameter is not supported in Gemini API.');\n  }\n\n  const fromFileUri = common.getValueByPath(fromObject, ['fileUri']);\n  if (fromFileUri != null) {\n    common.setValueByPath(toObject, ['fileUri'], fromFileUri);\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function functionDeclarationToVertex(\n  fromObject: types.FunctionDeclaration,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['behavior']) !== undefined) {\n    throw new Error('behavior parameter is not supported in Vertex AI.');\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromParameters = common.getValueByPath(fromObject, ['parameters']);\n  if (fromParameters != null) {\n    common.setValueByPath(toObject, ['parameters'], fromParameters);\n  }\n\n  const fromParametersJsonSchema = common.getValueByPath(fromObject, [\n    'parametersJsonSchema',\n  ]);\n  if (fromParametersJsonSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['parametersJsonSchema'],\n      fromParametersJsonSchema,\n    );\n  }\n\n  const fromResponse = common.getValueByPath(fromObject, ['response']);\n  if (fromResponse != null) {\n    common.setValueByPath(toObject, ['response'], fromResponse);\n  }\n\n  const fromResponseJsonSchema = common.getValueByPath(fromObject, [\n    'responseJsonSchema',\n  ]);\n  if (fromResponseJsonSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseJsonSchema'],\n      fromResponseJsonSchema,\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateContentConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GenerateContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['systemInstruction'],\n      contentToMldev(t.tContent(fromSystemInstruction)),\n    );\n  }\n\n  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);\n  if (fromTemperature != null) {\n    common.setValueByPath(toObject, ['temperature'], fromTemperature);\n  }\n\n  const fromTopP = common.getValueByPath(fromObject, ['topP']);\n  if (fromTopP != null) {\n    common.setValueByPath(toObject, ['topP'], fromTopP);\n  }\n\n  const fromTopK = common.getValueByPath(fromObject, ['topK']);\n  if (fromTopK != null) {\n    common.setValueByPath(toObject, ['topK'], fromTopK);\n  }\n\n  const fromCandidateCount = common.getValueByPath(fromObject, [\n    'candidateCount',\n  ]);\n  if (fromCandidateCount != null) {\n    common.setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n  }\n\n  const fromMaxOutputTokens = common.getValueByPath(fromObject, [\n    'maxOutputTokens',\n  ]);\n  if (fromMaxOutputTokens != null) {\n    common.setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n  }\n\n  const fromStopSequences = common.getValueByPath(fromObject, [\n    'stopSequences',\n  ]);\n  if (fromStopSequences != null) {\n    common.setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n  }\n\n  const fromResponseLogprobs = common.getValueByPath(fromObject, [\n    'responseLogprobs',\n  ]);\n  if (fromResponseLogprobs != null) {\n    common.setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n  }\n\n  const fromLogprobs = common.getValueByPath(fromObject, ['logprobs']);\n  if (fromLogprobs != null) {\n    common.setValueByPath(toObject, ['logprobs'], fromLogprobs);\n  }\n\n  const fromPresencePenalty = common.getValueByPath(fromObject, [\n    'presencePenalty',\n  ]);\n  if (fromPresencePenalty != null) {\n    common.setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n  }\n\n  const fromFrequencyPenalty = common.getValueByPath(fromObject, [\n    'frequencyPenalty',\n  ]);\n  if (fromFrequencyPenalty != null) {\n    common.setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (fromSeed != null) {\n    common.setValueByPath(toObject, ['seed'], fromSeed);\n  }\n\n  const fromResponseMimeType = common.getValueByPath(fromObject, [\n    'responseMimeType',\n  ]);\n  if (fromResponseMimeType != null) {\n    common.setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n  }\n\n  const fromResponseSchema = common.getValueByPath(fromObject, [\n    'responseSchema',\n  ]);\n  if (fromResponseSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseSchema'],\n      t.tSchema(fromResponseSchema),\n    );\n  }\n\n  const fromResponseJsonSchema = common.getValueByPath(fromObject, [\n    'responseJsonSchema',\n  ]);\n  if (fromResponseJsonSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseJsonSchema'],\n      fromResponseJsonSchema,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['routingConfig']) !== undefined) {\n    throw new Error('routingConfig parameter is not supported in Gemini API.');\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['modelSelectionConfig']) !== undefined\n  ) {\n    throw new Error(\n      'modelSelectionConfig parameter is not supported in Gemini API.',\n    );\n  }\n\n  const fromSafetySettings = common.getValueByPath(fromObject, [\n    'safetySettings',\n  ]);\n  if (parentObject !== undefined && fromSafetySettings != null) {\n    let transformedList = fromSafetySettings;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return safetySettingToMldev(item);\n      });\n    }\n    common.setValueByPath(parentObject, ['safetySettings'], transformedList);\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    let transformedList = t.tTools(fromTools);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return toolToMldev(t.tTool(item));\n      });\n    }\n    common.setValueByPath(parentObject, ['tools'], transformedList);\n  }\n\n  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    common.setValueByPath(parentObject, ['toolConfig'], fromToolConfig);\n  }\n\n  if (common.getValueByPath(fromObject, ['labels']) !== undefined) {\n    throw new Error('labels parameter is not supported in Gemini API.');\n  }\n\n  const fromCachedContent = common.getValueByPath(fromObject, [\n    'cachedContent',\n  ]);\n  if (parentObject !== undefined && fromCachedContent != null) {\n    common.setValueByPath(\n      parentObject,\n      ['cachedContent'],\n      t.tCachedContentName(apiClient, fromCachedContent),\n    );\n  }\n\n  const fromResponseModalities = common.getValueByPath(fromObject, [\n    'responseModalities',\n  ]);\n  if (fromResponseModalities != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseModalities'],\n      fromResponseModalities,\n    );\n  }\n\n  const fromMediaResolution = common.getValueByPath(fromObject, [\n    'mediaResolution',\n  ]);\n  if (fromMediaResolution != null) {\n    common.setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n  }\n\n  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['speechConfig'],\n      t.tSpeechConfig(fromSpeechConfig),\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['audioTimestamp']) !== undefined) {\n    throw new Error('audioTimestamp parameter is not supported in Gemini API.');\n  }\n\n  const fromThinkingConfig = common.getValueByPath(fromObject, [\n    'thinkingConfig',\n  ]);\n  if (fromThinkingConfig != null) {\n    common.setValueByPath(toObject, ['thinkingConfig'], fromThinkingConfig);\n  }\n\n  const fromImageConfig = common.getValueByPath(fromObject, ['imageConfig']);\n  if (fromImageConfig != null) {\n    common.setValueByPath(toObject, ['imageConfig'], fromImageConfig);\n  }\n\n  return toObject;\n}\n\nexport function generateContentConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GenerateContentConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['systemInstruction'],\n      t.tContent(fromSystemInstruction),\n    );\n  }\n\n  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);\n  if (fromTemperature != null) {\n    common.setValueByPath(toObject, ['temperature'], fromTemperature);\n  }\n\n  const fromTopP = common.getValueByPath(fromObject, ['topP']);\n  if (fromTopP != null) {\n    common.setValueByPath(toObject, ['topP'], fromTopP);\n  }\n\n  const fromTopK = common.getValueByPath(fromObject, ['topK']);\n  if (fromTopK != null) {\n    common.setValueByPath(toObject, ['topK'], fromTopK);\n  }\n\n  const fromCandidateCount = common.getValueByPath(fromObject, [\n    'candidateCount',\n  ]);\n  if (fromCandidateCount != null) {\n    common.setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n  }\n\n  const fromMaxOutputTokens = common.getValueByPath(fromObject, [\n    'maxOutputTokens',\n  ]);\n  if (fromMaxOutputTokens != null) {\n    common.setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n  }\n\n  const fromStopSequences = common.getValueByPath(fromObject, [\n    'stopSequences',\n  ]);\n  if (fromStopSequences != null) {\n    common.setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n  }\n\n  const fromResponseLogprobs = common.getValueByPath(fromObject, [\n    'responseLogprobs',\n  ]);\n  if (fromResponseLogprobs != null) {\n    common.setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n  }\n\n  const fromLogprobs = common.getValueByPath(fromObject, ['logprobs']);\n  if (fromLogprobs != null) {\n    common.setValueByPath(toObject, ['logprobs'], fromLogprobs);\n  }\n\n  const fromPresencePenalty = common.getValueByPath(fromObject, [\n    'presencePenalty',\n  ]);\n  if (fromPresencePenalty != null) {\n    common.setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n  }\n\n  const fromFrequencyPenalty = common.getValueByPath(fromObject, [\n    'frequencyPenalty',\n  ]);\n  if (fromFrequencyPenalty != null) {\n    common.setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (fromSeed != null) {\n    common.setValueByPath(toObject, ['seed'], fromSeed);\n  }\n\n  const fromResponseMimeType = common.getValueByPath(fromObject, [\n    'responseMimeType',\n  ]);\n  if (fromResponseMimeType != null) {\n    common.setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n  }\n\n  const fromResponseSchema = common.getValueByPath(fromObject, [\n    'responseSchema',\n  ]);\n  if (fromResponseSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseSchema'],\n      t.tSchema(fromResponseSchema),\n    );\n  }\n\n  const fromResponseJsonSchema = common.getValueByPath(fromObject, [\n    'responseJsonSchema',\n  ]);\n  if (fromResponseJsonSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseJsonSchema'],\n      fromResponseJsonSchema,\n    );\n  }\n\n  const fromRoutingConfig = common.getValueByPath(fromObject, [\n    'routingConfig',\n  ]);\n  if (fromRoutingConfig != null) {\n    common.setValueByPath(toObject, ['routingConfig'], fromRoutingConfig);\n  }\n\n  const fromModelSelectionConfig = common.getValueByPath(fromObject, [\n    'modelSelectionConfig',\n  ]);\n  if (fromModelSelectionConfig != null) {\n    common.setValueByPath(toObject, ['modelConfig'], fromModelSelectionConfig);\n  }\n\n  const fromSafetySettings = common.getValueByPath(fromObject, [\n    'safetySettings',\n  ]);\n  if (parentObject !== undefined && fromSafetySettings != null) {\n    let transformedList = fromSafetySettings;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(parentObject, ['safetySettings'], transformedList);\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    let transformedList = t.tTools(fromTools);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return toolToVertex(t.tTool(item));\n      });\n    }\n    common.setValueByPath(parentObject, ['tools'], transformedList);\n  }\n\n  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);\n  if (parentObject !== undefined && fromToolConfig != null) {\n    common.setValueByPath(parentObject, ['toolConfig'], fromToolConfig);\n  }\n\n  const fromLabels = common.getValueByPath(fromObject, ['labels']);\n  if (parentObject !== undefined && fromLabels != null) {\n    common.setValueByPath(parentObject, ['labels'], fromLabels);\n  }\n\n  const fromCachedContent = common.getValueByPath(fromObject, [\n    'cachedContent',\n  ]);\n  if (parentObject !== undefined && fromCachedContent != null) {\n    common.setValueByPath(\n      parentObject,\n      ['cachedContent'],\n      t.tCachedContentName(apiClient, fromCachedContent),\n    );\n  }\n\n  const fromResponseModalities = common.getValueByPath(fromObject, [\n    'responseModalities',\n  ]);\n  if (fromResponseModalities != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseModalities'],\n      fromResponseModalities,\n    );\n  }\n\n  const fromMediaResolution = common.getValueByPath(fromObject, [\n    'mediaResolution',\n  ]);\n  if (fromMediaResolution != null) {\n    common.setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n  }\n\n  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['speechConfig'],\n      speechConfigToVertex(t.tSpeechConfig(fromSpeechConfig)),\n    );\n  }\n\n  const fromAudioTimestamp = common.getValueByPath(fromObject, [\n    'audioTimestamp',\n  ]);\n  if (fromAudioTimestamp != null) {\n    common.setValueByPath(toObject, ['audioTimestamp'], fromAudioTimestamp);\n  }\n\n  const fromThinkingConfig = common.getValueByPath(fromObject, [\n    'thinkingConfig',\n  ]);\n  if (fromThinkingConfig != null) {\n    common.setValueByPath(toObject, ['thinkingConfig'], fromThinkingConfig);\n  }\n\n  const fromImageConfig = common.getValueByPath(fromObject, ['imageConfig']);\n  if (fromImageConfig != null) {\n    common.setValueByPath(toObject, ['imageConfig'], fromImageConfig);\n  }\n\n  return toObject;\n}\n\nexport function generateContentParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GenerateContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    let transformedList = t.tContents(fromContents);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return contentToMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['contents'], transformedList);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['generationConfig'],\n      generateContentConfigToMldev(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateContentParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GenerateContentParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromContents = common.getValueByPath(fromObject, ['contents']);\n  if (fromContents != null) {\n    let transformedList = t.tContents(fromContents);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['contents'], transformedList);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['generationConfig'],\n      generateContentConfigToVertex(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateContentResponseFromMldev(\n  fromObject: types.GenerateContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromCandidates = common.getValueByPath(fromObject, ['candidates']);\n  if (fromCandidates != null) {\n    let transformedList = fromCandidates;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return candidateFromMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['candidates'], transformedList);\n  }\n\n  const fromModelVersion = common.getValueByPath(fromObject, ['modelVersion']);\n  if (fromModelVersion != null) {\n    common.setValueByPath(toObject, ['modelVersion'], fromModelVersion);\n  }\n\n  const fromPromptFeedback = common.getValueByPath(fromObject, [\n    'promptFeedback',\n  ]);\n  if (fromPromptFeedback != null) {\n    common.setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);\n  }\n\n  const fromResponseId = common.getValueByPath(fromObject, ['responseId']);\n  if (fromResponseId != null) {\n    common.setValueByPath(toObject, ['responseId'], fromResponseId);\n  }\n\n  const fromUsageMetadata = common.getValueByPath(fromObject, [\n    'usageMetadata',\n  ]);\n  if (fromUsageMetadata != null) {\n    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n  }\n\n  return toObject;\n}\n\nexport function generateContentResponseFromVertex(\n  fromObject: types.GenerateContentResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromCandidates = common.getValueByPath(fromObject, ['candidates']);\n  if (fromCandidates != null) {\n    let transformedList = fromCandidates;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['candidates'], transformedList);\n  }\n\n  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    common.setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n\n  const fromModelVersion = common.getValueByPath(fromObject, ['modelVersion']);\n  if (fromModelVersion != null) {\n    common.setValueByPath(toObject, ['modelVersion'], fromModelVersion);\n  }\n\n  const fromPromptFeedback = common.getValueByPath(fromObject, [\n    'promptFeedback',\n  ]);\n  if (fromPromptFeedback != null) {\n    common.setValueByPath(toObject, ['promptFeedback'], fromPromptFeedback);\n  }\n\n  const fromResponseId = common.getValueByPath(fromObject, ['responseId']);\n  if (fromResponseId != null) {\n    common.setValueByPath(toObject, ['responseId'], fromResponseId);\n  }\n\n  const fromUsageMetadata = common.getValueByPath(fromObject, [\n    'usageMetadata',\n  ]);\n  if (fromUsageMetadata != null) {\n    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);\n  }\n\n  return toObject;\n}\n\nexport function generateImagesConfigToMldev(\n  fromObject: types.GenerateImagesConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['outputGcsUri']) !== undefined) {\n    throw new Error('outputGcsUri parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['negativePrompt']) !== undefined) {\n    throw new Error('negativePrompt parameter is not supported in Gemini API.');\n  }\n\n  const fromNumberOfImages = common.getValueByPath(fromObject, [\n    'numberOfImages',\n  ]);\n  if (parentObject !== undefined && fromNumberOfImages != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'sampleCount'],\n      fromNumberOfImages,\n    );\n  }\n\n  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);\n  if (parentObject !== undefined && fromAspectRatio != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'aspectRatio'],\n      fromAspectRatio,\n    );\n  }\n\n  const fromGuidanceScale = common.getValueByPath(fromObject, [\n    'guidanceScale',\n  ]);\n  if (parentObject !== undefined && fromGuidanceScale != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'guidanceScale'],\n      fromGuidanceScale,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['seed']) !== undefined) {\n    throw new Error('seed parameter is not supported in Gemini API.');\n  }\n\n  const fromSafetyFilterLevel = common.getValueByPath(fromObject, [\n    'safetyFilterLevel',\n  ]);\n  if (parentObject !== undefined && fromSafetyFilterLevel != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'safetySetting'],\n      fromSafetyFilterLevel,\n    );\n  }\n\n  const fromPersonGeneration = common.getValueByPath(fromObject, [\n    'personGeneration',\n  ]);\n  if (parentObject !== undefined && fromPersonGeneration != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'personGeneration'],\n      fromPersonGeneration,\n    );\n  }\n\n  const fromIncludeSafetyAttributes = common.getValueByPath(fromObject, [\n    'includeSafetyAttributes',\n  ]);\n  if (parentObject !== undefined && fromIncludeSafetyAttributes != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'includeSafetyAttributes'],\n      fromIncludeSafetyAttributes,\n    );\n  }\n\n  const fromIncludeRaiReason = common.getValueByPath(fromObject, [\n    'includeRaiReason',\n  ]);\n  if (parentObject !== undefined && fromIncludeRaiReason != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'includeRaiReason'],\n      fromIncludeRaiReason,\n    );\n  }\n\n  const fromLanguage = common.getValueByPath(fromObject, ['language']);\n  if (parentObject !== undefined && fromLanguage != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'language'],\n      fromLanguage,\n    );\n  }\n\n  const fromOutputMimeType = common.getValueByPath(fromObject, [\n    'outputMimeType',\n  ]);\n  if (parentObject !== undefined && fromOutputMimeType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'mimeType'],\n      fromOutputMimeType,\n    );\n  }\n\n  const fromOutputCompressionQuality = common.getValueByPath(fromObject, [\n    'outputCompressionQuality',\n  ]);\n  if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'compressionQuality'],\n      fromOutputCompressionQuality,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['addWatermark']) !== undefined) {\n    throw new Error('addWatermark parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['labels']) !== undefined) {\n    throw new Error('labels parameter is not supported in Gemini API.');\n  }\n\n  const fromImageSize = common.getValueByPath(fromObject, ['imageSize']);\n  if (parentObject !== undefined && fromImageSize != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'sampleImageSize'],\n      fromImageSize,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['enhancePrompt']) !== undefined) {\n    throw new Error('enhancePrompt parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function generateImagesConfigToVertex(\n  fromObject: types.GenerateImagesConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromOutputGcsUri = common.getValueByPath(fromObject, ['outputGcsUri']);\n  if (parentObject !== undefined && fromOutputGcsUri != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'storageUri'],\n      fromOutputGcsUri,\n    );\n  }\n\n  const fromNegativePrompt = common.getValueByPath(fromObject, [\n    'negativePrompt',\n  ]);\n  if (parentObject !== undefined && fromNegativePrompt != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'negativePrompt'],\n      fromNegativePrompt,\n    );\n  }\n\n  const fromNumberOfImages = common.getValueByPath(fromObject, [\n    'numberOfImages',\n  ]);\n  if (parentObject !== undefined && fromNumberOfImages != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'sampleCount'],\n      fromNumberOfImages,\n    );\n  }\n\n  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);\n  if (parentObject !== undefined && fromAspectRatio != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'aspectRatio'],\n      fromAspectRatio,\n    );\n  }\n\n  const fromGuidanceScale = common.getValueByPath(fromObject, [\n    'guidanceScale',\n  ]);\n  if (parentObject !== undefined && fromGuidanceScale != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'guidanceScale'],\n      fromGuidanceScale,\n    );\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (parentObject !== undefined && fromSeed != null) {\n    common.setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);\n  }\n\n  const fromSafetyFilterLevel = common.getValueByPath(fromObject, [\n    'safetyFilterLevel',\n  ]);\n  if (parentObject !== undefined && fromSafetyFilterLevel != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'safetySetting'],\n      fromSafetyFilterLevel,\n    );\n  }\n\n  const fromPersonGeneration = common.getValueByPath(fromObject, [\n    'personGeneration',\n  ]);\n  if (parentObject !== undefined && fromPersonGeneration != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'personGeneration'],\n      fromPersonGeneration,\n    );\n  }\n\n  const fromIncludeSafetyAttributes = common.getValueByPath(fromObject, [\n    'includeSafetyAttributes',\n  ]);\n  if (parentObject !== undefined && fromIncludeSafetyAttributes != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'includeSafetyAttributes'],\n      fromIncludeSafetyAttributes,\n    );\n  }\n\n  const fromIncludeRaiReason = common.getValueByPath(fromObject, [\n    'includeRaiReason',\n  ]);\n  if (parentObject !== undefined && fromIncludeRaiReason != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'includeRaiReason'],\n      fromIncludeRaiReason,\n    );\n  }\n\n  const fromLanguage = common.getValueByPath(fromObject, ['language']);\n  if (parentObject !== undefined && fromLanguage != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'language'],\n      fromLanguage,\n    );\n  }\n\n  const fromOutputMimeType = common.getValueByPath(fromObject, [\n    'outputMimeType',\n  ]);\n  if (parentObject !== undefined && fromOutputMimeType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'mimeType'],\n      fromOutputMimeType,\n    );\n  }\n\n  const fromOutputCompressionQuality = common.getValueByPath(fromObject, [\n    'outputCompressionQuality',\n  ]);\n  if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'compressionQuality'],\n      fromOutputCompressionQuality,\n    );\n  }\n\n  const fromAddWatermark = common.getValueByPath(fromObject, ['addWatermark']);\n  if (parentObject !== undefined && fromAddWatermark != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'addWatermark'],\n      fromAddWatermark,\n    );\n  }\n\n  const fromLabels = common.getValueByPath(fromObject, ['labels']);\n  if (parentObject !== undefined && fromLabels != null) {\n    common.setValueByPath(parentObject, ['labels'], fromLabels);\n  }\n\n  const fromImageSize = common.getValueByPath(fromObject, ['imageSize']);\n  if (parentObject !== undefined && fromImageSize != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'sampleImageSize'],\n      fromImageSize,\n    );\n  }\n\n  const fromEnhancePrompt = common.getValueByPath(fromObject, [\n    'enhancePrompt',\n  ]);\n  if (parentObject !== undefined && fromEnhancePrompt != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'enhancePrompt'],\n      fromEnhancePrompt,\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateImagesParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GenerateImagesParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (fromPrompt != null) {\n    common.setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    generateImagesConfigToMldev(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function generateImagesParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GenerateImagesParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (fromPrompt != null) {\n    common.setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    generateImagesConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function generateImagesResponseFromMldev(\n  fromObject: types.GenerateImagesResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromGeneratedImages = common.getValueByPath(fromObject, [\n    'predictions',\n  ]);\n  if (fromGeneratedImages != null) {\n    let transformedList = fromGeneratedImages;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return generatedImageFromMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['generatedImages'], transformedList);\n  }\n\n  const fromPositivePromptSafetyAttributes = common.getValueByPath(fromObject, [\n    'positivePromptSafetyAttributes',\n  ]);\n  if (fromPositivePromptSafetyAttributes != null) {\n    common.setValueByPath(\n      toObject,\n      ['positivePromptSafetyAttributes'],\n      safetyAttributesFromMldev(fromPositivePromptSafetyAttributes),\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateImagesResponseFromVertex(\n  fromObject: types.GenerateImagesResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromGeneratedImages = common.getValueByPath(fromObject, [\n    'predictions',\n  ]);\n  if (fromGeneratedImages != null) {\n    let transformedList = fromGeneratedImages;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return generatedImageFromVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['generatedImages'], transformedList);\n  }\n\n  const fromPositivePromptSafetyAttributes = common.getValueByPath(fromObject, [\n    'positivePromptSafetyAttributes',\n  ]);\n  if (fromPositivePromptSafetyAttributes != null) {\n    common.setValueByPath(\n      toObject,\n      ['positivePromptSafetyAttributes'],\n      safetyAttributesFromVertex(fromPositivePromptSafetyAttributes),\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateVideosConfigToMldev(\n  fromObject: types.GenerateVideosConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromNumberOfVideos = common.getValueByPath(fromObject, [\n    'numberOfVideos',\n  ]);\n  if (parentObject !== undefined && fromNumberOfVideos != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'sampleCount'],\n      fromNumberOfVideos,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['outputGcsUri']) !== undefined) {\n    throw new Error('outputGcsUri parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['fps']) !== undefined) {\n    throw new Error('fps parameter is not supported in Gemini API.');\n  }\n\n  const fromDurationSeconds = common.getValueByPath(fromObject, [\n    'durationSeconds',\n  ]);\n  if (parentObject !== undefined && fromDurationSeconds != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'durationSeconds'],\n      fromDurationSeconds,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['seed']) !== undefined) {\n    throw new Error('seed parameter is not supported in Gemini API.');\n  }\n\n  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);\n  if (parentObject !== undefined && fromAspectRatio != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'aspectRatio'],\n      fromAspectRatio,\n    );\n  }\n\n  const fromResolution = common.getValueByPath(fromObject, ['resolution']);\n  if (parentObject !== undefined && fromResolution != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'resolution'],\n      fromResolution,\n    );\n  }\n\n  const fromPersonGeneration = common.getValueByPath(fromObject, [\n    'personGeneration',\n  ]);\n  if (parentObject !== undefined && fromPersonGeneration != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'personGeneration'],\n      fromPersonGeneration,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['pubsubTopic']) !== undefined) {\n    throw new Error('pubsubTopic parameter is not supported in Gemini API.');\n  }\n\n  const fromNegativePrompt = common.getValueByPath(fromObject, [\n    'negativePrompt',\n  ]);\n  if (parentObject !== undefined && fromNegativePrompt != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'negativePrompt'],\n      fromNegativePrompt,\n    );\n  }\n\n  const fromEnhancePrompt = common.getValueByPath(fromObject, [\n    'enhancePrompt',\n  ]);\n  if (parentObject !== undefined && fromEnhancePrompt != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'enhancePrompt'],\n      fromEnhancePrompt,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['generateAudio']) !== undefined) {\n    throw new Error('generateAudio parameter is not supported in Gemini API.');\n  }\n\n  const fromLastFrame = common.getValueByPath(fromObject, ['lastFrame']);\n  if (parentObject !== undefined && fromLastFrame != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'lastFrame'],\n      imageToMldev(fromLastFrame),\n    );\n  }\n\n  const fromReferenceImages = common.getValueByPath(fromObject, [\n    'referenceImages',\n  ]);\n  if (parentObject !== undefined && fromReferenceImages != null) {\n    let transformedList = fromReferenceImages;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return videoGenerationReferenceImageToMldev(item);\n      });\n    }\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'referenceImages'],\n      transformedList,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['mask']) !== undefined) {\n    throw new Error('mask parameter is not supported in Gemini API.');\n  }\n\n  if (common.getValueByPath(fromObject, ['compressionQuality']) !== undefined) {\n    throw new Error(\n      'compressionQuality parameter is not supported in Gemini API.',\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateVideosConfigToVertex(\n  fromObject: types.GenerateVideosConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromNumberOfVideos = common.getValueByPath(fromObject, [\n    'numberOfVideos',\n  ]);\n  if (parentObject !== undefined && fromNumberOfVideos != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'sampleCount'],\n      fromNumberOfVideos,\n    );\n  }\n\n  const fromOutputGcsUri = common.getValueByPath(fromObject, ['outputGcsUri']);\n  if (parentObject !== undefined && fromOutputGcsUri != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'storageUri'],\n      fromOutputGcsUri,\n    );\n  }\n\n  const fromFps = common.getValueByPath(fromObject, ['fps']);\n  if (parentObject !== undefined && fromFps != null) {\n    common.setValueByPath(parentObject, ['parameters', 'fps'], fromFps);\n  }\n\n  const fromDurationSeconds = common.getValueByPath(fromObject, [\n    'durationSeconds',\n  ]);\n  if (parentObject !== undefined && fromDurationSeconds != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'durationSeconds'],\n      fromDurationSeconds,\n    );\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (parentObject !== undefined && fromSeed != null) {\n    common.setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);\n  }\n\n  const fromAspectRatio = common.getValueByPath(fromObject, ['aspectRatio']);\n  if (parentObject !== undefined && fromAspectRatio != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'aspectRatio'],\n      fromAspectRatio,\n    );\n  }\n\n  const fromResolution = common.getValueByPath(fromObject, ['resolution']);\n  if (parentObject !== undefined && fromResolution != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'resolution'],\n      fromResolution,\n    );\n  }\n\n  const fromPersonGeneration = common.getValueByPath(fromObject, [\n    'personGeneration',\n  ]);\n  if (parentObject !== undefined && fromPersonGeneration != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'personGeneration'],\n      fromPersonGeneration,\n    );\n  }\n\n  const fromPubsubTopic = common.getValueByPath(fromObject, ['pubsubTopic']);\n  if (parentObject !== undefined && fromPubsubTopic != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'pubsubTopic'],\n      fromPubsubTopic,\n    );\n  }\n\n  const fromNegativePrompt = common.getValueByPath(fromObject, [\n    'negativePrompt',\n  ]);\n  if (parentObject !== undefined && fromNegativePrompt != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'negativePrompt'],\n      fromNegativePrompt,\n    );\n  }\n\n  const fromEnhancePrompt = common.getValueByPath(fromObject, [\n    'enhancePrompt',\n  ]);\n  if (parentObject !== undefined && fromEnhancePrompt != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'enhancePrompt'],\n      fromEnhancePrompt,\n    );\n  }\n\n  const fromGenerateAudio = common.getValueByPath(fromObject, [\n    'generateAudio',\n  ]);\n  if (parentObject !== undefined && fromGenerateAudio != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'generateAudio'],\n      fromGenerateAudio,\n    );\n  }\n\n  const fromLastFrame = common.getValueByPath(fromObject, ['lastFrame']);\n  if (parentObject !== undefined && fromLastFrame != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'lastFrame'],\n      imageToVertex(fromLastFrame),\n    );\n  }\n\n  const fromReferenceImages = common.getValueByPath(fromObject, [\n    'referenceImages',\n  ]);\n  if (parentObject !== undefined && fromReferenceImages != null) {\n    let transformedList = fromReferenceImages;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return videoGenerationReferenceImageToVertex(item);\n      });\n    }\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'referenceImages'],\n      transformedList,\n    );\n  }\n\n  const fromMask = common.getValueByPath(fromObject, ['mask']);\n  if (parentObject !== undefined && fromMask != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'mask'],\n      videoGenerationMaskToVertex(fromMask),\n    );\n  }\n\n  const fromCompressionQuality = common.getValueByPath(fromObject, [\n    'compressionQuality',\n  ]);\n  if (parentObject !== undefined && fromCompressionQuality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'compressionQuality'],\n      fromCompressionQuality,\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateVideosOperationFromMldev(\n  fromObject: types.GenerateVideosOperation,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);\n  if (fromMetadata != null) {\n    common.setValueByPath(toObject, ['metadata'], fromMetadata);\n  }\n\n  const fromDone = common.getValueByPath(fromObject, ['done']);\n  if (fromDone != null) {\n    common.setValueByPath(toObject, ['done'], fromDone);\n  }\n\n  const fromError = common.getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    common.setValueByPath(toObject, ['error'], fromError);\n  }\n\n  const fromResponse = common.getValueByPath(fromObject, [\n    'response',\n    'generateVideoResponse',\n  ]);\n  if (fromResponse != null) {\n    common.setValueByPath(\n      toObject,\n      ['response'],\n      generateVideosResponseFromMldev(fromResponse),\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateVideosOperationFromVertex(\n  fromObject: types.GenerateVideosOperation,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);\n  if (fromMetadata != null) {\n    common.setValueByPath(toObject, ['metadata'], fromMetadata);\n  }\n\n  const fromDone = common.getValueByPath(fromObject, ['done']);\n  if (fromDone != null) {\n    common.setValueByPath(toObject, ['done'], fromDone);\n  }\n\n  const fromError = common.getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    common.setValueByPath(toObject, ['error'], fromError);\n  }\n\n  const fromResponse = common.getValueByPath(fromObject, ['response']);\n  if (fromResponse != null) {\n    common.setValueByPath(\n      toObject,\n      ['response'],\n      generateVideosResponseFromVertex(fromResponse),\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateVideosParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GenerateVideosParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (fromPrompt != null) {\n    common.setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n\n  const fromImage = common.getValueByPath(fromObject, ['image']);\n  if (fromImage != null) {\n    common.setValueByPath(\n      toObject,\n      ['instances[0]', 'image'],\n      imageToMldev(fromImage),\n    );\n  }\n\n  const fromVideo = common.getValueByPath(fromObject, ['video']);\n  if (fromVideo != null) {\n    common.setValueByPath(\n      toObject,\n      ['instances[0]', 'video'],\n      videoToMldev(fromVideo),\n    );\n  }\n\n  const fromSource = common.getValueByPath(fromObject, ['source']);\n  if (fromSource != null) {\n    generateVideosSourceToMldev(fromSource, toObject);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    generateVideosConfigToMldev(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function generateVideosParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GenerateVideosParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (fromPrompt != null) {\n    common.setValueByPath(toObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n\n  const fromImage = common.getValueByPath(fromObject, ['image']);\n  if (fromImage != null) {\n    common.setValueByPath(\n      toObject,\n      ['instances[0]', 'image'],\n      imageToVertex(fromImage),\n    );\n  }\n\n  const fromVideo = common.getValueByPath(fromObject, ['video']);\n  if (fromVideo != null) {\n    common.setValueByPath(\n      toObject,\n      ['instances[0]', 'video'],\n      videoToVertex(fromVideo),\n    );\n  }\n\n  const fromSource = common.getValueByPath(fromObject, ['source']);\n  if (fromSource != null) {\n    generateVideosSourceToVertex(fromSource, toObject);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    generateVideosConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function generateVideosResponseFromMldev(\n  fromObject: types.GenerateVideosResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGeneratedVideos = common.getValueByPath(fromObject, [\n    'generatedSamples',\n  ]);\n  if (fromGeneratedVideos != null) {\n    let transformedList = fromGeneratedVideos;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return generatedVideoFromMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['generatedVideos'], transformedList);\n  }\n\n  const fromRaiMediaFilteredCount = common.getValueByPath(fromObject, [\n    'raiMediaFilteredCount',\n  ]);\n  if (fromRaiMediaFilteredCount != null) {\n    common.setValueByPath(\n      toObject,\n      ['raiMediaFilteredCount'],\n      fromRaiMediaFilteredCount,\n    );\n  }\n\n  const fromRaiMediaFilteredReasons = common.getValueByPath(fromObject, [\n    'raiMediaFilteredReasons',\n  ]);\n  if (fromRaiMediaFilteredReasons != null) {\n    common.setValueByPath(\n      toObject,\n      ['raiMediaFilteredReasons'],\n      fromRaiMediaFilteredReasons,\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateVideosResponseFromVertex(\n  fromObject: types.GenerateVideosResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGeneratedVideos = common.getValueByPath(fromObject, ['videos']);\n  if (fromGeneratedVideos != null) {\n    let transformedList = fromGeneratedVideos;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return generatedVideoFromVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['generatedVideos'], transformedList);\n  }\n\n  const fromRaiMediaFilteredCount = common.getValueByPath(fromObject, [\n    'raiMediaFilteredCount',\n  ]);\n  if (fromRaiMediaFilteredCount != null) {\n    common.setValueByPath(\n      toObject,\n      ['raiMediaFilteredCount'],\n      fromRaiMediaFilteredCount,\n    );\n  }\n\n  const fromRaiMediaFilteredReasons = common.getValueByPath(fromObject, [\n    'raiMediaFilteredReasons',\n  ]);\n  if (fromRaiMediaFilteredReasons != null) {\n    common.setValueByPath(\n      toObject,\n      ['raiMediaFilteredReasons'],\n      fromRaiMediaFilteredReasons,\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateVideosSourceToMldev(\n  fromObject: types.GenerateVideosSource,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (parentObject !== undefined && fromPrompt != null) {\n    common.setValueByPath(parentObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n\n  const fromImage = common.getValueByPath(fromObject, ['image']);\n  if (parentObject !== undefined && fromImage != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'image'],\n      imageToMldev(fromImage),\n    );\n  }\n\n  const fromVideo = common.getValueByPath(fromObject, ['video']);\n  if (parentObject !== undefined && fromVideo != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'video'],\n      videoToMldev(fromVideo),\n    );\n  }\n\n  return toObject;\n}\n\nexport function generateVideosSourceToVertex(\n  fromObject: types.GenerateVideosSource,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (parentObject !== undefined && fromPrompt != null) {\n    common.setValueByPath(parentObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n\n  const fromImage = common.getValueByPath(fromObject, ['image']);\n  if (parentObject !== undefined && fromImage != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'image'],\n      imageToVertex(fromImage),\n    );\n  }\n\n  const fromVideo = common.getValueByPath(fromObject, ['video']);\n  if (parentObject !== undefined && fromVideo != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'video'],\n      videoToVertex(fromVideo),\n    );\n  }\n\n  return toObject;\n}\n\nexport function generatedImageFromMldev(\n  fromObject: types.GeneratedImage,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromImage = common.getValueByPath(fromObject, ['_self']);\n  if (fromImage != null) {\n    common.setValueByPath(toObject, ['image'], imageFromMldev(fromImage));\n  }\n\n  const fromRaiFilteredReason = common.getValueByPath(fromObject, [\n    'raiFilteredReason',\n  ]);\n  if (fromRaiFilteredReason != null) {\n    common.setValueByPath(\n      toObject,\n      ['raiFilteredReason'],\n      fromRaiFilteredReason,\n    );\n  }\n\n  const fromSafetyAttributes = common.getValueByPath(fromObject, ['_self']);\n  if (fromSafetyAttributes != null) {\n    common.setValueByPath(\n      toObject,\n      ['safetyAttributes'],\n      safetyAttributesFromMldev(fromSafetyAttributes),\n    );\n  }\n\n  return toObject;\n}\n\nexport function generatedImageFromVertex(\n  fromObject: types.GeneratedImage,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromImage = common.getValueByPath(fromObject, ['_self']);\n  if (fromImage != null) {\n    common.setValueByPath(toObject, ['image'], imageFromVertex(fromImage));\n  }\n\n  const fromRaiFilteredReason = common.getValueByPath(fromObject, [\n    'raiFilteredReason',\n  ]);\n  if (fromRaiFilteredReason != null) {\n    common.setValueByPath(\n      toObject,\n      ['raiFilteredReason'],\n      fromRaiFilteredReason,\n    );\n  }\n\n  const fromSafetyAttributes = common.getValueByPath(fromObject, ['_self']);\n  if (fromSafetyAttributes != null) {\n    common.setValueByPath(\n      toObject,\n      ['safetyAttributes'],\n      safetyAttributesFromVertex(fromSafetyAttributes),\n    );\n  }\n\n  const fromEnhancedPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (fromEnhancedPrompt != null) {\n    common.setValueByPath(toObject, ['enhancedPrompt'], fromEnhancedPrompt);\n  }\n\n  return toObject;\n}\n\nexport function generatedImageMaskFromVertex(\n  fromObject: types.GeneratedImageMask,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMask = common.getValueByPath(fromObject, ['_self']);\n  if (fromMask != null) {\n    common.setValueByPath(toObject, ['mask'], imageFromVertex(fromMask));\n  }\n\n  const fromLabels = common.getValueByPath(fromObject, ['labels']);\n  if (fromLabels != null) {\n    let transformedList = fromLabels;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['labels'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function generatedVideoFromMldev(\n  fromObject: types.GeneratedVideo,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVideo = common.getValueByPath(fromObject, ['video']);\n  if (fromVideo != null) {\n    common.setValueByPath(toObject, ['video'], videoFromMldev(fromVideo));\n  }\n\n  return toObject;\n}\n\nexport function generatedVideoFromVertex(\n  fromObject: types.GeneratedVideo,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVideo = common.getValueByPath(fromObject, ['_self']);\n  if (fromVideo != null) {\n    common.setValueByPath(toObject, ['video'], videoFromVertex(fromVideo));\n  }\n\n  return toObject;\n}\n\nexport function generationConfigToVertex(\n  fromObject: types.GenerationConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModelSelectionConfig = common.getValueByPath(fromObject, [\n    'modelSelectionConfig',\n  ]);\n  if (fromModelSelectionConfig != null) {\n    common.setValueByPath(toObject, ['modelConfig'], fromModelSelectionConfig);\n  }\n\n  const fromAudioTimestamp = common.getValueByPath(fromObject, [\n    'audioTimestamp',\n  ]);\n  if (fromAudioTimestamp != null) {\n    common.setValueByPath(toObject, ['audioTimestamp'], fromAudioTimestamp);\n  }\n\n  const fromCandidateCount = common.getValueByPath(fromObject, [\n    'candidateCount',\n  ]);\n  if (fromCandidateCount != null) {\n    common.setValueByPath(toObject, ['candidateCount'], fromCandidateCount);\n  }\n\n  const fromEnableAffectiveDialog = common.getValueByPath(fromObject, [\n    'enableAffectiveDialog',\n  ]);\n  if (fromEnableAffectiveDialog != null) {\n    common.setValueByPath(\n      toObject,\n      ['enableAffectiveDialog'],\n      fromEnableAffectiveDialog,\n    );\n  }\n\n  const fromFrequencyPenalty = common.getValueByPath(fromObject, [\n    'frequencyPenalty',\n  ]);\n  if (fromFrequencyPenalty != null) {\n    common.setValueByPath(toObject, ['frequencyPenalty'], fromFrequencyPenalty);\n  }\n\n  const fromLogprobs = common.getValueByPath(fromObject, ['logprobs']);\n  if (fromLogprobs != null) {\n    common.setValueByPath(toObject, ['logprobs'], fromLogprobs);\n  }\n\n  const fromMaxOutputTokens = common.getValueByPath(fromObject, [\n    'maxOutputTokens',\n  ]);\n  if (fromMaxOutputTokens != null) {\n    common.setValueByPath(toObject, ['maxOutputTokens'], fromMaxOutputTokens);\n  }\n\n  const fromMediaResolution = common.getValueByPath(fromObject, [\n    'mediaResolution',\n  ]);\n  if (fromMediaResolution != null) {\n    common.setValueByPath(toObject, ['mediaResolution'], fromMediaResolution);\n  }\n\n  const fromPresencePenalty = common.getValueByPath(fromObject, [\n    'presencePenalty',\n  ]);\n  if (fromPresencePenalty != null) {\n    common.setValueByPath(toObject, ['presencePenalty'], fromPresencePenalty);\n  }\n\n  const fromResponseJsonSchema = common.getValueByPath(fromObject, [\n    'responseJsonSchema',\n  ]);\n  if (fromResponseJsonSchema != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseJsonSchema'],\n      fromResponseJsonSchema,\n    );\n  }\n\n  const fromResponseLogprobs = common.getValueByPath(fromObject, [\n    'responseLogprobs',\n  ]);\n  if (fromResponseLogprobs != null) {\n    common.setValueByPath(toObject, ['responseLogprobs'], fromResponseLogprobs);\n  }\n\n  const fromResponseMimeType = common.getValueByPath(fromObject, [\n    'responseMimeType',\n  ]);\n  if (fromResponseMimeType != null) {\n    common.setValueByPath(toObject, ['responseMimeType'], fromResponseMimeType);\n  }\n\n  const fromResponseModalities = common.getValueByPath(fromObject, [\n    'responseModalities',\n  ]);\n  if (fromResponseModalities != null) {\n    common.setValueByPath(\n      toObject,\n      ['responseModalities'],\n      fromResponseModalities,\n    );\n  }\n\n  const fromResponseSchema = common.getValueByPath(fromObject, [\n    'responseSchema',\n  ]);\n  if (fromResponseSchema != null) {\n    common.setValueByPath(toObject, ['responseSchema'], fromResponseSchema);\n  }\n\n  const fromRoutingConfig = common.getValueByPath(fromObject, [\n    'routingConfig',\n  ]);\n  if (fromRoutingConfig != null) {\n    common.setValueByPath(toObject, ['routingConfig'], fromRoutingConfig);\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (fromSeed != null) {\n    common.setValueByPath(toObject, ['seed'], fromSeed);\n  }\n\n  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);\n  if (fromSpeechConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['speechConfig'],\n      speechConfigToVertex(fromSpeechConfig),\n    );\n  }\n\n  const fromStopSequences = common.getValueByPath(fromObject, [\n    'stopSequences',\n  ]);\n  if (fromStopSequences != null) {\n    common.setValueByPath(toObject, ['stopSequences'], fromStopSequences);\n  }\n\n  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);\n  if (fromTemperature != null) {\n    common.setValueByPath(toObject, ['temperature'], fromTemperature);\n  }\n\n  const fromThinkingConfig = common.getValueByPath(fromObject, [\n    'thinkingConfig',\n  ]);\n  if (fromThinkingConfig != null) {\n    common.setValueByPath(toObject, ['thinkingConfig'], fromThinkingConfig);\n  }\n\n  const fromTopK = common.getValueByPath(fromObject, ['topK']);\n  if (fromTopK != null) {\n    common.setValueByPath(toObject, ['topK'], fromTopK);\n  }\n\n  const fromTopP = common.getValueByPath(fromObject, ['topP']);\n  if (fromTopP != null) {\n    common.setValueByPath(toObject, ['topP'], fromTopP);\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['enableEnhancedCivicAnswers']) !==\n    undefined\n  ) {\n    throw new Error(\n      'enableEnhancedCivicAnswers parameter is not supported in Vertex AI.',\n    );\n  }\n\n  return toObject;\n}\n\nexport function getModelParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.GetModelParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  return toObject;\n}\n\nexport function getModelParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.GetModelParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  return toObject;\n}\n\nexport function googleMapsToMldev(\n  fromObject: types.GoogleMaps,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['authConfig']) !== undefined) {\n    throw new Error('authConfig parameter is not supported in Gemini API.');\n  }\n\n  const fromEnableWidget = common.getValueByPath(fromObject, ['enableWidget']);\n  if (fromEnableWidget != null) {\n    common.setValueByPath(toObject, ['enableWidget'], fromEnableWidget);\n  }\n\n  return toObject;\n}\n\nexport function googleSearchToMldev(\n  fromObject: types.GoogleSearch,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTimeRangeFilter = common.getValueByPath(fromObject, [\n    'timeRangeFilter',\n  ]);\n  if (fromTimeRangeFilter != null) {\n    common.setValueByPath(toObject, ['timeRangeFilter'], fromTimeRangeFilter);\n  }\n\n  if (common.getValueByPath(fromObject, ['excludeDomains']) !== undefined) {\n    throw new Error('excludeDomains parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function imageFromMldev(\n  fromObject: types.Image,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromImageBytes = common.getValueByPath(fromObject, [\n    'bytesBase64Encoded',\n  ]);\n  if (fromImageBytes != null) {\n    common.setValueByPath(toObject, ['imageBytes'], t.tBytes(fromImageBytes));\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function imageFromVertex(\n  fromObject: types.Image,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);\n  if (fromGcsUri != null) {\n    common.setValueByPath(toObject, ['gcsUri'], fromGcsUri);\n  }\n\n  const fromImageBytes = common.getValueByPath(fromObject, [\n    'bytesBase64Encoded',\n  ]);\n  if (fromImageBytes != null) {\n    common.setValueByPath(toObject, ['imageBytes'], t.tBytes(fromImageBytes));\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function imageToMldev(fromObject: types.Image): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['gcsUri']) !== undefined) {\n    throw new Error('gcsUri parameter is not supported in Gemini API.');\n  }\n\n  const fromImageBytes = common.getValueByPath(fromObject, ['imageBytes']);\n  if (fromImageBytes != null) {\n    common.setValueByPath(\n      toObject,\n      ['bytesBase64Encoded'],\n      t.tBytes(fromImageBytes),\n    );\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function imageToVertex(\n  fromObject: types.Image,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);\n  if (fromGcsUri != null) {\n    common.setValueByPath(toObject, ['gcsUri'], fromGcsUri);\n  }\n\n  const fromImageBytes = common.getValueByPath(fromObject, ['imageBytes']);\n  if (fromImageBytes != null) {\n    common.setValueByPath(\n      toObject,\n      ['bytesBase64Encoded'],\n      t.tBytes(fromImageBytes),\n    );\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function listModelsConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.ListModelsConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  const fromFilter = common.getValueByPath(fromObject, ['filter']);\n  if (parentObject !== undefined && fromFilter != null) {\n    common.setValueByPath(parentObject, ['_query', 'filter'], fromFilter);\n  }\n\n  const fromQueryBase = common.getValueByPath(fromObject, ['queryBase']);\n  if (parentObject !== undefined && fromQueryBase != null) {\n    common.setValueByPath(\n      parentObject,\n      ['_url', 'models_url'],\n      t.tModelsUrl(apiClient, fromQueryBase),\n    );\n  }\n\n  return toObject;\n}\n\nexport function listModelsConfigToVertex(\n  apiClient: ApiClient,\n  fromObject: types.ListModelsConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  const fromFilter = common.getValueByPath(fromObject, ['filter']);\n  if (parentObject !== undefined && fromFilter != null) {\n    common.setValueByPath(parentObject, ['_query', 'filter'], fromFilter);\n  }\n\n  const fromQueryBase = common.getValueByPath(fromObject, ['queryBase']);\n  if (parentObject !== undefined && fromQueryBase != null) {\n    common.setValueByPath(\n      parentObject,\n      ['_url', 'models_url'],\n      t.tModelsUrl(apiClient, fromQueryBase),\n    );\n  }\n\n  return toObject;\n}\n\nexport function listModelsParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.ListModelsParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    listModelsConfigToMldev(apiClient, fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function listModelsParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.ListModelsParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    listModelsConfigToVertex(apiClient, fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function listModelsResponseFromMldev(\n  fromObject: types.ListModelsResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromNextPageToken = common.getValueByPath(fromObject, [\n    'nextPageToken',\n  ]);\n  if (fromNextPageToken != null) {\n    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n\n  const fromModels = common.getValueByPath(fromObject, ['_self']);\n  if (fromModels != null) {\n    let transformedList = t.tExtractModels(fromModels);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return modelFromMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['models'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function listModelsResponseFromVertex(\n  fromObject: types.ListModelsResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromNextPageToken = common.getValueByPath(fromObject, [\n    'nextPageToken',\n  ]);\n  if (fromNextPageToken != null) {\n    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n\n  const fromModels = common.getValueByPath(fromObject, ['_self']);\n  if (fromModels != null) {\n    let transformedList = t.tExtractModels(fromModels);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return modelFromVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['models'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function maskReferenceConfigToVertex(\n  fromObject: types.MaskReferenceConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMaskMode = common.getValueByPath(fromObject, ['maskMode']);\n  if (fromMaskMode != null) {\n    common.setValueByPath(toObject, ['maskMode'], fromMaskMode);\n  }\n\n  const fromSegmentationClasses = common.getValueByPath(fromObject, [\n    'segmentationClasses',\n  ]);\n  if (fromSegmentationClasses != null) {\n    common.setValueByPath(toObject, ['maskClasses'], fromSegmentationClasses);\n  }\n\n  const fromMaskDilation = common.getValueByPath(fromObject, ['maskDilation']);\n  if (fromMaskDilation != null) {\n    common.setValueByPath(toObject, ['dilation'], fromMaskDilation);\n  }\n\n  return toObject;\n}\n\nexport function modelFromMldev(\n  fromObject: types.Model,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (fromDisplayName != null) {\n    common.setValueByPath(toObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromVersion = common.getValueByPath(fromObject, ['version']);\n  if (fromVersion != null) {\n    common.setValueByPath(toObject, ['version'], fromVersion);\n  }\n\n  const fromTunedModelInfo = common.getValueByPath(fromObject, ['_self']);\n  if (fromTunedModelInfo != null) {\n    common.setValueByPath(\n      toObject,\n      ['tunedModelInfo'],\n      tunedModelInfoFromMldev(fromTunedModelInfo),\n    );\n  }\n\n  const fromInputTokenLimit = common.getValueByPath(fromObject, [\n    'inputTokenLimit',\n  ]);\n  if (fromInputTokenLimit != null) {\n    common.setValueByPath(toObject, ['inputTokenLimit'], fromInputTokenLimit);\n  }\n\n  const fromOutputTokenLimit = common.getValueByPath(fromObject, [\n    'outputTokenLimit',\n  ]);\n  if (fromOutputTokenLimit != null) {\n    common.setValueByPath(toObject, ['outputTokenLimit'], fromOutputTokenLimit);\n  }\n\n  const fromSupportedActions = common.getValueByPath(fromObject, [\n    'supportedGenerationMethods',\n  ]);\n  if (fromSupportedActions != null) {\n    common.setValueByPath(toObject, ['supportedActions'], fromSupportedActions);\n  }\n\n  return toObject;\n}\n\nexport function modelFromVertex(\n  fromObject: types.Model,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (fromDisplayName != null) {\n    common.setValueByPath(toObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromVersion = common.getValueByPath(fromObject, ['versionId']);\n  if (fromVersion != null) {\n    common.setValueByPath(toObject, ['version'], fromVersion);\n  }\n\n  const fromEndpoints = common.getValueByPath(fromObject, ['deployedModels']);\n  if (fromEndpoints != null) {\n    let transformedList = fromEndpoints;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return endpointFromVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['endpoints'], transformedList);\n  }\n\n  const fromLabels = common.getValueByPath(fromObject, ['labels']);\n  if (fromLabels != null) {\n    common.setValueByPath(toObject, ['labels'], fromLabels);\n  }\n\n  const fromTunedModelInfo = common.getValueByPath(fromObject, ['_self']);\n  if (fromTunedModelInfo != null) {\n    common.setValueByPath(\n      toObject,\n      ['tunedModelInfo'],\n      tunedModelInfoFromVertex(fromTunedModelInfo),\n    );\n  }\n\n  const fromDefaultCheckpointId = common.getValueByPath(fromObject, [\n    'defaultCheckpointId',\n  ]);\n  if (fromDefaultCheckpointId != null) {\n    common.setValueByPath(\n      toObject,\n      ['defaultCheckpointId'],\n      fromDefaultCheckpointId,\n    );\n  }\n\n  const fromCheckpoints = common.getValueByPath(fromObject, ['checkpoints']);\n  if (fromCheckpoints != null) {\n    let transformedList = fromCheckpoints;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['checkpoints'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function partToMldev(fromObject: types.Part): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVideoMetadata = common.getValueByPath(fromObject, [\n    'videoMetadata',\n  ]);\n  if (fromVideoMetadata != null) {\n    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n\n  const fromThought = common.getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    common.setValueByPath(toObject, ['thought'], fromThought);\n  }\n\n  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    common.setValueByPath(\n      toObject,\n      ['inlineData'],\n      blobToMldev(fromInlineData),\n    );\n  }\n\n  const fromFileData = common.getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    common.setValueByPath(\n      toObject,\n      ['fileData'],\n      fileDataToMldev(fromFileData),\n    );\n  }\n\n  const fromThoughtSignature = common.getValueByPath(fromObject, [\n    'thoughtSignature',\n  ]);\n  if (fromThoughtSignature != null) {\n    common.setValueByPath(toObject, ['thoughtSignature'], fromThoughtSignature);\n  }\n\n  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n\n  const fromCodeExecutionResult = common.getValueByPath(fromObject, [\n    'codeExecutionResult',\n  ]);\n  if (fromCodeExecutionResult != null) {\n    common.setValueByPath(\n      toObject,\n      ['codeExecutionResult'],\n      fromCodeExecutionResult,\n    );\n  }\n\n  const fromExecutableCode = common.getValueByPath(fromObject, [\n    'executableCode',\n  ]);\n  if (fromExecutableCode != null) {\n    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n\n  const fromFunctionResponse = common.getValueByPath(fromObject, [\n    'functionResponse',\n  ]);\n  if (fromFunctionResponse != null) {\n    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  return toObject;\n}\n\nexport function productImageToVertex(\n  fromObject: types.ProductImage,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromProductImage = common.getValueByPath(fromObject, ['productImage']);\n  if (fromProductImage != null) {\n    common.setValueByPath(toObject, ['image'], imageToVertex(fromProductImage));\n  }\n\n  return toObject;\n}\n\nexport function recontextImageConfigToVertex(\n  fromObject: types.RecontextImageConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromNumberOfImages = common.getValueByPath(fromObject, [\n    'numberOfImages',\n  ]);\n  if (parentObject !== undefined && fromNumberOfImages != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'sampleCount'],\n      fromNumberOfImages,\n    );\n  }\n\n  const fromBaseSteps = common.getValueByPath(fromObject, ['baseSteps']);\n  if (parentObject !== undefined && fromBaseSteps != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'editConfig', 'baseSteps'],\n      fromBaseSteps,\n    );\n  }\n\n  const fromOutputGcsUri = common.getValueByPath(fromObject, ['outputGcsUri']);\n  if (parentObject !== undefined && fromOutputGcsUri != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'storageUri'],\n      fromOutputGcsUri,\n    );\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (parentObject !== undefined && fromSeed != null) {\n    common.setValueByPath(parentObject, ['parameters', 'seed'], fromSeed);\n  }\n\n  const fromSafetyFilterLevel = common.getValueByPath(fromObject, [\n    'safetyFilterLevel',\n  ]);\n  if (parentObject !== undefined && fromSafetyFilterLevel != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'safetySetting'],\n      fromSafetyFilterLevel,\n    );\n  }\n\n  const fromPersonGeneration = common.getValueByPath(fromObject, [\n    'personGeneration',\n  ]);\n  if (parentObject !== undefined && fromPersonGeneration != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'personGeneration'],\n      fromPersonGeneration,\n    );\n  }\n\n  const fromAddWatermark = common.getValueByPath(fromObject, ['addWatermark']);\n  if (parentObject !== undefined && fromAddWatermark != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'addWatermark'],\n      fromAddWatermark,\n    );\n  }\n\n  const fromOutputMimeType = common.getValueByPath(fromObject, [\n    'outputMimeType',\n  ]);\n  if (parentObject !== undefined && fromOutputMimeType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'mimeType'],\n      fromOutputMimeType,\n    );\n  }\n\n  const fromOutputCompressionQuality = common.getValueByPath(fromObject, [\n    'outputCompressionQuality',\n  ]);\n  if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'compressionQuality'],\n      fromOutputCompressionQuality,\n    );\n  }\n\n  const fromEnhancePrompt = common.getValueByPath(fromObject, [\n    'enhancePrompt',\n  ]);\n  if (parentObject !== undefined && fromEnhancePrompt != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'enhancePrompt'],\n      fromEnhancePrompt,\n    );\n  }\n\n  const fromLabels = common.getValueByPath(fromObject, ['labels']);\n  if (parentObject !== undefined && fromLabels != null) {\n    common.setValueByPath(parentObject, ['labels'], fromLabels);\n  }\n\n  return toObject;\n}\n\nexport function recontextImageParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.RecontextImageParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromSource = common.getValueByPath(fromObject, ['source']);\n  if (fromSource != null) {\n    recontextImageSourceToVertex(fromSource, toObject);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    recontextImageConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function recontextImageResponseFromVertex(\n  fromObject: types.RecontextImageResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGeneratedImages = common.getValueByPath(fromObject, [\n    'predictions',\n  ]);\n  if (fromGeneratedImages != null) {\n    let transformedList = fromGeneratedImages;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return generatedImageFromVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['generatedImages'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function recontextImageSourceToVertex(\n  fromObject: types.RecontextImageSource,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (parentObject !== undefined && fromPrompt != null) {\n    common.setValueByPath(parentObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n\n  const fromPersonImage = common.getValueByPath(fromObject, ['personImage']);\n  if (parentObject !== undefined && fromPersonImage != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'personImage', 'image'],\n      imageToVertex(fromPersonImage),\n    );\n  }\n\n  const fromProductImages = common.getValueByPath(fromObject, [\n    'productImages',\n  ]);\n  if (parentObject !== undefined && fromProductImages != null) {\n    let transformedList = fromProductImages;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return productImageToVertex(item);\n      });\n    }\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'productImages'],\n      transformedList,\n    );\n  }\n\n  return toObject;\n}\n\nexport function referenceImageAPIInternalToVertex(\n  fromObject: _internal_types.ReferenceImageAPIInternal,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromReferenceImage = common.getValueByPath(fromObject, [\n    'referenceImage',\n  ]);\n  if (fromReferenceImage != null) {\n    common.setValueByPath(\n      toObject,\n      ['referenceImage'],\n      imageToVertex(fromReferenceImage),\n    );\n  }\n\n  const fromReferenceId = common.getValueByPath(fromObject, ['referenceId']);\n  if (fromReferenceId != null) {\n    common.setValueByPath(toObject, ['referenceId'], fromReferenceId);\n  }\n\n  const fromReferenceType = common.getValueByPath(fromObject, [\n    'referenceType',\n  ]);\n  if (fromReferenceType != null) {\n    common.setValueByPath(toObject, ['referenceType'], fromReferenceType);\n  }\n\n  const fromMaskImageConfig = common.getValueByPath(fromObject, [\n    'maskImageConfig',\n  ]);\n  if (fromMaskImageConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['maskImageConfig'],\n      maskReferenceConfigToVertex(fromMaskImageConfig),\n    );\n  }\n\n  const fromControlImageConfig = common.getValueByPath(fromObject, [\n    'controlImageConfig',\n  ]);\n  if (fromControlImageConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['controlImageConfig'],\n      controlReferenceConfigToVertex(fromControlImageConfig),\n    );\n  }\n\n  const fromStyleImageConfig = common.getValueByPath(fromObject, [\n    'styleImageConfig',\n  ]);\n  if (fromStyleImageConfig != null) {\n    common.setValueByPath(toObject, ['styleImageConfig'], fromStyleImageConfig);\n  }\n\n  const fromSubjectImageConfig = common.getValueByPath(fromObject, [\n    'subjectImageConfig',\n  ]);\n  if (fromSubjectImageConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['subjectImageConfig'],\n      fromSubjectImageConfig,\n    );\n  }\n\n  return toObject;\n}\n\nexport function safetyAttributesFromMldev(\n  fromObject: types.SafetyAttributes,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromCategories = common.getValueByPath(fromObject, [\n    'safetyAttributes',\n    'categories',\n  ]);\n  if (fromCategories != null) {\n    common.setValueByPath(toObject, ['categories'], fromCategories);\n  }\n\n  const fromScores = common.getValueByPath(fromObject, [\n    'safetyAttributes',\n    'scores',\n  ]);\n  if (fromScores != null) {\n    common.setValueByPath(toObject, ['scores'], fromScores);\n  }\n\n  const fromContentType = common.getValueByPath(fromObject, ['contentType']);\n  if (fromContentType != null) {\n    common.setValueByPath(toObject, ['contentType'], fromContentType);\n  }\n\n  return toObject;\n}\n\nexport function safetyAttributesFromVertex(\n  fromObject: types.SafetyAttributes,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromCategories = common.getValueByPath(fromObject, [\n    'safetyAttributes',\n    'categories',\n  ]);\n  if (fromCategories != null) {\n    common.setValueByPath(toObject, ['categories'], fromCategories);\n  }\n\n  const fromScores = common.getValueByPath(fromObject, [\n    'safetyAttributes',\n    'scores',\n  ]);\n  if (fromScores != null) {\n    common.setValueByPath(toObject, ['scores'], fromScores);\n  }\n\n  const fromContentType = common.getValueByPath(fromObject, ['contentType']);\n  if (fromContentType != null) {\n    common.setValueByPath(toObject, ['contentType'], fromContentType);\n  }\n\n  return toObject;\n}\n\nexport function safetySettingToMldev(\n  fromObject: types.SafetySetting,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['method']) !== undefined) {\n    throw new Error('method parameter is not supported in Gemini API.');\n  }\n\n  const fromCategory = common.getValueByPath(fromObject, ['category']);\n  if (fromCategory != null) {\n    common.setValueByPath(toObject, ['category'], fromCategory);\n  }\n\n  const fromThreshold = common.getValueByPath(fromObject, ['threshold']);\n  if (fromThreshold != null) {\n    common.setValueByPath(toObject, ['threshold'], fromThreshold);\n  }\n\n  return toObject;\n}\n\nexport function scribbleImageToVertex(\n  fromObject: types.ScribbleImage,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromImage = common.getValueByPath(fromObject, ['image']);\n  if (fromImage != null) {\n    common.setValueByPath(toObject, ['image'], imageToVertex(fromImage));\n  }\n\n  return toObject;\n}\n\nexport function segmentImageConfigToVertex(\n  fromObject: types.SegmentImageConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromMode = common.getValueByPath(fromObject, ['mode']);\n  if (parentObject !== undefined && fromMode != null) {\n    common.setValueByPath(parentObject, ['parameters', 'mode'], fromMode);\n  }\n\n  const fromMaxPredictions = common.getValueByPath(fromObject, [\n    'maxPredictions',\n  ]);\n  if (parentObject !== undefined && fromMaxPredictions != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'maxPredictions'],\n      fromMaxPredictions,\n    );\n  }\n\n  const fromConfidenceThreshold = common.getValueByPath(fromObject, [\n    'confidenceThreshold',\n  ]);\n  if (parentObject !== undefined && fromConfidenceThreshold != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'confidenceThreshold'],\n      fromConfidenceThreshold,\n    );\n  }\n\n  const fromMaskDilation = common.getValueByPath(fromObject, ['maskDilation']);\n  if (parentObject !== undefined && fromMaskDilation != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'maskDilation'],\n      fromMaskDilation,\n    );\n  }\n\n  const fromBinaryColorThreshold = common.getValueByPath(fromObject, [\n    'binaryColorThreshold',\n  ]);\n  if (parentObject !== undefined && fromBinaryColorThreshold != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'binaryColorThreshold'],\n      fromBinaryColorThreshold,\n    );\n  }\n\n  const fromLabels = common.getValueByPath(fromObject, ['labels']);\n  if (parentObject !== undefined && fromLabels != null) {\n    common.setValueByPath(parentObject, ['labels'], fromLabels);\n  }\n\n  return toObject;\n}\n\nexport function segmentImageParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.SegmentImageParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromSource = common.getValueByPath(fromObject, ['source']);\n  if (fromSource != null) {\n    segmentImageSourceToVertex(fromSource, toObject);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    segmentImageConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function segmentImageResponseFromVertex(\n  fromObject: types.SegmentImageResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGeneratedMasks = common.getValueByPath(fromObject, ['predictions']);\n  if (fromGeneratedMasks != null) {\n    let transformedList = fromGeneratedMasks;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return generatedImageMaskFromVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['generatedMasks'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function segmentImageSourceToVertex(\n  fromObject: types.SegmentImageSource,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPrompt = common.getValueByPath(fromObject, ['prompt']);\n  if (parentObject !== undefined && fromPrompt != null) {\n    common.setValueByPath(parentObject, ['instances[0]', 'prompt'], fromPrompt);\n  }\n\n  const fromImage = common.getValueByPath(fromObject, ['image']);\n  if (parentObject !== undefined && fromImage != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'image'],\n      imageToVertex(fromImage),\n    );\n  }\n\n  const fromScribbleImage = common.getValueByPath(fromObject, [\n    'scribbleImage',\n  ]);\n  if (parentObject !== undefined && fromScribbleImage != null) {\n    common.setValueByPath(\n      parentObject,\n      ['instances[0]', 'scribble'],\n      scribbleImageToVertex(fromScribbleImage),\n    );\n  }\n\n  return toObject;\n}\n\nexport function speechConfigToVertex(\n  fromObject: types.SpeechConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVoiceConfig = common.getValueByPath(fromObject, ['voiceConfig']);\n  if (fromVoiceConfig != null) {\n    common.setValueByPath(toObject, ['voiceConfig'], fromVoiceConfig);\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['multiSpeakerVoiceConfig']) !== undefined\n  ) {\n    throw new Error(\n      'multiSpeakerVoiceConfig parameter is not supported in Vertex AI.',\n    );\n  }\n\n  const fromLanguageCode = common.getValueByPath(fromObject, ['languageCode']);\n  if (fromLanguageCode != null) {\n    common.setValueByPath(toObject, ['languageCode'], fromLanguageCode);\n  }\n\n  return toObject;\n}\n\nexport function toolToMldev(fromObject: types.Tool): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionDeclarations = common.getValueByPath(fromObject, [\n    'functionDeclarations',\n  ]);\n  if (fromFunctionDeclarations != null) {\n    let transformedList = fromFunctionDeclarations;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['functionDeclarations'], transformedList);\n  }\n\n  if (common.getValueByPath(fromObject, ['retrieval']) !== undefined) {\n    throw new Error('retrieval parameter is not supported in Gemini API.');\n  }\n\n  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearch'],\n      googleSearchToMldev(fromGoogleSearch),\n    );\n  }\n\n  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [\n    'googleSearchRetrieval',\n  ]);\n  if (fromGoogleSearchRetrieval != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearchRetrieval'],\n      fromGoogleSearchRetrieval,\n    );\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['enterpriseWebSearch']) !== undefined\n  ) {\n    throw new Error(\n      'enterpriseWebSearch parameter is not supported in Gemini API.',\n    );\n  }\n\n  const fromGoogleMaps = common.getValueByPath(fromObject, ['googleMaps']);\n  if (fromGoogleMaps != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleMaps'],\n      googleMapsToMldev(fromGoogleMaps),\n    );\n  }\n\n  const fromUrlContext = common.getValueByPath(fromObject, ['urlContext']);\n  if (fromUrlContext != null) {\n    common.setValueByPath(toObject, ['urlContext'], fromUrlContext);\n  }\n\n  const fromComputerUse = common.getValueByPath(fromObject, ['computerUse']);\n  if (fromComputerUse != null) {\n    common.setValueByPath(toObject, ['computerUse'], fromComputerUse);\n  }\n\n  const fromCodeExecution = common.getValueByPath(fromObject, [\n    'codeExecution',\n  ]);\n  if (fromCodeExecution != null) {\n    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n\n  return toObject;\n}\n\nexport function toolToVertex(fromObject: types.Tool): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionDeclarations = common.getValueByPath(fromObject, [\n    'functionDeclarations',\n  ]);\n  if (fromFunctionDeclarations != null) {\n    let transformedList = fromFunctionDeclarations;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return functionDeclarationToVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['functionDeclarations'], transformedList);\n  }\n\n  const fromRetrieval = common.getValueByPath(fromObject, ['retrieval']);\n  if (fromRetrieval != null) {\n    common.setValueByPath(toObject, ['retrieval'], fromRetrieval);\n  }\n\n  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    common.setValueByPath(toObject, ['googleSearch'], fromGoogleSearch);\n  }\n\n  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [\n    'googleSearchRetrieval',\n  ]);\n  if (fromGoogleSearchRetrieval != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearchRetrieval'],\n      fromGoogleSearchRetrieval,\n    );\n  }\n\n  const fromEnterpriseWebSearch = common.getValueByPath(fromObject, [\n    'enterpriseWebSearch',\n  ]);\n  if (fromEnterpriseWebSearch != null) {\n    common.setValueByPath(\n      toObject,\n      ['enterpriseWebSearch'],\n      fromEnterpriseWebSearch,\n    );\n  }\n\n  const fromGoogleMaps = common.getValueByPath(fromObject, ['googleMaps']);\n  if (fromGoogleMaps != null) {\n    common.setValueByPath(toObject, ['googleMaps'], fromGoogleMaps);\n  }\n\n  const fromUrlContext = common.getValueByPath(fromObject, ['urlContext']);\n  if (fromUrlContext != null) {\n    common.setValueByPath(toObject, ['urlContext'], fromUrlContext);\n  }\n\n  const fromComputerUse = common.getValueByPath(fromObject, ['computerUse']);\n  if (fromComputerUse != null) {\n    common.setValueByPath(toObject, ['computerUse'], fromComputerUse);\n  }\n\n  const fromCodeExecution = common.getValueByPath(fromObject, [\n    'codeExecution',\n  ]);\n  if (fromCodeExecution != null) {\n    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n\n  return toObject;\n}\n\nexport function tunedModelInfoFromMldev(\n  fromObject: types.TunedModelInfo,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);\n  if (fromBaseModel != null) {\n    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);\n  }\n\n  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    common.setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n\n  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n\n  return toObject;\n}\n\nexport function tunedModelInfoFromVertex(\n  fromObject: types.TunedModelInfo,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromBaseModel = common.getValueByPath(fromObject, [\n    'labels',\n    'google-vertex-llm-tuning-base-model-id',\n  ]);\n  if (fromBaseModel != null) {\n    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);\n  }\n\n  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    common.setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n\n  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n\n  return toObject;\n}\n\nexport function updateModelConfigToMldev(\n  fromObject: types.UpdateModelConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (parentObject !== undefined && fromDisplayName != null) {\n    common.setValueByPath(parentObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (parentObject !== undefined && fromDescription != null) {\n    common.setValueByPath(parentObject, ['description'], fromDescription);\n  }\n\n  const fromDefaultCheckpointId = common.getValueByPath(fromObject, [\n    'defaultCheckpointId',\n  ]);\n  if (parentObject !== undefined && fromDefaultCheckpointId != null) {\n    common.setValueByPath(\n      parentObject,\n      ['defaultCheckpointId'],\n      fromDefaultCheckpointId,\n    );\n  }\n\n  return toObject;\n}\n\nexport function updateModelConfigToVertex(\n  fromObject: types.UpdateModelConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);\n  if (parentObject !== undefined && fromDisplayName != null) {\n    common.setValueByPath(parentObject, ['displayName'], fromDisplayName);\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (parentObject !== undefined && fromDescription != null) {\n    common.setValueByPath(parentObject, ['description'], fromDescription);\n  }\n\n  const fromDefaultCheckpointId = common.getValueByPath(fromObject, [\n    'defaultCheckpointId',\n  ]);\n  if (parentObject !== undefined && fromDefaultCheckpointId != null) {\n    common.setValueByPath(\n      parentObject,\n      ['defaultCheckpointId'],\n      fromDefaultCheckpointId,\n    );\n  }\n\n  return toObject;\n}\n\nexport function updateModelParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.UpdateModelParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'name'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    updateModelConfigToMldev(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function updateModelParametersToVertex(\n  apiClient: ApiClient,\n  fromObject: types.UpdateModelParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    updateModelConfigToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function upscaleImageAPIConfigInternalToVertex(\n  fromObject: _internal_types.UpscaleImageAPIConfigInternal,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromOutputGcsUri = common.getValueByPath(fromObject, ['outputGcsUri']);\n  if (parentObject !== undefined && fromOutputGcsUri != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'storageUri'],\n      fromOutputGcsUri,\n    );\n  }\n\n  const fromIncludeRaiReason = common.getValueByPath(fromObject, [\n    'includeRaiReason',\n  ]);\n  if (parentObject !== undefined && fromIncludeRaiReason != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'includeRaiReason'],\n      fromIncludeRaiReason,\n    );\n  }\n\n  const fromOutputMimeType = common.getValueByPath(fromObject, [\n    'outputMimeType',\n  ]);\n  if (parentObject !== undefined && fromOutputMimeType != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'mimeType'],\n      fromOutputMimeType,\n    );\n  }\n\n  const fromOutputCompressionQuality = common.getValueByPath(fromObject, [\n    'outputCompressionQuality',\n  ]);\n  if (parentObject !== undefined && fromOutputCompressionQuality != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'outputOptions', 'compressionQuality'],\n      fromOutputCompressionQuality,\n    );\n  }\n\n  const fromEnhanceInputImage = common.getValueByPath(fromObject, [\n    'enhanceInputImage',\n  ]);\n  if (parentObject !== undefined && fromEnhanceInputImage != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'upscaleConfig', 'enhanceInputImage'],\n      fromEnhanceInputImage,\n    );\n  }\n\n  const fromImagePreservationFactor = common.getValueByPath(fromObject, [\n    'imagePreservationFactor',\n  ]);\n  if (parentObject !== undefined && fromImagePreservationFactor != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'upscaleConfig', 'imagePreservationFactor'],\n      fromImagePreservationFactor,\n    );\n  }\n\n  const fromLabels = common.getValueByPath(fromObject, ['labels']);\n  if (parentObject !== undefined && fromLabels != null) {\n    common.setValueByPath(parentObject, ['labels'], fromLabels);\n  }\n\n  const fromNumberOfImages = common.getValueByPath(fromObject, [\n    'numberOfImages',\n  ]);\n  if (parentObject !== undefined && fromNumberOfImages != null) {\n    common.setValueByPath(\n      parentObject,\n      ['parameters', 'sampleCount'],\n      fromNumberOfImages,\n    );\n  }\n\n  const fromMode = common.getValueByPath(fromObject, ['mode']);\n  if (parentObject !== undefined && fromMode != null) {\n    common.setValueByPath(parentObject, ['parameters', 'mode'], fromMode);\n  }\n\n  return toObject;\n}\n\nexport function upscaleImageAPIParametersInternalToVertex(\n  apiClient: ApiClient,\n  fromObject: _internal_types.UpscaleImageAPIParametersInternal,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['_url', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromImage = common.getValueByPath(fromObject, ['image']);\n  if (fromImage != null) {\n    common.setValueByPath(\n      toObject,\n      ['instances[0]', 'image'],\n      imageToVertex(fromImage),\n    );\n  }\n\n  const fromUpscaleFactor = common.getValueByPath(fromObject, [\n    'upscaleFactor',\n  ]);\n  if (fromUpscaleFactor != null) {\n    common.setValueByPath(\n      toObject,\n      ['parameters', 'upscaleConfig', 'upscaleFactor'],\n      fromUpscaleFactor,\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    upscaleImageAPIConfigInternalToVertex(fromConfig, toObject);\n  }\n\n  return toObject;\n}\n\nexport function upscaleImageResponseFromVertex(\n  fromObject: types.UpscaleImageResponse,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromGeneratedImages = common.getValueByPath(fromObject, [\n    'predictions',\n  ]);\n  if (fromGeneratedImages != null) {\n    let transformedList = fromGeneratedImages;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return generatedImageFromVertex(item);\n      });\n    }\n    common.setValueByPath(toObject, ['generatedImages'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function videoFromMldev(\n  fromObject: types.Video,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromUri = common.getValueByPath(fromObject, ['uri']);\n  if (fromUri != null) {\n    common.setValueByPath(toObject, ['uri'], fromUri);\n  }\n\n  const fromVideoBytes = common.getValueByPath(fromObject, ['encodedVideo']);\n  if (fromVideoBytes != null) {\n    common.setValueByPath(toObject, ['videoBytes'], t.tBytes(fromVideoBytes));\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['encoding']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function videoFromVertex(\n  fromObject: types.Video,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromUri = common.getValueByPath(fromObject, ['gcsUri']);\n  if (fromUri != null) {\n    common.setValueByPath(toObject, ['uri'], fromUri);\n  }\n\n  const fromVideoBytes = common.getValueByPath(fromObject, [\n    'bytesBase64Encoded',\n  ]);\n  if (fromVideoBytes != null) {\n    common.setValueByPath(toObject, ['videoBytes'], t.tBytes(fromVideoBytes));\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function videoGenerationMaskToVertex(\n  fromObject: types.VideoGenerationMask,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromImage = common.getValueByPath(fromObject, ['image']);\n  if (fromImage != null) {\n    common.setValueByPath(toObject, ['_self'], imageToVertex(fromImage));\n  }\n\n  const fromMaskMode = common.getValueByPath(fromObject, ['maskMode']);\n  if (fromMaskMode != null) {\n    common.setValueByPath(toObject, ['maskMode'], fromMaskMode);\n  }\n\n  return toObject;\n}\n\nexport function videoGenerationReferenceImageToMldev(\n  fromObject: types.VideoGenerationReferenceImage,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromImage = common.getValueByPath(fromObject, ['image']);\n  if (fromImage != null) {\n    common.setValueByPath(toObject, ['image'], imageToMldev(fromImage));\n  }\n\n  const fromReferenceType = common.getValueByPath(fromObject, [\n    'referenceType',\n  ]);\n  if (fromReferenceType != null) {\n    common.setValueByPath(toObject, ['referenceType'], fromReferenceType);\n  }\n\n  return toObject;\n}\n\nexport function videoGenerationReferenceImageToVertex(\n  fromObject: types.VideoGenerationReferenceImage,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromImage = common.getValueByPath(fromObject, ['image']);\n  if (fromImage != null) {\n    common.setValueByPath(toObject, ['image'], imageToVertex(fromImage));\n  }\n\n  const fromReferenceType = common.getValueByPath(fromObject, [\n    'referenceType',\n  ]);\n  if (fromReferenceType != null) {\n    common.setValueByPath(toObject, ['referenceType'], fromReferenceType);\n  }\n\n  return toObject;\n}\n\nexport function videoToMldev(fromObject: types.Video): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromUri = common.getValueByPath(fromObject, ['uri']);\n  if (fromUri != null) {\n    common.setValueByPath(toObject, ['uri'], fromUri);\n  }\n\n  const fromVideoBytes = common.getValueByPath(fromObject, ['videoBytes']);\n  if (fromVideoBytes != null) {\n    common.setValueByPath(toObject, ['encodedVideo'], t.tBytes(fromVideoBytes));\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['encoding'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function videoToVertex(\n  fromObject: types.Video,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromUri = common.getValueByPath(fromObject, ['uri']);\n  if (fromUri != null) {\n    common.setValueByPath(toObject, ['gcsUri'], fromUri);\n  }\n\n  const fromVideoBytes = common.getValueByPath(fromObject, ['videoBytes']);\n  if (fromVideoBytes != null) {\n    common.setValueByPath(\n      toObject,\n      ['bytesBase64Encoded'],\n      t.tBytes(fromVideoBytes),\n    );\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {Auth} from './_auth.js';\nimport * as common from './_common.js';\nimport {Downloader} from './_downloader.js';\nimport {Uploader} from './_uploader.js';\nimport {ApiError} from './errors.js';\nimport {\n  DownloadFileParameters,\n  File,\n  HttpOptions,\n  HttpResponse,\n  UploadFileConfig,\n} from './types.js';\n\nconst CONTENT_TYPE_HEADER = 'Content-Type';\nconst SERVER_TIMEOUT_HEADER = 'X-Server-Timeout';\nconst USER_AGENT_HEADER = 'User-Agent';\nexport const GOOGLE_API_CLIENT_HEADER = 'x-goog-api-client';\nexport const SDK_VERSION = '1.27.0'; // x-release-please-version\nconst LIBRARY_LABEL = `google-genai-sdk/${SDK_VERSION}`;\nconst VERTEX_AI_API_DEFAULT_VERSION = 'v1beta1';\nconst GOOGLE_AI_API_DEFAULT_VERSION = 'v1beta';\nconst responseLineRE = /^\\s*data: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n\n/**\n * Options for initializing the ApiClient. The ApiClient uses the parameters\n * for authentication purposes as well as to infer if SDK should send the\n * request to Vertex AI or Gemini API.\n */\nexport interface ApiClientInitOptions {\n  /**\n   * The object used for adding authentication headers to API requests.\n   */\n  auth: Auth;\n  /**\n   * The uploader to use for uploading files. This field is required for\n   * creating a client, will be set through the Node_client or Web_client.\n   */\n  uploader: Uploader;\n  /**\n   * Optional. The downloader to use for downloading files. This field is\n   * required for creating a client, will be set through the Node_client or\n   * Web_client.\n   */\n  downloader: Downloader;\n  /**\n   * Optional. The Google Cloud project ID for Vertex AI users.\n   * It is not the numeric project name.\n   * If not provided, SDK will try to resolve it from runtime environment.\n   */\n  project?: string;\n  /**\n   * Optional. The Google Cloud project location for Vertex AI users.\n   * If not provided, SDK will try to resolve it from runtime environment.\n   */\n  location?: string;\n  /**\n   * The API Key. This is required for Gemini API users.\n   */\n  apiKey?: string;\n  /**\n   * Optional. Set to true if you intend to call Vertex AI endpoints.\n   * If unset, default SDK behavior is to call Gemini API.\n   */\n  vertexai?: boolean;\n  /**\n   * Optional. The API version for the endpoint.\n   * If unset, SDK will choose a default api version.\n   */\n  apiVersion?: string;\n  /**\n   * Optional. A set of customizable configuration for HTTP requests.\n   */\n  httpOptions?: HttpOptions;\n  /**\n   * Optional. An extra string to append at the end of the User-Agent header.\n   *\n   * This can be used to e.g specify the runtime and its version.\n   */\n  userAgentExtra?: string;\n}\n\n/**\n * Represents the necessary information to send a request to an API endpoint.\n * This interface defines the structure for constructing and executing HTTP\n * requests.\n */\nexport interface HttpRequest {\n  /**\n   * URL path from the modules, this path is appended to the base API URL to\n   * form the complete request URL.\n   *\n   * If you wish to set full URL, use httpOptions.baseUrl instead. Example to\n   * set full URL in the request:\n   *\n   * const request: HttpRequest = {\n   *   path: '',\n   *   httpOptions: {\n   *     baseUrl: 'https://<custom-full-url>',\n   *     apiVersion: '',\n   *   },\n   *   httpMethod: 'GET',\n   * };\n   *\n   * The result URL will be: https://<custom-full-url>\n   *\n   */\n  path: string;\n  /**\n   * Optional query parameters to be appended to the request URL.\n   */\n  queryParams?: Record<string, string>;\n  /**\n   * Optional request body in json string or Blob format, GET request doesn't\n   * need a request body.\n   */\n  body?: string | Blob;\n  /**\n   * The HTTP method to be used for the request.\n   */\n  httpMethod: 'GET' | 'POST' | 'PATCH' | 'DELETE';\n  /**\n   * Optional set of customizable configuration for HTTP requests.\n   */\n  httpOptions?: HttpOptions;\n  /**\n   * Optional abort signal which can be used to cancel the request.\n   */\n  abortSignal?: AbortSignal;\n}\n\n/**\n * The ApiClient class is used to send requests to the Gemini API or Vertex AI\n * endpoints.\n */\nexport class ApiClient {\n  readonly clientOptions: ApiClientInitOptions;\n\n  constructor(opts: ApiClientInitOptions) {\n    this.clientOptions = {\n      ...opts,\n      project: opts.project,\n      location: opts.location,\n      apiKey: opts.apiKey,\n      vertexai: opts.vertexai,\n    };\n\n    const initHttpOptions: HttpOptions = {};\n\n    if (this.clientOptions.vertexai) {\n      initHttpOptions.apiVersion =\n        this.clientOptions.apiVersion ?? VERTEX_AI_API_DEFAULT_VERSION;\n      initHttpOptions.baseUrl = this.baseUrlFromProjectLocation();\n      this.normalizeAuthParameters();\n    } else {\n      // Gemini API\n      initHttpOptions.apiVersion =\n        this.clientOptions.apiVersion ?? GOOGLE_AI_API_DEFAULT_VERSION;\n      initHttpOptions.baseUrl = `https://generativelanguage.googleapis.com/`;\n    }\n\n    initHttpOptions.headers = this.getDefaultHeaders();\n\n    this.clientOptions.httpOptions = initHttpOptions;\n\n    if (opts.httpOptions) {\n      this.clientOptions.httpOptions = this.patchHttpOptions(\n        initHttpOptions,\n        opts.httpOptions,\n      );\n    }\n  }\n\n  /**\n   * Determines the base URL for Vertex AI based on project and location.\n   * Uses the global endpoint if location is 'global' or if project/location\n   * are not specified (implying API key usage).\n   * @private\n   */\n  private baseUrlFromProjectLocation(): string {\n    if (\n      this.clientOptions.project &&\n      this.clientOptions.location &&\n      this.clientOptions.location !== 'global'\n    ) {\n      // Regional endpoint\n      return `https://${this.clientOptions.location}-aiplatform.googleapis.com/`;\n    }\n    // Global endpoint (covers 'global' location and API key usage)\n    return `https://aiplatform.googleapis.com/`;\n  }\n\n  /**\n   * Normalizes authentication parameters for Vertex AI.\n   * If project and location are provided, API key is cleared.\n   * If project and location are not provided (implying API key usage),\n   * project and location are cleared.\n   * @private\n   */\n  private normalizeAuthParameters(): void {\n    if (this.clientOptions.project && this.clientOptions.location) {\n      // Using project/location for auth, clear potential API key\n      this.clientOptions.apiKey = undefined;\n      return;\n    }\n    // Using API key for auth (or no auth provided yet), clear project/location\n    this.clientOptions.project = undefined;\n    this.clientOptions.location = undefined;\n  }\n\n  isVertexAI(): boolean {\n    return this.clientOptions.vertexai ?? false;\n  }\n\n  getProject() {\n    return this.clientOptions.project;\n  }\n\n  getLocation() {\n    return this.clientOptions.location;\n  }\n\n  getApiVersion() {\n    if (\n      this.clientOptions.httpOptions &&\n      this.clientOptions.httpOptions.apiVersion !== undefined\n    ) {\n      return this.clientOptions.httpOptions.apiVersion;\n    }\n    throw new Error('API version is not set.');\n  }\n\n  getBaseUrl() {\n    if (\n      this.clientOptions.httpOptions &&\n      this.clientOptions.httpOptions.baseUrl !== undefined\n    ) {\n      return this.clientOptions.httpOptions.baseUrl;\n    }\n    throw new Error('Base URL is not set.');\n  }\n\n  getRequestUrl() {\n    return this.getRequestUrlInternal(this.clientOptions.httpOptions);\n  }\n\n  getHeaders() {\n    if (\n      this.clientOptions.httpOptions &&\n      this.clientOptions.httpOptions.headers !== undefined\n    ) {\n      return this.clientOptions.httpOptions.headers;\n    } else {\n      throw new Error('Headers are not set.');\n    }\n  }\n\n  private getRequestUrlInternal(httpOptions?: HttpOptions) {\n    if (\n      !httpOptions ||\n      httpOptions.baseUrl === undefined ||\n      httpOptions.apiVersion === undefined\n    ) {\n      throw new Error('HTTP options are not correctly set.');\n    }\n    const baseUrl = httpOptions.baseUrl.endsWith('/')\n      ? httpOptions.baseUrl.slice(0, -1)\n      : httpOptions.baseUrl;\n    const urlElement: Array<string> = [baseUrl];\n    if (httpOptions.apiVersion && httpOptions.apiVersion !== '') {\n      urlElement.push(httpOptions.apiVersion);\n    }\n    return urlElement.join('/');\n  }\n\n  getBaseResourcePath() {\n    return `projects/${this.clientOptions.project}/locations/${\n      this.clientOptions.location\n    }`;\n  }\n\n  getApiKey() {\n    return this.clientOptions.apiKey;\n  }\n\n  getWebsocketBaseUrl() {\n    const baseUrl = this.getBaseUrl();\n    const urlParts = new URL(baseUrl);\n    urlParts.protocol = urlParts.protocol == 'http:' ? 'ws' : 'wss';\n    return urlParts.toString();\n  }\n\n  setBaseUrl(url: string) {\n    if (this.clientOptions.httpOptions) {\n      this.clientOptions.httpOptions.baseUrl = url;\n    } else {\n      throw new Error('HTTP options are not correctly set.');\n    }\n  }\n\n  private constructUrl(\n    path: string,\n    httpOptions: HttpOptions,\n    prependProjectLocation: boolean,\n  ): URL {\n    const urlElement: Array<string> = [this.getRequestUrlInternal(httpOptions)];\n    if (prependProjectLocation) {\n      urlElement.push(this.getBaseResourcePath());\n    }\n    if (path !== '') {\n      urlElement.push(path);\n    }\n    const url = new URL(`${urlElement.join('/')}`);\n\n    return url;\n  }\n\n  private shouldPrependVertexProjectPath(request: HttpRequest): boolean {\n    if (this.clientOptions.apiKey) {\n      return false;\n    }\n    if (!this.clientOptions.vertexai) {\n      return false;\n    }\n    if (request.path.startsWith('projects/')) {\n      // Assume the path already starts with\n      // `projects/<project>/location/<location>`.\n      return false;\n    }\n    if (\n      request.httpMethod === 'GET' &&\n      request.path.startsWith('publishers/google/models')\n    ) {\n      // These paths are used by Vertex's models.get and models.list\n      // calls. For base models Vertex does not accept a project/location\n      // prefix (for tuned model the prefix is required).\n      return false;\n    }\n    return true;\n  }\n\n  async request(request: HttpRequest): Promise<HttpResponse> {\n    let patchedHttpOptions = this.clientOptions.httpOptions!;\n    if (request.httpOptions) {\n      patchedHttpOptions = this.patchHttpOptions(\n        this.clientOptions.httpOptions!,\n        request.httpOptions,\n      );\n    }\n\n    const prependProjectLocation = this.shouldPrependVertexProjectPath(request);\n    const url = this.constructUrl(\n      request.path,\n      patchedHttpOptions,\n      prependProjectLocation,\n    );\n    if (request.queryParams) {\n      for (const [key, value] of Object.entries(request.queryParams)) {\n        url.searchParams.append(key, String(value));\n      }\n    }\n    let requestInit: RequestInit = {};\n    if (request.httpMethod === 'GET') {\n      if (request.body && request.body !== '{}') {\n        throw new Error(\n          'Request body should be empty for GET request, but got non empty request body',\n        );\n      }\n    } else {\n      requestInit.body = request.body;\n    }\n    requestInit = await this.includeExtraHttpOptionsToRequestInit(\n      requestInit,\n      patchedHttpOptions,\n      url.toString(),\n      request.abortSignal,\n    );\n    return this.unaryApiCall(url, requestInit, request.httpMethod);\n  }\n\n  private patchHttpOptions(\n    baseHttpOptions: HttpOptions,\n    requestHttpOptions: HttpOptions,\n  ): HttpOptions {\n    const patchedHttpOptions = JSON.parse(\n      JSON.stringify(baseHttpOptions),\n    ) as HttpOptions;\n\n    for (const [key, value] of Object.entries(requestHttpOptions)) {\n      // Records compile to objects.\n      if (typeof value === 'object') {\n        // @ts-expect-error TS2345TS7053: Element implicitly has an 'any' type\n        // because expression of type 'string' can't be used to index type\n        // 'HttpOptions'.\n        patchedHttpOptions[key] = {...patchedHttpOptions[key], ...value};\n      } else if (value !== undefined) {\n        // @ts-expect-error TS2345TS7053: Element implicitly has an 'any' type\n        // because expression of type 'string' can't be used to index type\n        // 'HttpOptions'.\n        patchedHttpOptions[key] = value;\n      }\n    }\n    return patchedHttpOptions;\n  }\n\n  async requestStream(\n    request: HttpRequest,\n  ): Promise<AsyncGenerator<HttpResponse>> {\n    let patchedHttpOptions = this.clientOptions.httpOptions!;\n    if (request.httpOptions) {\n      patchedHttpOptions = this.patchHttpOptions(\n        this.clientOptions.httpOptions!,\n        request.httpOptions,\n      );\n    }\n\n    const prependProjectLocation = this.shouldPrependVertexProjectPath(request);\n    const url = this.constructUrl(\n      request.path,\n      patchedHttpOptions,\n      prependProjectLocation,\n    );\n    if (!url.searchParams.has('alt') || url.searchParams.get('alt') !== 'sse') {\n      url.searchParams.set('alt', 'sse');\n    }\n    let requestInit: RequestInit = {};\n    requestInit.body = request.body;\n    requestInit = await this.includeExtraHttpOptionsToRequestInit(\n      requestInit,\n      patchedHttpOptions,\n      url.toString(),\n      request.abortSignal,\n    );\n    return this.streamApiCall(url, requestInit, request.httpMethod);\n  }\n\n  private async includeExtraHttpOptionsToRequestInit(\n    requestInit: RequestInit,\n    httpOptions: HttpOptions,\n    url: string,\n    abortSignal?: AbortSignal,\n  ): Promise<RequestInit> {\n    if ((httpOptions && httpOptions.timeout) || abortSignal) {\n      const abortController = new AbortController();\n      const signal = abortController.signal;\n      if (httpOptions.timeout && httpOptions?.timeout > 0) {\n        const timeoutHandle = setTimeout(\n          () => abortController.abort(),\n          httpOptions.timeout,\n        );\n        if (\n          timeoutHandle &&\n          typeof (timeoutHandle as unknown as NodeJS.Timeout).unref ===\n            'function'\n        ) {\n          // call unref to prevent nodejs process from hanging, see\n          // https://nodejs.org/api/timers.html#timeoutunref\n          timeoutHandle.unref();\n        }\n      }\n      if (abortSignal) {\n        abortSignal.addEventListener('abort', () => {\n          abortController.abort();\n        });\n      }\n      requestInit.signal = signal;\n    }\n    if (httpOptions && httpOptions.extraBody !== null) {\n      includeExtraBodyToRequestInit(\n        requestInit,\n        httpOptions.extraBody as Record<string, unknown>,\n      );\n    }\n    requestInit.headers = await this.getHeadersInternal(httpOptions, url);\n    return requestInit;\n  }\n\n  private async unaryApiCall(\n    url: URL,\n    requestInit: RequestInit,\n    httpMethod: 'GET' | 'POST' | 'PATCH' | 'DELETE',\n  ): Promise<HttpResponse> {\n    return this.apiCall(url.toString(), {\n      ...requestInit,\n      method: httpMethod,\n    })\n      .then(async (response) => {\n        await throwErrorIfNotOK(response);\n        return new HttpResponse(response);\n      })\n      .catch((e) => {\n        if (e instanceof Error) {\n          throw e;\n        } else {\n          throw new Error(JSON.stringify(e));\n        }\n      });\n  }\n\n  private async streamApiCall(\n    url: URL,\n    requestInit: RequestInit,\n    httpMethod: 'GET' | 'POST' | 'PATCH' | 'DELETE',\n  ): Promise<AsyncGenerator<HttpResponse>> {\n    return this.apiCall(url.toString(), {\n      ...requestInit,\n      method: httpMethod,\n    })\n      .then(async (response) => {\n        await throwErrorIfNotOK(response);\n        return this.processStreamResponse(response);\n      })\n      .catch((e) => {\n        if (e instanceof Error) {\n          throw e;\n        } else {\n          throw new Error(JSON.stringify(e));\n        }\n      });\n  }\n\n  async *processStreamResponse(\n    response: Response,\n  ): AsyncGenerator<HttpResponse> {\n    const reader = response?.body?.getReader();\n    const decoder = new TextDecoder('utf-8');\n    if (!reader) {\n      throw new Error('Response body is empty');\n    }\n\n    try {\n      let buffer = '';\n      while (true) {\n        const {done, value} = await reader.read();\n        if (done) {\n          if (buffer.trim().length > 0) {\n            throw new Error('Incomplete JSON segment at the end');\n          }\n          break;\n        }\n        const chunkString = decoder.decode(value, {stream: true});\n\n        // Parse and throw an error if the chunk contains an error.\n        try {\n          const chunkJson = JSON.parse(chunkString) as Record<string, unknown>;\n          if ('error' in chunkJson) {\n            const errorJson = JSON.parse(\n              JSON.stringify(chunkJson['error']),\n            ) as Record<string, unknown>;\n            const status = errorJson['status'] as string;\n            const code = errorJson['code'] as number;\n            const errorMessage = `got status: ${status}. ${JSON.stringify(\n              chunkJson,\n            )}`;\n            if (code >= 400 && code < 600) {\n              const apiError = new ApiError({\n                message: errorMessage,\n                status: code,\n              });\n              throw apiError;\n            }\n          }\n        } catch (e: unknown) {\n          const error = e as Error;\n          if (error.name === 'ApiError') {\n            throw e;\n          }\n        }\n        buffer += chunkString;\n        let match = buffer.match(responseLineRE);\n        while (match) {\n          const processedChunkString = match[1];\n          try {\n            const partialResponse = new Response(processedChunkString, {\n              headers: response?.headers,\n              status: response?.status,\n              statusText: response?.statusText,\n            });\n            yield new HttpResponse(partialResponse);\n            buffer = buffer.slice(match[0].length);\n            match = buffer.match(responseLineRE);\n          } catch (e) {\n            throw new Error(\n              `exception parsing stream chunk ${processedChunkString}. ${e}`,\n            );\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n  private async apiCall(\n    url: string,\n    requestInit: RequestInit,\n  ): Promise<Response> {\n    return fetch(url, requestInit).catch((e) => {\n      throw new Error(`exception ${e} sending request`);\n    });\n  }\n\n  getDefaultHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {};\n\n    const versionHeaderValue =\n      LIBRARY_LABEL + ' ' + this.clientOptions.userAgentExtra;\n\n    headers[USER_AGENT_HEADER] = versionHeaderValue;\n    headers[GOOGLE_API_CLIENT_HEADER] = versionHeaderValue;\n    headers[CONTENT_TYPE_HEADER] = 'application/json';\n\n    return headers;\n  }\n\n  private async getHeadersInternal(\n    httpOptions: HttpOptions | undefined,\n    url: string,\n  ): Promise<Headers> {\n    const headers = new Headers();\n    if (httpOptions && httpOptions.headers) {\n      for (const [key, value] of Object.entries(httpOptions.headers)) {\n        headers.append(key, value);\n      }\n      // Append a timeout header if it is set, note that the timeout option is\n      // in milliseconds but the header is in seconds.\n      if (httpOptions.timeout && httpOptions.timeout > 0) {\n        headers.append(\n          SERVER_TIMEOUT_HEADER,\n          String(Math.ceil(httpOptions.timeout / 1000)),\n        );\n      }\n    }\n    await this.clientOptions.auth.addAuthHeaders(headers, url);\n    return headers;\n  }\n\n  /**\n   * Uploads a file asynchronously using Gemini API only, this is not supported\n   * in Vertex AI.\n   *\n   * @param file The string path to the file to be uploaded or a Blob object.\n   * @param config Optional parameters specified in the `UploadFileConfig`\n   *     interface. @see {@link UploadFileConfig}\n   * @return A promise that resolves to a `File` object.\n   * @throws An error if called on a Vertex AI client.\n   * @throws An error if the `mimeType` is not provided and can not be inferred,\n   */\n  async uploadFile(\n    file: string | Blob,\n    config?: UploadFileConfig,\n  ): Promise<File> {\n    const fileToUpload: File = {};\n    if (config != null) {\n      fileToUpload.mimeType = config.mimeType;\n      fileToUpload.name = config.name;\n      fileToUpload.displayName = config.displayName;\n    }\n\n    if (fileToUpload.name && !fileToUpload.name.startsWith('files/')) {\n      fileToUpload.name = `files/${fileToUpload.name}`;\n    }\n\n    const uploader = this.clientOptions.uploader;\n    const fileStat = await uploader.stat(file);\n    fileToUpload.sizeBytes = String(fileStat.size);\n    const mimeType = config?.mimeType ?? fileStat.type;\n    if (mimeType === undefined || mimeType === '') {\n      throw new Error(\n        'Can not determine mimeType. Please provide mimeType in the config.',\n      );\n    }\n    fileToUpload.mimeType = mimeType;\n\n    const uploadUrl = await this.fetchUploadUrl(fileToUpload, config);\n    return uploader.upload(file, uploadUrl, this);\n  }\n\n  /**\n   * Downloads a file asynchronously to the specified path.\n   *\n   * @params params - The parameters for the download request, see {@link\n   * DownloadFileParameters}\n   */\n  async downloadFile(params: DownloadFileParameters): Promise<void> {\n    const downloader = this.clientOptions.downloader;\n    await downloader.download(params, this);\n  }\n\n  private async fetchUploadUrl(\n    file: File,\n    config?: UploadFileConfig,\n  ): Promise<string> {\n    let httpOptions: HttpOptions = {};\n    if (config?.httpOptions) {\n      httpOptions = config.httpOptions;\n    } else {\n      httpOptions = {\n        apiVersion: '', // api-version is set in the path.\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Goog-Upload-Protocol': 'resumable',\n          'X-Goog-Upload-Command': 'start',\n          'X-Goog-Upload-Header-Content-Length': `${file.sizeBytes}`,\n          'X-Goog-Upload-Header-Content-Type': `${file.mimeType}`,\n        },\n      };\n    }\n\n    const body: Record<string, File> = {\n      'file': file,\n    };\n    const httpResponse = await this.request({\n      path: common.formatMap(\n        'upload/v1beta/files',\n        body['_url'] as Record<string, unknown>,\n      ),\n      body: JSON.stringify(body),\n      httpMethod: 'POST',\n      httpOptions,\n    });\n\n    if (!httpResponse || !httpResponse?.headers) {\n      throw new Error(\n        'Server did not return an HttpResponse or the returned HttpResponse did not have headers.',\n      );\n    }\n\n    const uploadUrl: string | undefined =\n      httpResponse?.headers?.['x-goog-upload-url'];\n    if (uploadUrl === undefined) {\n      throw new Error(\n        'Failed to get upload url. Server did not return the x-google-upload-url in the headers',\n      );\n    }\n    return uploadUrl;\n  }\n}\n\nasync function throwErrorIfNotOK(response: Response | undefined) {\n  if (response === undefined) {\n    throw new Error('response is undefined');\n  }\n  if (!response.ok) {\n    const status: number = response.status;\n    let errorBody: Record<string, unknown>;\n    if (response.headers.get('content-type')?.includes('application/json')) {\n      errorBody = await response.json();\n    } else {\n      errorBody = {\n        error: {\n          message: await response.text(),\n          code: response.status,\n          status: response.statusText,\n        },\n      };\n    }\n    const errorMessage = JSON.stringify(errorBody);\n    if (status >= 400 && status < 600) {\n      const apiError = new ApiError({\n        message: errorMessage,\n        status: status,\n      });\n      throw apiError;\n    }\n    throw new Error(errorMessage);\n  }\n}\n\n/**\n * Recursively updates the `requestInit.body` with values from an `extraBody` object.\n *\n * If `requestInit.body` is a string, it's assumed to be JSON and will be parsed.\n * The `extraBody` is then deeply merged into this parsed object.\n * If `requestInit.body` is a Blob, `extraBody` will be ignored, and a warning logged,\n * as merging structured data into an opaque Blob is not supported.\n *\n * The function does not enforce that updated values from `extraBody` have the\n * same type as existing values in `requestInit.body`. Type mismatches during\n * the merge will result in a warning, but the value from `extraBody` will overwrite\n * the original. `extraBody` users are responsible for ensuring `extraBody` has the correct structure.\n *\n * @param requestInit The RequestInit object whose body will be updated.\n * @param extraBody The object containing updates to be merged into `requestInit.body`.\n */\nexport function includeExtraBodyToRequestInit(\n  requestInit: RequestInit,\n  extraBody: Record<string, unknown>,\n) {\n  if (!extraBody || Object.keys(extraBody).length === 0) {\n    return;\n  }\n\n  if (requestInit.body instanceof Blob) {\n    console.warn(\n      'includeExtraBodyToRequestInit: extraBody provided but current request body is a Blob. extraBody will be ignored as merging is not supported for Blob bodies.',\n    );\n    return;\n  }\n\n  let currentBodyObject: Record<string, unknown> = {};\n\n  // If adding new type to HttpRequest.body, please check the code below to\n  // see if we need to update the logic.\n  if (typeof requestInit.body === 'string' && requestInit.body.length > 0) {\n    try {\n      const parsedBody = JSON.parse(requestInit.body);\n      if (\n        typeof parsedBody === 'object' &&\n        parsedBody !== null &&\n        !Array.isArray(parsedBody)\n      ) {\n        currentBodyObject = parsedBody as Record<string, unknown>;\n      } else {\n        console.warn(\n          'includeExtraBodyToRequestInit: Original request body is valid JSON but not a non-array object. Skip applying extraBody to the request body.',\n        );\n        return;\n      }\n      /*  eslint-disable-next-line @typescript-eslint/no-unused-vars */\n    } catch (e) {\n      console.warn(\n        'includeExtraBodyToRequestInit: Original request body is not valid JSON. Skip applying extraBody to the request body.',\n      );\n      return;\n    }\n  }\n\n  function deepMerge(\n    target: Record<string, unknown>,\n    source: Record<string, unknown>,\n  ): Record<string, unknown> {\n    const output = {...target};\n    for (const key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        const sourceValue = source[key];\n        const targetValue = output[key];\n        if (\n          sourceValue &&\n          typeof sourceValue === 'object' &&\n          !Array.isArray(sourceValue) &&\n          targetValue &&\n          typeof targetValue === 'object' &&\n          !Array.isArray(targetValue)\n        ) {\n          output[key] = deepMerge(\n            targetValue as Record<string, unknown>,\n            sourceValue as Record<string, unknown>,\n          );\n        } else {\n          if (\n            targetValue &&\n            sourceValue &&\n            typeof targetValue !== typeof sourceValue\n          ) {\n            console.warn(\n              `includeExtraBodyToRequestInit:deepMerge: Type mismatch for key \"${key}\". Original type: ${typeof targetValue}, New type: ${typeof sourceValue}. Overwriting.`,\n            );\n          }\n          output[key] = sourceValue;\n        }\n      }\n    }\n    return output;\n  }\n\n  const mergedBody = deepMerge(currentBodyObject, extraBody);\n  requestInit.body = JSON.stringify(mergedBody);\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Client as McpClient} from '@modelcontextprotocol/sdk/client/index.js';\nimport type {Tool as McpTool} from '@modelcontextprotocol/sdk/types.js';\n\nimport {GOOGLE_API_CLIENT_HEADER} from '../_api_client.js';\nimport {mcpToolsToGeminiTool} from '../_transformers.js';\nimport {\n  CallableTool,\n  CallableToolConfig,\n  FunctionCall,\n  Part,\n  Tool,\n  ToolListUnion,\n} from '../types.js';\n\n// TODO: b/416041229 - Determine how to retrieve the MCP package version.\nexport const MCP_LABEL = 'mcp_used/unknown';\n\n// Whether MCP tool usage is detected from mcpToTool. This is used for\n// telemetry.\nlet hasMcpToolUsageFromMcpToTool = false;\n\n// Checks whether the list of tools contains any MCP tools.\nexport function hasMcpToolUsage(tools: ToolListUnion): boolean {\n  for (const tool of tools) {\n    if (isMcpCallableTool(tool)) {\n      return true;\n    }\n    if (typeof tool === 'object' && 'inputSchema' in tool) {\n      return true;\n    }\n  }\n\n  return hasMcpToolUsageFromMcpToTool;\n}\n\n// Sets the MCP version label in the Google API client header.\nexport function setMcpUsageHeader(headers: Record<string, string>) {\n  const existingHeader = headers[GOOGLE_API_CLIENT_HEADER] ?? '';\n  headers[GOOGLE_API_CLIENT_HEADER] = (\n    existingHeader + ` ${MCP_LABEL}`\n  ).trimStart();\n}\n\n// Returns true if the object is a MCP CallableTool, otherwise false.\nfunction isMcpCallableTool(object: unknown): boolean {\n  return (\n    object !== null &&\n    typeof object === 'object' &&\n    object instanceof McpCallableTool\n  );\n}\n\n// List all tools from the MCP client.\nasync function* listAllTools(\n  mcpClient: McpClient,\n  maxTools: number = 100,\n): AsyncGenerator<McpTool> {\n  let cursor: string | undefined = undefined;\n  let numTools = 0;\n  while (numTools < maxTools) {\n    const t = await mcpClient.listTools({cursor});\n    for (const tool of t.tools) {\n      yield tool;\n      numTools++;\n    }\n    if (!t.nextCursor) {\n      break;\n    }\n    cursor = t.nextCursor;\n  }\n}\n\n/**\n * McpCallableTool can be used for model inference and invoking MCP clients with\n * given function call arguments.\n *\n * @experimental Built-in MCP support is an experimental feature, may change in future\n * versions.\n */\nexport class McpCallableTool implements CallableTool {\n  private readonly mcpClients;\n  private mcpTools: McpTool[] = [];\n  private functionNameToMcpClient: Record<string, McpClient> = {};\n  private readonly config: CallableToolConfig;\n\n  private constructor(\n    mcpClients: McpClient[] = [],\n    config: CallableToolConfig,\n  ) {\n    this.mcpClients = mcpClients;\n    this.config = config;\n  }\n\n  /**\n   * Creates a McpCallableTool.\n   */\n  public static create(\n    mcpClients: McpClient[],\n    config: CallableToolConfig,\n  ): McpCallableTool {\n    return new McpCallableTool(mcpClients, config);\n  }\n\n  /**\n   * Validates the function names are not duplicate and initialize the function\n   * name to MCP client mapping.\n   *\n   * @throws {Error} if the MCP tools from the MCP clients have duplicate tool\n   *     names.\n   */\n  async initialize() {\n    if (this.mcpTools.length > 0) {\n      return;\n    }\n\n    const functionMap: Record<string, McpClient> = {};\n    const mcpTools: McpTool[] = [];\n    for (const mcpClient of this.mcpClients) {\n      for await (const mcpTool of listAllTools(mcpClient)) {\n        mcpTools.push(mcpTool);\n        const mcpToolName = mcpTool.name as string;\n        if (functionMap[mcpToolName]) {\n          throw new Error(\n            `Duplicate function name ${\n              mcpToolName\n            } found in MCP tools. Please ensure function names are unique.`,\n          );\n        }\n        functionMap[mcpToolName] = mcpClient;\n      }\n    }\n    this.mcpTools = mcpTools;\n    this.functionNameToMcpClient = functionMap;\n  }\n\n  public async tool(): Promise<Tool> {\n    await this.initialize();\n    return mcpToolsToGeminiTool(this.mcpTools, this.config);\n  }\n\n  public async callTool(functionCalls: FunctionCall[]): Promise<Part[]> {\n    await this.initialize();\n    const functionCallResponseParts: Part[] = [];\n    for (const functionCall of functionCalls) {\n      if (functionCall.name! in this.functionNameToMcpClient) {\n        const mcpClient = this.functionNameToMcpClient[functionCall.name!];\n        let requestOptions = undefined;\n        // TODO: b/424238654 - Add support for finer grained timeout control.\n        if (this.config.timeout) {\n          requestOptions = {\n            timeout: this.config.timeout,\n          };\n        }\n        const callToolResponse = await mcpClient.callTool(\n          {\n            name: functionCall.name!,\n            arguments: functionCall.args,\n          },\n          // Set the result schema to undefined to allow MCP to rely on the\n          // default schema.\n          undefined,\n          requestOptions,\n        );\n        functionCallResponseParts.push({\n          functionResponse: {\n            name: functionCall.name,\n            response: callToolResponse.isError\n              ? {error: callToolResponse}\n              : (callToolResponse as Record<string, unknown>),\n          },\n        });\n      }\n    }\n    return functionCallResponseParts;\n  }\n}\n\nfunction isMcpClient(client: unknown): client is McpClient {\n  return (\n    client !== null &&\n    typeof client === 'object' &&\n    'listTools' in client &&\n    typeof client.listTools === 'function'\n  );\n}\n\n/**\n * Creates a McpCallableTool from MCP clients and an optional config.\n *\n * The callable tool can invoke the MCP clients with given function call\n * arguments. (often for automatic function calling).\n * Use the config to modify tool parameters such as behavior.\n *\n * @experimental Built-in MCP support is an experimental feature, may change in future\n * versions.\n */\nexport function mcpToTool(\n  ...args: [...McpClient[], CallableToolConfig | McpClient]\n): CallableTool {\n  // Set MCP usage for telemetry.\n  hasMcpToolUsageFromMcpToTool = true;\n  if (args.length === 0) {\n    throw new Error('No MCP clients provided');\n  }\n  const maybeConfig = args[args.length - 1];\n  if (isMcpClient(maybeConfig)) {\n    return McpCallableTool.create(args as McpClient[], {});\n  }\n  return McpCallableTool.create(\n    args.slice(0, args.length - 1) as McpClient[],\n    maybeConfig,\n  );\n}\n\n/**\n * Sets the MCP tool usage flag from calling mcpToTool. This is used for\n * telemetry.\n */\nexport function setMcpToolUsageFromMcpToTool(mcpToolUsage: boolean) {\n  hasMcpToolUsageFromMcpToTool = mcpToolUsage;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Live music client.\n *\n * @experimental\n */\n\nimport {ApiClient} from './_api_client.js';\nimport {Auth} from './_auth.js';\nimport * as t from './_transformers.js';\nimport {WebSocket, WebSocketCallbacks, WebSocketFactory} from './_websocket.js';\nimport * as converters from './converters/_live_converters.js';\nimport * as types from './types.js';\n\n/**\n * Handles incoming messages from the WebSocket.\n *\n * @remarks\n * This function is responsible for parsing incoming messages, transforming them\n * into LiveMusicServerMessage, and then calling the onmessage callback.\n * Note that the first message which is received from the server is a\n * setupComplete message.\n *\n * @param apiClient The ApiClient instance.\n * @param onmessage The user-provided onmessage callback (if any).\n * @param event The MessageEvent from the WebSocket.\n */\nasync function handleWebSocketMessage(\n  apiClient: ApiClient,\n  onmessage: (msg: types.LiveMusicServerMessage) => void,\n  event: MessageEvent,\n): Promise<void> {\n  const serverMessage: types.LiveMusicServerMessage =\n    new types.LiveMusicServerMessage();\n  let data: types.LiveMusicServerMessage;\n  if (event.data instanceof Blob) {\n    data = JSON.parse(await event.data.text()) as types.LiveMusicServerMessage;\n  } else {\n    data = JSON.parse(event.data) as types.LiveMusicServerMessage;\n  }\n  Object.assign(serverMessage, data);\n  onmessage(serverMessage);\n}\n\n/**\n   LiveMusic class encapsulates the configuration for live music\n   generation via Lyria Live models.\n\n   @experimental\n  */\nexport class LiveMusic {\n  constructor(\n    private readonly apiClient: ApiClient,\n    private readonly auth: Auth,\n    private readonly webSocketFactory: WebSocketFactory,\n  ) {}\n\n  /**\n     Establishes a connection to the specified model and returns a\n     LiveMusicSession object representing that connection.\n\n     @experimental\n\n     @remarks\n\n     @param params - The parameters for establishing a connection to the model.\n     @return A live session.\n\n     @example\n     ```ts\n     let model = 'models/lyria-realtime-exp';\n     const session = await ai.live.music.connect({\n       model: model,\n       callbacks: {\n         onmessage: (e: MessageEvent) => {\n           console.log('Received message from the server: %s\\n', debug(e.data));\n         },\n         onerror: (e: ErrorEvent) => {\n           console.log('Error occurred: %s\\n', debug(e.error));\n         },\n         onclose: (e: CloseEvent) => {\n           console.log('Connection closed.');\n         },\n       },\n     });\n     ```\n    */\n  async connect(\n    params: types.LiveMusicConnectParameters,\n  ): Promise<LiveMusicSession> {\n    if (this.apiClient.isVertexAI()) {\n      throw new Error('Live music is not supported for Vertex AI.');\n    }\n    console.warn(\n      'Live music generation is experimental and may change in future versions.',\n    );\n\n    const websocketBaseUrl = this.apiClient.getWebsocketBaseUrl();\n    const apiVersion = this.apiClient.getApiVersion();\n    const headers = mapToHeaders(this.apiClient.getDefaultHeaders());\n    const apiKey = this.apiClient.getApiKey();\n    const url = `${websocketBaseUrl}/ws/google.ai.generativelanguage.${\n      apiVersion\n    }.GenerativeService.BidiGenerateMusic?key=${apiKey}`;\n\n    let onopenResolve: (value: unknown) => void = () => {};\n    const onopenPromise = new Promise((resolve: (value: unknown) => void) => {\n      onopenResolve = resolve;\n    });\n\n    const callbacks: types.LiveMusicCallbacks = params.callbacks;\n\n    const onopenAwaitedCallback = function () {\n      onopenResolve({});\n    };\n\n    const apiClient = this.apiClient;\n    const websocketCallbacks: WebSocketCallbacks = {\n      onopen: onopenAwaitedCallback,\n      onmessage: (event: MessageEvent) => {\n        void handleWebSocketMessage(apiClient, callbacks.onmessage, event);\n      },\n      onerror:\n        callbacks?.onerror ??\n        function (e: ErrorEvent) {\n          void e;\n        },\n      onclose:\n        callbacks?.onclose ??\n        function (e: CloseEvent) {\n          void e;\n        },\n    };\n\n    const conn = this.webSocketFactory.create(\n      url,\n      headersToMap(headers),\n      websocketCallbacks,\n    );\n    conn.connect();\n    // Wait for the websocket to open before sending requests.\n    await onopenPromise;\n\n    const model = t.tModel(this.apiClient, params.model);\n    const setup = {model};\n    const clientMessage = {setup};\n    conn.send(JSON.stringify(clientMessage));\n\n    return new LiveMusicSession(conn, this.apiClient);\n  }\n}\n\n/**\n   Represents a connection to the API.\n\n   @experimental\n  */\nexport class LiveMusicSession {\n  constructor(\n    readonly conn: WebSocket,\n    private readonly apiClient: ApiClient,\n  ) {}\n\n  /**\n    Sets inputs to steer music generation. Updates the session's current\n    weighted prompts.\n\n    @param params - Contains one property, `weightedPrompts`.\n\n      - `weightedPrompts` to send to the model; weights are normalized to\n        sum to 1.0.\n\n    @experimental\n   */\n  async setWeightedPrompts(\n    params: types.LiveMusicSetWeightedPromptsParameters,\n  ) {\n    if (\n      !params.weightedPrompts ||\n      Object.keys(params.weightedPrompts).length === 0\n    ) {\n      throw new Error(\n        'Weighted prompts must be set and contain at least one entry.',\n      );\n    }\n    const clientContent =\n      converters.liveMusicSetWeightedPromptsParametersToMldev(params);\n    this.conn.send(JSON.stringify({clientContent}));\n  }\n\n  /**\n    Sets a configuration to the model. Updates the session's current\n    music generation config.\n\n    @param params - Contains one property, `musicGenerationConfig`.\n\n      - `musicGenerationConfig` to set in the model. Passing an empty or\n    undefined config to the model will reset the config to defaults.\n\n    @experimental\n   */\n  async setMusicGenerationConfig(params: types.LiveMusicSetConfigParameters) {\n    if (!params.musicGenerationConfig) {\n      params.musicGenerationConfig = {};\n    }\n    const setConfigParameters =\n      converters.liveMusicSetConfigParametersToMldev(params);\n    this.conn.send(JSON.stringify(setConfigParameters));\n  }\n\n  private sendPlaybackControl(playbackControl: types.LiveMusicPlaybackControl) {\n    const clientMessage = {playbackControl};\n    this.conn.send(JSON.stringify(clientMessage));\n  }\n\n  /**\n   * Start the music stream.\n   *\n   * @experimental\n   */\n  play() {\n    this.sendPlaybackControl(types.LiveMusicPlaybackControl.PLAY);\n  }\n\n  /**\n   * Temporarily halt the music stream. Use `play` to resume from the current\n   * position.\n   *\n   * @experimental\n   */\n  pause() {\n    this.sendPlaybackControl(types.LiveMusicPlaybackControl.PAUSE);\n  }\n\n  /**\n   * Stop the music stream and reset the state. Retains the current prompts\n   * and config.\n   *\n   * @experimental\n   */\n  stop() {\n    this.sendPlaybackControl(types.LiveMusicPlaybackControl.STOP);\n  }\n\n  /**\n   * Resets the context of the music generation without stopping it.\n   * Retains the current prompts and config.\n   *\n   * @experimental\n   */\n  resetContext() {\n    this.sendPlaybackControl(types.LiveMusicPlaybackControl.RESET_CONTEXT);\n  }\n\n  /**\n     Terminates the WebSocket connection.\n\n     @experimental\n   */\n  close() {\n    this.conn.close();\n  }\n}\n\n// Converts an headers object to a \"map\" object as expected by the WebSocket\n// constructor. We use this as the Auth interface works with Headers objects\n// while the WebSocket constructor takes a map.\nfunction headersToMap(headers: Headers): Record<string, string> {\n  const headerMap: Record<string, string> = {};\n  headers.forEach((value, key) => {\n    headerMap[key] = value;\n  });\n  return headerMap;\n}\n\n// Converts a \"map\" object to a headers object. We use this as the Auth\n// interface works with Headers objects while the API client default headers\n// returns a map.\nfunction mapToHeaders(map: Record<string, string>): Headers {\n  const headers = new Headers();\n  for (const [key, value] of Object.entries(map)) {\n    headers.append(key, value);\n  }\n  return headers;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Live client.\n *\n * @experimental\n */\n\nimport {ApiClient} from './_api_client.js';\nimport {Auth} from './_auth.js';\nimport * as t from './_transformers.js';\nimport {WebSocket, WebSocketCallbacks, WebSocketFactory} from './_websocket.js';\nimport * as converters from './converters/_live_converters.js';\nimport {contentToMldev} from './converters/_models_converters.js';\nimport {hasMcpToolUsage, setMcpUsageHeader} from './mcp/_mcp.js';\nimport {LiveMusic} from './music.js';\nimport * as types from './types.js';\n\nconst FUNCTION_RESPONSE_REQUIRES_ID =\n  'FunctionResponse request must have an `id` field from the response of a ToolCall.FunctionalCalls in Google AI.';\n\n/**\n * Handles incoming messages from the WebSocket.\n *\n * @remarks\n * This function is responsible for parsing incoming messages, transforming them\n * into LiveServerMessages, and then calling the onmessage callback. Note that\n * the first message which is received from the server is a setupComplete\n * message.\n *\n * @param apiClient The ApiClient instance.\n * @param onmessage The user-provided onmessage callback (if any).\n * @param event The MessageEvent from the WebSocket.\n */\nasync function handleWebSocketMessage(\n  apiClient: ApiClient,\n  onmessage: (msg: types.LiveServerMessage) => void,\n  event: MessageEvent,\n): Promise<void> {\n  const serverMessage: types.LiveServerMessage = new types.LiveServerMessage();\n  let jsonData: string;\n  if (event.data instanceof Blob) {\n    jsonData = await event.data.text();\n  } else if (event.data instanceof ArrayBuffer) {\n    jsonData = new TextDecoder().decode(event.data);\n  } else {\n    jsonData = event.data;\n  }\n\n  const data = JSON.parse(jsonData) as types.LiveServerMessage;\n\n  if (apiClient.isVertexAI()) {\n    const resp = converters.liveServerMessageFromVertex(data);\n    Object.assign(serverMessage, resp);\n  } else {\n    const resp = data;\n    Object.assign(serverMessage, resp);\n  }\n\n  onmessage(serverMessage);\n}\n\n/**\n   Live class encapsulates the configuration for live interaction with the\n   Generative Language API. It embeds ApiClient for general API settings.\n\n   @experimental\n  */\nexport class Live {\n  public readonly music: LiveMusic;\n\n  constructor(\n    private readonly apiClient: ApiClient,\n    private readonly auth: Auth,\n    private readonly webSocketFactory: WebSocketFactory,\n  ) {\n    this.music = new LiveMusic(\n      this.apiClient,\n      this.auth,\n      this.webSocketFactory,\n    );\n  }\n\n  /**\n     Establishes a connection to the specified model with the given\n     configuration and returns a Session object representing that connection.\n\n     @experimental Built-in MCP support is an experimental feature, may change in\n     future versions.\n\n     @remarks\n\n     @param params - The parameters for establishing a connection to the model.\n     @return A live session.\n\n     @example\n     ```ts\n     let model: string;\n     if (GOOGLE_GENAI_USE_VERTEXAI) {\n       model = 'gemini-2.0-flash-live-preview-04-09';\n     } else {\n       model = 'gemini-live-2.5-flash-preview';\n     }\n     const session = await ai.live.connect({\n       model: model,\n       config: {\n         responseModalities: [Modality.AUDIO],\n       },\n       callbacks: {\n         onopen: () => {\n           console.log('Connected to the socket.');\n         },\n         onmessage: (e: MessageEvent) => {\n           console.log('Received message from the server: %s\\n', debug(e.data));\n         },\n         onerror: (e: ErrorEvent) => {\n           console.log('Error occurred: %s\\n', debug(e.error));\n         },\n         onclose: (e: CloseEvent) => {\n           console.log('Connection closed.');\n         },\n       },\n     });\n     ```\n    */\n  async connect(params: types.LiveConnectParameters): Promise<Session> {\n    // TODO: b/404946746 - Support per request HTTP options.\n    if (params.config && params.config.httpOptions) {\n      throw new Error(\n        'The Live module does not support httpOptions at request-level in' +\n          ' LiveConnectConfig yet. Please use the client-level httpOptions' +\n          ' configuration instead.',\n      );\n    }\n    const websocketBaseUrl = this.apiClient.getWebsocketBaseUrl();\n    const apiVersion = this.apiClient.getApiVersion();\n    let url: string;\n    const clientHeaders = this.apiClient.getHeaders();\n    if (\n      params.config &&\n      params.config.tools &&\n      hasMcpToolUsage(params.config.tools)\n    ) {\n      setMcpUsageHeader(clientHeaders);\n    }\n    const headers = mapToHeaders(clientHeaders);\n    if (this.apiClient.isVertexAI()) {\n      url = `${websocketBaseUrl}/ws/google.cloud.aiplatform.${\n        apiVersion\n      }.LlmBidiService/BidiGenerateContent`;\n      await this.auth.addAuthHeaders(headers, url);\n    } else {\n      const apiKey = this.apiClient.getApiKey();\n\n      let method = 'BidiGenerateContent';\n      let keyName = 'key';\n      if (apiKey?.startsWith('auth_tokens/')) {\n        console.warn(\n          'Warning: Ephemeral token support is experimental and may change in future versions.',\n        );\n        if (apiVersion !== 'v1alpha') {\n          console.warn(\n            \"Warning: The SDK's ephemeral token support is in v1alpha only. Please use const ai = new GoogleGenAI({apiKey: token.name, httpOptions: { apiVersion: 'v1alpha' }}); before session connection.\",\n          );\n        }\n        method = 'BidiGenerateContentConstrained';\n        keyName = 'access_token';\n      }\n\n      url = `${websocketBaseUrl}/ws/google.ai.generativelanguage.${\n        apiVersion\n      }.GenerativeService.${method}?${keyName}=${apiKey}`;\n    }\n\n    let onopenResolve: (value: unknown) => void = () => {};\n    const onopenPromise = new Promise((resolve: (value: unknown) => void) => {\n      onopenResolve = resolve;\n    });\n\n    const callbacks: types.LiveCallbacks = params.callbacks;\n\n    const onopenAwaitedCallback = function () {\n      callbacks?.onopen?.();\n      onopenResolve({});\n    };\n\n    const apiClient = this.apiClient;\n\n    const websocketCallbacks: WebSocketCallbacks = {\n      onopen: onopenAwaitedCallback,\n      onmessage: (event: MessageEvent) => {\n        void handleWebSocketMessage(apiClient, callbacks.onmessage, event);\n      },\n      onerror:\n        callbacks?.onerror ??\n        function (e: ErrorEvent) {\n          void e;\n        },\n      onclose:\n        callbacks?.onclose ??\n        function (e: CloseEvent) {\n          void e;\n        },\n    };\n\n    const conn = this.webSocketFactory.create(\n      url,\n      headersToMap(headers),\n      websocketCallbacks,\n    );\n    conn.connect();\n    // Wait for the websocket to open before sending requests.\n    await onopenPromise;\n\n    let transformedModel = t.tModel(this.apiClient, params.model);\n    if (\n      this.apiClient.isVertexAI() &&\n      transformedModel.startsWith('publishers/')\n    ) {\n      const project = this.apiClient.getProject();\n      const location = this.apiClient.getLocation();\n      transformedModel =\n        `projects/${project}/locations/${location}/` + transformedModel;\n    }\n\n    let clientMessage: Record<string, unknown> = {};\n\n    if (\n      this.apiClient.isVertexAI() &&\n      params.config?.responseModalities === undefined\n    ) {\n      // Set default to AUDIO to align with MLDev API.\n      if (params.config === undefined) {\n        params.config = {responseModalities: [types.Modality.AUDIO]};\n      } else {\n        params.config.responseModalities = [types.Modality.AUDIO];\n      }\n    }\n    if (params.config?.generationConfig) {\n      // Raise deprecation warning for generationConfig.\n      console.warn(\n        'Setting `LiveConnectConfig.generation_config` is deprecated, please set the fields on `LiveConnectConfig` directly. This will become an error in a future version (not before Q3 2025).',\n      );\n    }\n    const inputTools = params.config?.tools ?? [];\n    const convertedTools: types.Tool[] = [];\n    for (const tool of inputTools) {\n      if (this.isCallableTool(tool)) {\n        const callableTool = tool as types.CallableTool;\n        convertedTools.push(await callableTool.tool());\n      } else {\n        convertedTools.push(tool as types.Tool);\n      }\n    }\n    if (convertedTools.length > 0) {\n      params.config!.tools = convertedTools;\n    }\n    const liveConnectParameters: types.LiveConnectParameters = {\n      model: transformedModel,\n      config: params.config,\n      callbacks: params.callbacks,\n    };\n    if (this.apiClient.isVertexAI()) {\n      clientMessage = converters.liveConnectParametersToVertex(\n        this.apiClient,\n        liveConnectParameters,\n      );\n    } else {\n      clientMessage = converters.liveConnectParametersToMldev(\n        this.apiClient,\n        liveConnectParameters,\n      );\n    }\n    delete clientMessage['config'];\n    conn.send(JSON.stringify(clientMessage));\n    return new Session(conn, this.apiClient);\n  }\n\n  // TODO: b/416041229 - Abstract this method to a common place.\n  private isCallableTool(tool: types.ToolUnion): boolean {\n    return 'callTool' in tool && typeof tool.callTool === 'function';\n  }\n}\n\nconst defaultLiveSendClientContentParamerters: types.LiveSendClientContentParameters =\n  {\n    turnComplete: true,\n  };\n\n/**\n   Represents a connection to the API.\n\n   @experimental\n  */\nexport class Session {\n  constructor(\n    readonly conn: WebSocket,\n    private readonly apiClient: ApiClient,\n  ) {}\n\n  private tLiveClientContent(\n    apiClient: ApiClient,\n    params: types.LiveSendClientContentParameters,\n  ): types.LiveClientMessage {\n    if (params.turns !== null && params.turns !== undefined) {\n      let contents: types.Content[] = [];\n      try {\n        contents = t.tContents(params.turns as types.ContentListUnion);\n        if (!apiClient.isVertexAI()) {\n          contents = contents.map((item) => contentToMldev(item));\n        }\n      } catch {\n        throw new Error(\n          `Failed to parse client content \"turns\", type: '${typeof params.turns}'`,\n        );\n      }\n      return {\n        clientContent: {turns: contents, turnComplete: params.turnComplete},\n      };\n    }\n\n    return {\n      clientContent: {turnComplete: params.turnComplete},\n    };\n  }\n\n  private tLiveClienttToolResponse(\n    apiClient: ApiClient,\n    params: types.LiveSendToolResponseParameters,\n  ): types.LiveClientMessage {\n    let functionResponses: types.FunctionResponse[] = [];\n\n    if (params.functionResponses == null) {\n      throw new Error('functionResponses is required.');\n    }\n\n    if (!Array.isArray(params.functionResponses)) {\n      functionResponses = [params.functionResponses];\n    } else {\n      functionResponses = params.functionResponses;\n    }\n\n    if (functionResponses.length === 0) {\n      throw new Error('functionResponses is required.');\n    }\n\n    for (const functionResponse of functionResponses) {\n      if (\n        typeof functionResponse !== 'object' ||\n        functionResponse === null ||\n        !('name' in functionResponse) ||\n        !('response' in functionResponse)\n      ) {\n        throw new Error(\n          `Could not parse function response, type '${typeof functionResponse}'.`,\n        );\n      }\n      if (!apiClient.isVertexAI() && !('id' in functionResponse)) {\n        throw new Error(FUNCTION_RESPONSE_REQUIRES_ID);\n      }\n    }\n\n    const clientMessage: types.LiveClientMessage = {\n      toolResponse: {functionResponses: functionResponses},\n    };\n    return clientMessage;\n  }\n\n  /**\n    Send a message over the established connection.\n\n    @param params - Contains two **optional** properties, `turns` and\n        `turnComplete`.\n\n      - `turns` will be converted to a `Content[]`\n      - `turnComplete: true` [default] indicates that you are done sending\n        content and expect a response. If `turnComplete: false`, the server\n        will wait for additional messages before starting generation.\n\n    @experimental\n\n    @remarks\n    There are two ways to send messages to the live API:\n    `sendClientContent` and `sendRealtimeInput`.\n\n    `sendClientContent` messages are added to the model context **in order**.\n    Having a conversation using `sendClientContent` messages is roughly\n    equivalent to using the `Chat.sendMessageStream`, except that the state of\n    the `chat` history is stored on the API server instead of locally.\n\n    Because of `sendClientContent`'s order guarantee, the model cannot respons\n    as quickly to `sendClientContent` messages as to `sendRealtimeInput`\n    messages. This makes the biggest difference when sending objects that have\n    significant preprocessing time (typically images).\n\n    The `sendClientContent` message sends a `Content[]`\n    which has more options than the `Blob` sent by `sendRealtimeInput`.\n\n    So the main use-cases for `sendClientContent` over `sendRealtimeInput` are:\n\n    - Sending anything that can't be represented as a `Blob` (text,\n    `sendClientContent({turns=\"Hello?\"}`)).\n    - Managing turns when not using audio input and voice activity detection.\n      (`sendClientContent({turnComplete:true})` or the short form\n    `sendClientContent()`)\n    - Prefilling a conversation context\n      ```\n      sendClientContent({\n          turns: [\n            Content({role:user, parts:...}),\n            Content({role:user, parts:...}),\n            ...\n          ]\n      })\n      ```\n    @experimental\n   */\n  sendClientContent(params: types.LiveSendClientContentParameters) {\n    params = {\n      ...defaultLiveSendClientContentParamerters,\n      ...params,\n    };\n\n    const clientMessage: types.LiveClientMessage = this.tLiveClientContent(\n      this.apiClient,\n      params,\n    );\n    this.conn.send(JSON.stringify(clientMessage));\n  }\n\n  /**\n    Send a realtime message over the established connection.\n\n    @param params - Contains one property, `media`.\n\n      - `media` will be converted to a `Blob`\n\n    @experimental\n\n    @remarks\n    Use `sendRealtimeInput` for realtime audio chunks and video frames (images).\n\n    With `sendRealtimeInput` the api will respond to audio automatically\n    based on voice activity detection (VAD).\n\n    `sendRealtimeInput` is optimized for responsivness at the expense of\n    deterministic ordering guarantees. Audio and video tokens are to the\n    context when they become available.\n\n    Note: The Call signature expects a `Blob` object, but only a subset\n    of audio and image mimetypes are allowed.\n   */\n  sendRealtimeInput(params: types.LiveSendRealtimeInputParameters) {\n    let clientMessage: types.LiveClientMessage = {};\n\n    if (this.apiClient.isVertexAI()) {\n      clientMessage = {\n        'realtimeInput':\n          converters.liveSendRealtimeInputParametersToVertex(params),\n      };\n    } else {\n      clientMessage = {\n        'realtimeInput':\n          converters.liveSendRealtimeInputParametersToMldev(params),\n      };\n    }\n    this.conn.send(JSON.stringify(clientMessage));\n  }\n\n  /**\n    Send a function response message over the established connection.\n\n    @param params - Contains property `functionResponses`.\n\n      - `functionResponses` will be converted to a `functionResponses[]`\n\n    @remarks\n    Use `sendFunctionResponse` to reply to `LiveServerToolCall` from the server.\n\n    Use {@link types.LiveConnectConfig#tools} to configure the callable functions.\n\n    @experimental\n   */\n  sendToolResponse(params: types.LiveSendToolResponseParameters) {\n    if (params.functionResponses == null) {\n      throw new Error('Tool response parameters are required.');\n    }\n\n    const clientMessage: types.LiveClientMessage =\n      this.tLiveClienttToolResponse(this.apiClient, params);\n    this.conn.send(JSON.stringify(clientMessage));\n  }\n\n  /**\n     Terminates the WebSocket connection.\n\n     @experimental\n\n     @example\n     ```ts\n     let model: string;\n     if (GOOGLE_GENAI_USE_VERTEXAI) {\n       model = 'gemini-2.0-flash-live-preview-04-09';\n     } else {\n       model = 'gemini-live-2.5-flash-preview';\n     }\n     const session = await ai.live.connect({\n       model: model,\n       config: {\n         responseModalities: [Modality.AUDIO],\n       }\n     });\n\n     session.close();\n     ```\n   */\n  close() {\n    this.conn.close();\n  }\n}\n\n// Converts an headers object to a \"map\" object as expected by the WebSocket\n// constructor. We use this as the Auth interface works with Headers objects\n// while the WebSocket constructor takes a map.\nfunction headersToMap(headers: Headers): Record<string, string> {\n  const headerMap: Record<string, string> = {};\n  headers.forEach((value, key) => {\n    headerMap[key] = value;\n  });\n  return headerMap;\n}\n\n// Converts a \"map\" object to a headers object. We use this as the Auth\n// interface works with Headers objects while the API client default headers\n// returns a map.\nfunction mapToHeaders(map: Record<string, string>): Headers {\n  const headers = new Headers();\n  for (const [key, value] of Object.entries(map)) {\n    headers.append(key, value);\n  }\n  return headers;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as types from './types.js';\n\nexport const DEFAULT_MAX_REMOTE_CALLS = 10;\n\n/** Returns whether automatic function calling is disabled. */\nexport function shouldDisableAfc(\n  config: types.GenerateContentConfig | undefined,\n): boolean {\n  if (config?.automaticFunctionCalling?.disable) {\n    return true;\n  }\n\n  let callableToolsPresent = false;\n  for (const tool of config?.tools ?? []) {\n    if (isCallableTool(tool)) {\n      callableToolsPresent = true;\n      break;\n    }\n  }\n  if (!callableToolsPresent) {\n    return true;\n  }\n\n  const maxCalls = config?.automaticFunctionCalling?.maximumRemoteCalls;\n  if (\n    (maxCalls && (maxCalls < 0 || !Number.isInteger(maxCalls))) ||\n    maxCalls == 0\n  ) {\n    console.warn(\n      'Invalid maximumRemoteCalls value provided for automatic function calling. Disabled automatic function calling. Please provide a valid integer value greater than 0. maximumRemoteCalls provided:',\n      maxCalls,\n    );\n    return true;\n  }\n  return false;\n}\n\nexport function isCallableTool(tool: types.ToolUnion): boolean {\n  return 'callTool' in tool && typeof tool.callTool === 'function';\n}\n\n// Checks whether the list of tools contains any CallableTools. Will return true\n// if there is at least one CallableTool.\nexport function hasCallableTools(\n  params: types.GenerateContentParameters,\n): boolean {\n  return params.config?.tools?.some((tool) => isCallableTool(tool)) ?? false;\n}\n\n// Checks whether the list of tools contains any non-callable tools. Will return\n// true if there is at least one non-Callable tool.\nexport function hasNonCallableTools(\n  params: types.GenerateContentParameters,\n): boolean {\n  return params.config?.tools?.some((tool) => !isCallableTool(tool)) ?? false;\n}\n\n/**\n * Returns whether to append automatic function calling history to the\n * response.\n */\nexport function shouldAppendAfcHistory(\n  config: types.GenerateContentConfig | undefined,\n): boolean {\n  return !config?.automaticFunctionCalling?.ignoreCallHistory;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {\n  DEFAULT_MAX_REMOTE_CALLS,\n  hasCallableTools,\n  hasNonCallableTools,\n  isCallableTool,\n  shouldAppendAfcHistory,\n  shouldDisableAfc,\n} from './_afc.js';\nimport {ApiClient} from './_api_client.js';\nimport * as common from './_common.js';\nimport {BaseModule} from './_common.js';\nimport * as _internal_types from './_internal_types.js';\nimport {tContents} from './_transformers.js';\nimport * as converters from './converters/_models_converters.js';\nimport {hasMcpToolUsage, setMcpUsageHeader} from './mcp/_mcp.js';\nimport {PagedItem, Pager} from './pagers.js';\nimport * as types from './types.js';\n\nexport class Models extends BaseModule {\n  constructor(private readonly apiClient: ApiClient) {\n    super();\n  }\n\n  /**\n   * Makes an API request to generate content with a given model.\n   *\n   * For the `model` parameter, supported formats for Vertex AI API include:\n   * - The Gemini model ID, for example: 'gemini-2.0-flash'\n   * - The full resource name starts with 'projects/', for example:\n   *  'projects/my-project-id/locations/us-central1/publishers/google/models/gemini-2.0-flash'\n   * - The partial resource name with 'publishers/', for example:\n   *  'publishers/google/models/gemini-2.0-flash' or\n   *  'publishers/meta/models/llama-3.1-405b-instruct-maas'\n   * - `/` separated publisher and model name, for example:\n   * 'google/gemini-2.0-flash' or 'meta/llama-3.1-405b-instruct-maas'\n   *\n   * For the `model` parameter, supported formats for Gemini API include:\n   * - The Gemini model ID, for example: 'gemini-2.0-flash'\n   * - The model name starts with 'models/', for example:\n   *  'models/gemini-2.0-flash'\n   * - For tuned models, the model name starts with 'tunedModels/',\n   * for example:\n   * 'tunedModels/1234567890123456789'\n   *\n   * Some models support multimodal input and output.\n   *\n   * @param params - The parameters for generating content.\n   * @return The response from generating content.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContent({\n   *   model: 'gemini-2.0-flash',\n   *   contents: 'why is the sky blue?',\n   *   config: {\n   *     candidateCount: 2,\n   *   }\n   * });\n   * console.log(response);\n   * ```\n   */\n  generateContent = async (\n    params: types.GenerateContentParameters,\n  ): Promise<types.GenerateContentResponse> => {\n    const transformedParams = await this.processParamsMaybeAddMcpUsage(params);\n    this.maybeMoveToResponseJsonSchem(params);\n    if (!hasCallableTools(params) || shouldDisableAfc(params.config)) {\n      return await this.generateContentInternal(transformedParams);\n    }\n\n    if (hasNonCallableTools(params)) {\n      throw new Error(\n        'Automatic function calling with CallableTools and Tools is not yet supported.',\n      );\n    }\n\n    let response: types.GenerateContentResponse;\n    let functionResponseContent: types.Content;\n    const automaticFunctionCallingHistory: types.Content[] = tContents(\n      transformedParams.contents,\n    );\n    const maxRemoteCalls =\n      transformedParams.config?.automaticFunctionCalling?.maximumRemoteCalls ??\n      DEFAULT_MAX_REMOTE_CALLS;\n    let remoteCalls = 0;\n    while (remoteCalls < maxRemoteCalls) {\n      response = await this.generateContentInternal(transformedParams);\n      if (!response.functionCalls || response.functionCalls!.length === 0) {\n        break;\n      }\n\n      const responseContent: types.Content = response.candidates![0].content!;\n      const functionResponseParts: types.Part[] = [];\n      for (const tool of params.config?.tools ?? []) {\n        if (isCallableTool(tool)) {\n          const callableTool = tool as types.CallableTool;\n          const parts = await callableTool.callTool(response.functionCalls!);\n          functionResponseParts.push(...parts);\n        }\n      }\n\n      remoteCalls++;\n\n      functionResponseContent = {\n        role: 'user',\n        parts: functionResponseParts,\n      };\n\n      transformedParams.contents = tContents(transformedParams.contents);\n      (transformedParams.contents as types.Content[]).push(responseContent);\n      (transformedParams.contents as types.Content[]).push(\n        functionResponseContent,\n      );\n\n      if (shouldAppendAfcHistory(transformedParams.config)) {\n        automaticFunctionCallingHistory.push(responseContent);\n        automaticFunctionCallingHistory.push(functionResponseContent);\n      }\n    }\n    if (shouldAppendAfcHistory(transformedParams.config)) {\n      response!.automaticFunctionCallingHistory =\n        automaticFunctionCallingHistory;\n    }\n    return response!;\n  };\n\n  /**\n   * This logic is needed for GenerateContentConfig only.\n   * Previously we made GenerateContentConfig.responseSchema field to accept\n   * unknown. Since v1.9.0, we switch to use backend JSON schema support.\n   * To maintain backward compatibility, we move the data that was treated as\n   * JSON schema from the responseSchema field to the responseJsonSchema field.\n   */\n  private maybeMoveToResponseJsonSchem(\n    params: types.GenerateContentParameters,\n  ): void {\n    if (params.config && params.config.responseSchema) {\n      if (!params.config.responseJsonSchema) {\n        if (Object.keys(params.config.responseSchema).includes('$schema')) {\n          params.config.responseJsonSchema = params.config.responseSchema;\n          delete params.config.responseSchema;\n        }\n      }\n    }\n    return;\n  }\n\n  /**\n   * Makes an API request to generate content with a given model and yields the\n   * response in chunks.\n   *\n   * For the `model` parameter, supported formats for Vertex AI API include:\n   * - The Gemini model ID, for example: 'gemini-2.0-flash'\n   * - The full resource name starts with 'projects/', for example:\n   *  'projects/my-project-id/locations/us-central1/publishers/google/models/gemini-2.0-flash'\n   * - The partial resource name with 'publishers/', for example:\n   *  'publishers/google/models/gemini-2.0-flash' or\n   *  'publishers/meta/models/llama-3.1-405b-instruct-maas'\n   * - `/` separated publisher and model name, for example:\n   * 'google/gemini-2.0-flash' or 'meta/llama-3.1-405b-instruct-maas'\n   *\n   * For the `model` parameter, supported formats for Gemini API include:\n   * - The Gemini model ID, for example: 'gemini-2.0-flash'\n   * - The model name starts with 'models/', for example:\n   *  'models/gemini-2.0-flash'\n   * - For tuned models, the model name starts with 'tunedModels/',\n   * for example:\n   *  'tunedModels/1234567890123456789'\n   *\n   * Some models support multimodal input and output.\n   *\n   * @param params - The parameters for generating content with streaming response.\n   * @return The response from generating content.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.generateContentStream({\n   *   model: 'gemini-2.0-flash',\n   *   contents: 'why is the sky blue?',\n   *   config: {\n   *     maxOutputTokens: 200,\n   *   }\n   * });\n   * for await (const chunk of response) {\n   *   console.log(chunk);\n   * }\n   * ```\n   */\n  generateContentStream = async (\n    params: types.GenerateContentParameters,\n  ): Promise<AsyncGenerator<types.GenerateContentResponse>> => {\n    this.maybeMoveToResponseJsonSchem(params);\n    if (shouldDisableAfc(params.config)) {\n      const transformedParams =\n        await this.processParamsMaybeAddMcpUsage(params);\n      return await this.generateContentStreamInternal(transformedParams);\n    } else {\n      return await this.processAfcStream(params);\n    }\n  };\n\n  /**\n   * Transforms the CallableTools in the parameters to be simply Tools, it\n   * copies the params into a new object and replaces the tools, it does not\n   * modify the original params. Also sets the MCP usage header if there are\n   * MCP tools in the parameters.\n   */\n  private async processParamsMaybeAddMcpUsage(\n    params: types.GenerateContentParameters,\n  ): Promise<types.GenerateContentParameters> {\n    const tools = params.config?.tools;\n    if (!tools) {\n      return params;\n    }\n    const transformedTools = await Promise.all(\n      tools.map(async (tool) => {\n        if (isCallableTool(tool)) {\n          const callableTool = tool as types.CallableTool;\n          return await callableTool.tool();\n        }\n        return tool;\n      }),\n    );\n    const newParams: types.GenerateContentParameters = {\n      model: params.model,\n      contents: params.contents,\n      config: {\n        ...params.config,\n        tools: transformedTools,\n      },\n    };\n    newParams.config!.tools = transformedTools;\n\n    if (\n      params.config &&\n      params.config.tools &&\n      hasMcpToolUsage(params.config.tools)\n    ) {\n      const headers = params.config.httpOptions?.headers ?? {};\n      let newHeaders = {...headers};\n      if (Object.keys(newHeaders).length === 0) {\n        newHeaders = this.apiClient.getDefaultHeaders();\n      }\n      setMcpUsageHeader(newHeaders);\n      newParams.config!.httpOptions = {\n        ...params.config.httpOptions,\n        headers: newHeaders,\n      };\n    }\n    return newParams;\n  }\n\n  private async initAfcToolsMap(\n    params: types.GenerateContentParameters,\n  ): Promise<Map<string, types.CallableTool>> {\n    const afcTools: Map<string, types.CallableTool> = new Map();\n    for (const tool of params.config?.tools ?? []) {\n      if (isCallableTool(tool)) {\n        const callableTool = tool as types.CallableTool;\n        const toolDeclaration = await callableTool.tool();\n        for (const declaration of toolDeclaration.functionDeclarations ?? []) {\n          if (!declaration.name) {\n            throw new Error('Function declaration name is required.');\n          }\n          if (afcTools.has(declaration.name)) {\n            throw new Error(\n              `Duplicate tool declaration name: ${declaration.name}`,\n            );\n          }\n          afcTools.set(declaration.name, callableTool);\n        }\n      }\n    }\n    return afcTools;\n  }\n\n  private async processAfcStream(\n    params: types.GenerateContentParameters,\n  ): Promise<AsyncGenerator<types.GenerateContentResponse>> {\n    const maxRemoteCalls =\n      params.config?.automaticFunctionCalling?.maximumRemoteCalls ??\n      DEFAULT_MAX_REMOTE_CALLS;\n    let wereFunctionsCalled = false;\n    let remoteCallCount = 0;\n    const afcToolsMap = await this.initAfcToolsMap(params);\n    return (async function* (\n      models: Models,\n      afcTools: Map<string, types.CallableTool>,\n      params: types.GenerateContentParameters,\n    ) {\n      while (remoteCallCount < maxRemoteCalls) {\n        if (wereFunctionsCalled) {\n          remoteCallCount++;\n          wereFunctionsCalled = false;\n        }\n        const transformedParams =\n          await models.processParamsMaybeAddMcpUsage(params);\n        const response =\n          await models.generateContentStreamInternal(transformedParams);\n\n        const functionResponses: types.Part[] = [];\n        const responseContents: types.Content[] = [];\n\n        for await (const chunk of response) {\n          yield chunk;\n          if (chunk.candidates && chunk.candidates[0]?.content) {\n            responseContents.push(chunk.candidates[0].content);\n            for (const part of chunk.candidates[0].content.parts ?? []) {\n              if (remoteCallCount < maxRemoteCalls && part.functionCall) {\n                if (!part.functionCall.name) {\n                  throw new Error(\n                    'Function call name was not returned by the model.',\n                  );\n                }\n                if (!afcTools.has(part.functionCall.name)) {\n                  throw new Error(\n                    `Automatic function calling was requested, but not all the tools the model used implement the CallableTool interface. Available tools: ${afcTools.keys()}, mising tool: ${\n                      part.functionCall.name\n                    }`,\n                  );\n                } else {\n                  const responseParts = await afcTools\n                    .get(part.functionCall.name)!\n                    .callTool([part.functionCall]);\n                  functionResponses.push(...responseParts);\n                }\n              }\n            }\n          }\n        }\n\n        if (functionResponses.length > 0) {\n          wereFunctionsCalled = true;\n          const typedResponseChunk = new types.GenerateContentResponse();\n          typedResponseChunk.candidates = [\n            {\n              content: {\n                role: 'user',\n                parts: functionResponses,\n              },\n            },\n          ];\n\n          yield typedResponseChunk;\n\n          const newContents: types.Content[] = [];\n          newContents.push(...responseContents);\n          newContents.push({\n            role: 'user',\n            parts: functionResponses,\n          });\n          const updatedContents = tContents(params.contents).concat(\n            newContents,\n          );\n\n          params.contents = updatedContents;\n        } else {\n          break;\n        }\n      }\n    })(this, afcToolsMap, params);\n  }\n\n  /**\n   * Generates an image based on a text description and configuration.\n   *\n   * @param params - The parameters for generating images.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await client.models.generateImages({\n   *  model: 'imagen-3.0-generate-002',\n   *  prompt: 'Robot holding a red skateboard',\n   *  config: {\n   *    numberOfImages: 1,\n   *    includeRaiReason: true,\n   *  },\n   * });\n   * console.log(response?.generatedImages?.[0]?.image?.imageBytes);\n   * ```\n   */\n  generateImages = async (\n    params: types.GenerateImagesParameters,\n  ): Promise<types.GenerateImagesResponse> => {\n    return await this.generateImagesInternal(params).then((apiResponse) => {\n      let positivePromptSafetyAttributes;\n      const generatedImages = [];\n\n      if (apiResponse?.generatedImages) {\n        for (const generatedImage of apiResponse.generatedImages) {\n          if (\n            generatedImage &&\n            generatedImage?.safetyAttributes &&\n            generatedImage?.safetyAttributes?.contentType === 'Positive Prompt'\n          ) {\n            positivePromptSafetyAttributes = generatedImage?.safetyAttributes;\n          } else {\n            generatedImages.push(generatedImage);\n          }\n        }\n      }\n      let response: types.GenerateImagesResponse;\n\n      if (positivePromptSafetyAttributes) {\n        response = {\n          generatedImages: generatedImages,\n          positivePromptSafetyAttributes: positivePromptSafetyAttributes,\n          sdkHttpResponse: apiResponse.sdkHttpResponse,\n        };\n      } else {\n        response = {\n          generatedImages: generatedImages,\n          sdkHttpResponse: apiResponse.sdkHttpResponse,\n        };\n      }\n      return response;\n    });\n  };\n\n  list = async (\n    params?: types.ListModelsParameters,\n  ): Promise<Pager<types.Model>> => {\n    const defaultConfig: types.ListModelsConfig = {\n      queryBase: true,\n    };\n    const actualConfig: types.ListModelsConfig = {\n      ...defaultConfig,\n      ...params?.config,\n    };\n    const actualParams: types.ListModelsParameters = {\n      config: actualConfig,\n    };\n\n    if (this.apiClient.isVertexAI()) {\n      if (!actualParams.config!.queryBase) {\n        if (actualParams.config?.filter) {\n          throw new Error(\n            'Filtering tuned models list for Vertex AI is not currently supported',\n          );\n        } else {\n          actualParams.config!.filter = 'labels.tune-type:*';\n        }\n      }\n    }\n\n    return new Pager<types.Model>(\n      PagedItem.PAGED_ITEM_MODELS,\n      (x: types.ListModelsParameters) => this.listInternal(x),\n      await this.listInternal(actualParams),\n      actualParams,\n    );\n  };\n\n  /**\n   * Edits an image based on a prompt, list of reference images, and configuration.\n   *\n   * @param params - The parameters for editing an image.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await client.models.editImage({\n   *  model: 'imagen-3.0-capability-001',\n   *  prompt: 'Generate an image containing a mug with the product logo [1] visible on the side of the mug.',\n   *  referenceImages: [subjectReferenceImage]\n   *  config: {\n   *    numberOfImages: 1,\n   *    includeRaiReason: true,\n   *  },\n   * });\n   * console.log(response?.generatedImages?.[0]?.image?.imageBytes);\n   * ```\n   */\n  editImage = async (\n    params: types.EditImageParameters,\n  ): Promise<types.EditImageResponse> => {\n    const paramsInternal: _internal_types.EditImageParametersInternal = {\n      model: params.model,\n      prompt: params.prompt,\n      referenceImages: [],\n      config: params.config,\n    };\n    if (params.referenceImages) {\n      if (params.referenceImages) {\n        paramsInternal.referenceImages = params.referenceImages.map((img) =>\n          img.toReferenceImageAPI(),\n        );\n      }\n    }\n    return await this.editImageInternal(paramsInternal);\n  };\n\n  /**\n   * Upscales an image based on an image, upscale factor, and configuration.\n   * Only supported in Vertex AI currently.\n   *\n   * @param params - The parameters for upscaling an image.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await client.models.upscaleImage({\n   *  model: 'imagen-3.0-generate-002',\n   *  image: image,\n   *  upscaleFactor: 'x2',\n   *  config: {\n   *    includeRaiReason: true,\n   *  },\n   * });\n   * console.log(response?.generatedImages?.[0]?.image?.imageBytes);\n   * ```\n   */\n  upscaleImage = async (\n    params: types.UpscaleImageParameters,\n  ): Promise<types.UpscaleImageResponse> => {\n    let apiConfig: _internal_types.UpscaleImageAPIConfigInternal = {\n      numberOfImages: 1,\n      mode: 'upscale',\n    };\n\n    if (params.config) {\n      apiConfig = {...apiConfig, ...params.config};\n    }\n\n    const apiParams: _internal_types.UpscaleImageAPIParametersInternal = {\n      model: params.model,\n      image: params.image,\n      upscaleFactor: params.upscaleFactor,\n      config: apiConfig,\n    };\n    return await this.upscaleImageInternal(apiParams);\n  };\n\n  /**\n   *  Generates videos based on a text description and configuration.\n   *\n   * @param params - The parameters for generating videos.\n   * @return A Promise<GenerateVideosOperation> which allows you to track the progress and eventually retrieve the generated videos using the operations.get method.\n   *\n   * @example\n   * ```ts\n   * const operation = await ai.models.generateVideos({\n   *  model: 'veo-2.0-generate-001',\n   *  source: {\n   *    prompt: 'A neon hologram of a cat driving at top speed',\n   *  },\n   *  config: {\n   *    numberOfVideos: 1\n   * });\n   *\n   * while (!operation.done) {\n   *   await new Promise(resolve => setTimeout(resolve, 10000));\n   *   operation = await ai.operations.getVideosOperation({operation: operation});\n   * }\n   *\n   * console.log(operation.response?.generatedVideos?.[0]?.video?.uri);\n   * ```\n   */\n\n  generateVideos = async (\n    params: types.GenerateVideosParameters,\n  ): Promise<types.GenerateVideosOperation> => {\n    if ((params.prompt || params.image || params.video) && params.source) {\n      throw new Error(\n        'Source and prompt/image/video are mutually exclusive. Please only use source.',\n      );\n    }\n    // Gemini API does not support video bytes.\n    if (!this.apiClient.isVertexAI()) {\n      if (params.video?.uri && params.video?.videoBytes) {\n        params.video = {\n          uri: params.video.uri,\n          mimeType: params.video.mimeType,\n        };\n      } else if (\n        params.source?.video?.uri &&\n        params.source?.video?.videoBytes\n      ) {\n        params.source.video = {\n          uri: params.source.video.uri,\n          mimeType: params.source.video.mimeType,\n        };\n      }\n    }\n    return await this.generateVideosInternal(params);\n  };\n\n  private async generateContentInternal(\n    params: types.GenerateContentParameters,\n  ): Promise<types.GenerateContentResponse> {\n    let response: Promise<types.GenerateContentResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.generateContentParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:generateContent',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.GenerateContentResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.GenerateContentResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.generateContentResponseFromVertex(apiResponse);\n        const typedResp = new types.GenerateContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = converters.generateContentParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:generateContent',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.GenerateContentResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.GenerateContentResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.generateContentResponseFromMldev(apiResponse);\n        const typedResp = new types.GenerateContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  private async generateContentStreamInternal(\n    params: types.GenerateContentParameters,\n  ): Promise<AsyncGenerator<types.GenerateContentResponse>> {\n    let response: Promise<AsyncGenerator<types.HttpResponse>>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.generateContentParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:streamGenerateContent?alt=sse',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      const apiClient = this.apiClient;\n      response = apiClient.requestStream({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: params.config?.httpOptions,\n        abortSignal: params.config?.abortSignal,\n      }) as Promise<AsyncGenerator<types.HttpResponse>>;\n\n      return response.then(async function* (\n        apiResponse: AsyncGenerator<types.HttpResponse>,\n      ) {\n        for await (const chunk of apiResponse) {\n          const resp = converters.generateContentResponseFromVertex(\n            (await chunk.json()) as types.GenerateContentResponse,\n          );\n\n          resp['sdkHttpResponse'] = {\n            headers: chunk.headers,\n          } as types.HttpResponse;\n\n          const typedResp = new types.GenerateContentResponse();\n          Object.assign(typedResp, resp);\n          yield typedResp;\n        }\n      });\n    } else {\n      const body = converters.generateContentParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:streamGenerateContent?alt=sse',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      const apiClient = this.apiClient;\n      response = apiClient.requestStream({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: params.config?.httpOptions,\n        abortSignal: params.config?.abortSignal,\n      }) as Promise<AsyncGenerator<types.HttpResponse>>;\n\n      return response.then(async function* (\n        apiResponse: AsyncGenerator<types.HttpResponse>,\n      ) {\n        for await (const chunk of apiResponse) {\n          const resp = converters.generateContentResponseFromMldev(\n            (await chunk.json()) as types.GenerateContentResponse,\n          );\n\n          resp['sdkHttpResponse'] = {\n            headers: chunk.headers,\n          } as types.HttpResponse;\n\n          const typedResp = new types.GenerateContentResponse();\n          Object.assign(typedResp, resp);\n          yield typedResp;\n        }\n      });\n    }\n  }\n\n  /**\n   * Calculates embeddings for the given contents. Only text is supported.\n   *\n   * @param params - The parameters for embedding contents.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.embedContent({\n   *  model: 'text-embedding-004',\n   *  contents: [\n   *    'What is your name?',\n   *    'What is your favorite color?',\n   *  ],\n   *  config: {\n   *    outputDimensionality: 64,\n   *  },\n   * });\n   * console.log(response);\n   * ```\n   */\n  async embedContent(\n    params: types.EmbedContentParameters,\n  ): Promise<types.EmbedContentResponse> {\n    let response: Promise<types.EmbedContentResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.embedContentParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:predict',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.EmbedContentResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.EmbedContentResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.embedContentResponseFromVertex(apiResponse);\n        const typedResp = new types.EmbedContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = converters.embedContentParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:batchEmbedContents',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.EmbedContentResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.EmbedContentResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.embedContentResponseFromMldev(apiResponse);\n        const typedResp = new types.EmbedContentResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Private method for generating images.\n   */\n  private async generateImagesInternal(\n    params: types.GenerateImagesParameters,\n  ): Promise<types.GenerateImagesResponse> {\n    let response: Promise<types.GenerateImagesResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.generateImagesParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:predict',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.GenerateImagesResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.GenerateImagesResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.generateImagesResponseFromVertex(apiResponse);\n        const typedResp = new types.GenerateImagesResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = converters.generateImagesParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:predict',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.GenerateImagesResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.GenerateImagesResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.generateImagesResponseFromMldev(apiResponse);\n        const typedResp = new types.GenerateImagesResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Private method for editing an image.\n   */\n  private async editImageInternal(\n    params: _internal_types.EditImageParametersInternal,\n  ): Promise<types.EditImageResponse> {\n    let response: Promise<types.EditImageResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.editImageParametersInternalToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:predict',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.EditImageResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.EditImageResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.editImageResponseFromVertex(apiResponse);\n        const typedResp = new types.EditImageResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      throw new Error('This method is only supported by the Vertex AI.');\n    }\n  }\n\n  /**\n   * Private method for upscaling an image.\n   */\n  private async upscaleImageInternal(\n    params: _internal_types.UpscaleImageAPIParametersInternal,\n  ): Promise<types.UpscaleImageResponse> {\n    let response: Promise<types.UpscaleImageResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.upscaleImageAPIParametersInternalToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:predict',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.UpscaleImageResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.UpscaleImageResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.upscaleImageResponseFromVertex(apiResponse);\n        const typedResp = new types.UpscaleImageResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      throw new Error('This method is only supported by the Vertex AI.');\n    }\n  }\n\n  /**\n   * Recontextualizes an image.\n   *\n   * There are two types of recontextualization currently supported:\n   * 1) Imagen Product Recontext - Generate images of products in new scenes\n   *    and contexts.\n   * 2) Virtual Try-On: Generate images of persons modeling fashion products.\n   *\n   * @param params - The parameters for recontextualizing an image.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response1 = await ai.models.recontextImage({\n   *  model: 'imagen-product-recontext-preview-06-30',\n   *  source: {\n   *    prompt: 'In a modern kitchen setting.',\n   *    productImages: [productImage],\n   *  },\n   *  config: {\n   *    numberOfImages: 1,\n   *  },\n   * });\n   * console.log(response1?.generatedImages?.[0]?.image?.imageBytes);\n   *\n   * const response2 = await ai.models.recontextImage({\n   *  model: 'virtual-try-on-preview-08-04',\n   *  source: {\n   *    personImage: personImage,\n   *    productImages: [productImage],\n   *  },\n   *  config: {\n   *    numberOfImages: 1,\n   *  },\n   * });\n   * console.log(response2?.generatedImages?.[0]?.image?.imageBytes);\n   * ```\n   */\n  async recontextImage(\n    params: types.RecontextImageParameters,\n  ): Promise<types.RecontextImageResponse> {\n    let response: Promise<types.RecontextImageResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.recontextImageParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:predict',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.RecontextImageResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.recontextImageResponseFromVertex(apiResponse);\n        const typedResp = new types.RecontextImageResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      throw new Error('This method is only supported by the Vertex AI.');\n    }\n  }\n\n  /**\n   * Segments an image, creating a mask of a specified area.\n   *\n   * @param params - The parameters for segmenting an image.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.segmentImage({\n   *  model: 'image-segmentation-001',\n   *  source: {\n   *    image: image,\n   *  },\n   *  config: {\n   *    mode: 'foreground',\n   *  },\n   * });\n   * console.log(response?.generatedMasks?.[0]?.mask?.imageBytes);\n   * ```\n   */\n  async segmentImage(\n    params: types.SegmentImageParameters,\n  ): Promise<types.SegmentImageResponse> {\n    let response: Promise<types.SegmentImageResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.segmentImageParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:predict',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.SegmentImageResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.segmentImageResponseFromVertex(apiResponse);\n        const typedResp = new types.SegmentImageResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      throw new Error('This method is only supported by the Vertex AI.');\n    }\n  }\n\n  /**\n   * Fetches information about a model by name.\n   *\n   * @example\n   * ```ts\n   * const modelInfo = await ai.models.get({model: 'gemini-2.0-flash'});\n   * ```\n   */\n  async get(params: types.GetModelParameters): Promise<types.Model> {\n    let response: Promise<types.Model>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.getModelParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.Model>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.modelFromVertex(apiResponse);\n\n        return resp as types.Model;\n      });\n    } else {\n      const body = converters.getModelParametersToMldev(this.apiClient, params);\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.Model>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.modelFromMldev(apiResponse);\n\n        return resp as types.Model;\n      });\n    }\n  }\n\n  private async listInternal(\n    params: types.ListModelsParameters,\n  ): Promise<types.ListModelsResponse> {\n    let response: Promise<types.ListModelsResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.listModelsParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{models_url}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.ListModelsResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.ListModelsResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.listModelsResponseFromVertex(apiResponse);\n        const typedResp = new types.ListModelsResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = converters.listModelsParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{models_url}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.ListModelsResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.ListModelsResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.listModelsResponseFromMldev(apiResponse);\n        const typedResp = new types.ListModelsResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Updates a tuned model by its name.\n   *\n   * @param params - The parameters for updating the model.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.update({\n   *   model: 'tuned-model-name',\n   *   config: {\n   *     displayName: 'New display name',\n   *     description: 'New description',\n   *   },\n   * });\n   * ```\n   */\n  async update(params: types.UpdateModelParameters): Promise<types.Model> {\n    let response: Promise<types.Model>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.updateModelParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'PATCH',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.Model>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.modelFromVertex(apiResponse);\n\n        return resp as types.Model;\n      });\n    } else {\n      const body = converters.updateModelParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'PATCH',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.Model>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.modelFromMldev(apiResponse);\n\n        return resp as types.Model;\n      });\n    }\n  }\n\n  /**\n   * Deletes a tuned model by its name.\n   *\n   * @param params - The parameters for deleting the model.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.delete({model: 'tuned-model-name'});\n   * ```\n   */\n  async delete(\n    params: types.DeleteModelParameters,\n  ): Promise<types.DeleteModelResponse> {\n    let response: Promise<types.DeleteModelResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.deleteModelParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'DELETE',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.DeleteModelResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.DeleteModelResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.deleteModelResponseFromVertex(apiResponse);\n        const typedResp = new types.DeleteModelResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = converters.deleteModelParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'DELETE',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.DeleteModelResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.DeleteModelResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.deleteModelResponseFromMldev(apiResponse);\n        const typedResp = new types.DeleteModelResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Counts the number of tokens in the given contents. Multimodal input is\n   * supported for Gemini models.\n   *\n   * @param params - The parameters for counting tokens.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.countTokens({\n   *  model: 'gemini-2.0-flash',\n   *  contents: 'The quick brown fox jumps over the lazy dog.'\n   * });\n   * console.log(response);\n   * ```\n   */\n  async countTokens(\n    params: types.CountTokensParameters,\n  ): Promise<types.CountTokensResponse> {\n    let response: Promise<types.CountTokensResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.countTokensParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:countTokens',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.CountTokensResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.CountTokensResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.countTokensResponseFromVertex(apiResponse);\n        const typedResp = new types.CountTokensResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = converters.countTokensParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:countTokens',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.CountTokensResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.CountTokensResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.countTokensResponseFromMldev(apiResponse);\n        const typedResp = new types.CountTokensResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Given a list of contents, returns a corresponding TokensInfo containing\n   * the list of tokens and list of token ids.\n   *\n   * This method is not supported by the Gemini Developer API.\n   *\n   * @param params - The parameters for computing tokens.\n   * @return The response from the API.\n   *\n   * @example\n   * ```ts\n   * const response = await ai.models.computeTokens({\n   *  model: 'gemini-2.0-flash',\n   *  contents: 'What is your name?'\n   * });\n   * console.log(response);\n   * ```\n   */\n  async computeTokens(\n    params: types.ComputeTokensParameters,\n  ): Promise<types.ComputeTokensResponse> {\n    let response: Promise<types.ComputeTokensResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.computeTokensParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:computeTokens',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.ComputeTokensResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.ComputeTokensResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.computeTokensResponseFromVertex(apiResponse);\n        const typedResp = new types.ComputeTokensResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      throw new Error('This method is only supported by the Vertex AI.');\n    }\n  }\n\n  /**\n   * Private method for generating videos.\n   */\n  private async generateVideosInternal(\n    params: types.GenerateVideosParameters,\n  ): Promise<types.GenerateVideosOperation> {\n    let response: Promise<types.GenerateVideosOperation>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.generateVideosParametersToVertex(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:predictLongRunning',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.GenerateVideosOperation>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.generateVideosOperationFromVertex(apiResponse);\n        const typedResp = new types.GenerateVideosOperation();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = converters.generateVideosParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        '{model}:predictLongRunning',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.GenerateVideosOperation>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.generateVideosOperationFromMldev(apiResponse);\n        const typedResp = new types.GenerateVideosOperation();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from './_api_client.js';\nimport * as common from './_common.js';\nimport {BaseModule} from './_common.js';\nimport * as converters from './converters/_operations_converters.js';\nimport * as types from './types.js';\n\nexport class Operations extends BaseModule {\n  constructor(private readonly apiClient: ApiClient) {\n    super();\n  }\n\n  /**\n   * Gets the status of a long-running operation.\n   *\n   * @param parameters The parameters for the get operation request.\n   * @return The updated Operation object, with the latest status or result.\n   */\n  async getVideosOperation(\n    parameters: types.OperationGetParameters<\n      types.GenerateVideosResponse,\n      types.GenerateVideosOperation\n    >,\n  ): Promise<types.GenerateVideosOperation> {\n    const operation = parameters.operation;\n    const config = parameters.config;\n\n    if (operation.name === undefined || operation.name === '') {\n      throw new Error('Operation name is required.');\n    }\n\n    if (this.apiClient.isVertexAI()) {\n      const resourceName = operation.name.split('/operations/')[0];\n      let httpOptions: types.HttpOptions | undefined = undefined;\n\n      if (config && 'httpOptions' in config) {\n        httpOptions = config.httpOptions;\n      }\n\n      const rawOperation = await this.fetchPredictVideosOperationInternal({\n        operationName: operation.name,\n        resourceName: resourceName,\n        config: {httpOptions: httpOptions},\n      });\n\n      return operation._fromAPIResponse({\n        apiResponse: rawOperation,\n        isVertexAI: true,\n      });\n    } else {\n      const rawOperation = await this.getVideosOperationInternal({\n        operationName: operation.name,\n        config: config,\n      });\n      return operation._fromAPIResponse({\n        apiResponse: rawOperation,\n        isVertexAI: false,\n      });\n    }\n  }\n\n  /**\n   * Gets the status of a long-running operation.\n   *\n   * @param parameters The parameters for the get operation request.\n   * @return The updated Operation object, with the latest status or result.\n   */\n  async get<T, U extends types.Operation<T>>(\n    parameters: types.OperationGetParameters<T, U>,\n  ): Promise<types.Operation<T>> {\n    const operation = parameters.operation;\n    const config = parameters.config;\n\n    if (operation.name === undefined || operation.name === '') {\n      throw new Error('Operation name is required.');\n    }\n\n    if (this.apiClient.isVertexAI()) {\n      const resourceName = operation.name.split('/operations/')[0];\n      let httpOptions: types.HttpOptions | undefined = undefined;\n\n      if (config && 'httpOptions' in config) {\n        httpOptions = config.httpOptions;\n      }\n\n      const rawOperation = await this.fetchPredictVideosOperationInternal({\n        operationName: operation.name,\n        resourceName: resourceName,\n        config: {httpOptions: httpOptions},\n      });\n\n      return operation._fromAPIResponse({\n        apiResponse: rawOperation,\n        isVertexAI: true,\n      });\n    } else {\n      const rawOperation = await this.getVideosOperationInternal({\n        operationName: operation.name,\n        config: config,\n      });\n      return operation._fromAPIResponse({\n        apiResponse: rawOperation,\n        isVertexAI: false,\n      });\n    }\n  }\n\n  private async getVideosOperationInternal(\n    params: types.GetOperationParameters,\n  ): Promise<Record<string, unknown>> {\n    let response: Promise<Record<string, unknown>>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.getOperationParametersToVertex(params);\n      path = common.formatMap(\n        '{operationName}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<Record<string, unknown>>;\n\n      return response;\n    } else {\n      const body = converters.getOperationParametersToMldev(params);\n      path = common.formatMap(\n        '{operationName}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<Record<string, unknown>>;\n\n      return response;\n    }\n  }\n\n  private async fetchPredictVideosOperationInternal(\n    params: types.FetchPredictOperationParameters,\n  ): Promise<Record<string, unknown>> {\n    let response: Promise<Record<string, unknown>>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.fetchPredictOperationParametersToVertex(params);\n      path = common.formatMap(\n        '{resourceName}:fetchPredictOperation',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<Record<string, unknown>>;\n\n      return response;\n    } else {\n      throw new Error('This method is only supported by the Vertex AI.');\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from '../_api_client.js';\nimport * as common from '../_common.js';\nimport * as t from '../_transformers.js';\nimport type * as types from '../types.js';\n\nexport function blobToMldev(fromObject: types.Blob): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['displayName']) !== undefined) {\n    throw new Error('displayName parameter is not supported in Gemini API.');\n  }\n\n  const fromData = common.getValueByPath(fromObject, ['data']);\n  if (fromData != null) {\n    common.setValueByPath(toObject, ['data'], fromData);\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function contentToMldev(\n  fromObject: types.Content,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromParts = common.getValueByPath(fromObject, ['parts']);\n  if (fromParts != null) {\n    let transformedList = fromParts;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return partToMldev(item);\n      });\n    }\n    common.setValueByPath(toObject, ['parts'], transformedList);\n  }\n\n  const fromRole = common.getValueByPath(fromObject, ['role']);\n  if (fromRole != null) {\n    common.setValueByPath(toObject, ['role'], fromRole);\n  }\n\n  return toObject;\n}\n\nexport function createAuthTokenConfigToMldev(\n  apiClient: ApiClient,\n  fromObject: types.CreateAuthTokenConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);\n  if (parentObject !== undefined && fromExpireTime != null) {\n    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);\n  }\n\n  const fromNewSessionExpireTime = common.getValueByPath(fromObject, [\n    'newSessionExpireTime',\n  ]);\n  if (parentObject !== undefined && fromNewSessionExpireTime != null) {\n    common.setValueByPath(\n      parentObject,\n      ['newSessionExpireTime'],\n      fromNewSessionExpireTime,\n    );\n  }\n\n  const fromUses = common.getValueByPath(fromObject, ['uses']);\n  if (parentObject !== undefined && fromUses != null) {\n    common.setValueByPath(parentObject, ['uses'], fromUses);\n  }\n\n  const fromLiveConnectConstraints = common.getValueByPath(fromObject, [\n    'liveConnectConstraints',\n  ]);\n  if (parentObject !== undefined && fromLiveConnectConstraints != null) {\n    common.setValueByPath(\n      parentObject,\n      ['bidiGenerateContentSetup'],\n      liveConnectConstraintsToMldev(apiClient, fromLiveConnectConstraints),\n    );\n  }\n\n  const fromLockAdditionalFields = common.getValueByPath(fromObject, [\n    'lockAdditionalFields',\n  ]);\n  if (parentObject !== undefined && fromLockAdditionalFields != null) {\n    common.setValueByPath(\n      parentObject,\n      ['fieldMask'],\n      fromLockAdditionalFields,\n    );\n  }\n\n  return toObject;\n}\n\nexport function createAuthTokenParametersToMldev(\n  apiClient: ApiClient,\n  fromObject: types.CreateAuthTokenParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      createAuthTokenConfigToMldev(apiClient, fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nexport function createAuthTokenParametersToVertex(\n  fromObject: types.CreateAuthTokenParameters,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['config']) !== undefined) {\n    throw new Error('config parameter is not supported in Vertex AI.');\n  }\n\n  return toObject;\n}\n\nexport function fileDataToMldev(\n  fromObject: types.FileData,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['displayName']) !== undefined) {\n    throw new Error('displayName parameter is not supported in Gemini API.');\n  }\n\n  const fromFileUri = common.getValueByPath(fromObject, ['fileUri']);\n  if (fromFileUri != null) {\n    common.setValueByPath(toObject, ['fileUri'], fromFileUri);\n  }\n\n  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);\n  if (fromMimeType != null) {\n    common.setValueByPath(toObject, ['mimeType'], fromMimeType);\n  }\n\n  return toObject;\n}\n\nexport function googleMapsToMldev(\n  fromObject: types.GoogleMaps,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['authConfig']) !== undefined) {\n    throw new Error('authConfig parameter is not supported in Gemini API.');\n  }\n\n  const fromEnableWidget = common.getValueByPath(fromObject, ['enableWidget']);\n  if (fromEnableWidget != null) {\n    common.setValueByPath(toObject, ['enableWidget'], fromEnableWidget);\n  }\n\n  return toObject;\n}\n\nexport function googleSearchToMldev(\n  fromObject: types.GoogleSearch,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromTimeRangeFilter = common.getValueByPath(fromObject, [\n    'timeRangeFilter',\n  ]);\n  if (fromTimeRangeFilter != null) {\n    common.setValueByPath(toObject, ['timeRangeFilter'], fromTimeRangeFilter);\n  }\n\n  if (common.getValueByPath(fromObject, ['excludeDomains']) !== undefined) {\n    throw new Error('excludeDomains parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function liveConnectConfigToMldev(\n  fromObject: types.LiveConnectConfig,\n  parentObject: Record<string, unknown>,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGenerationConfig = common.getValueByPath(fromObject, [\n    'generationConfig',\n  ]);\n  if (parentObject !== undefined && fromGenerationConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig'],\n      fromGenerationConfig,\n    );\n  }\n\n  const fromResponseModalities = common.getValueByPath(fromObject, [\n    'responseModalities',\n  ]);\n  if (parentObject !== undefined && fromResponseModalities != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'responseModalities'],\n      fromResponseModalities,\n    );\n  }\n\n  const fromTemperature = common.getValueByPath(fromObject, ['temperature']);\n  if (parentObject !== undefined && fromTemperature != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'temperature'],\n      fromTemperature,\n    );\n  }\n\n  const fromTopP = common.getValueByPath(fromObject, ['topP']);\n  if (parentObject !== undefined && fromTopP != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'topP'],\n      fromTopP,\n    );\n  }\n\n  const fromTopK = common.getValueByPath(fromObject, ['topK']);\n  if (parentObject !== undefined && fromTopK != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'topK'],\n      fromTopK,\n    );\n  }\n\n  const fromMaxOutputTokens = common.getValueByPath(fromObject, [\n    'maxOutputTokens',\n  ]);\n  if (parentObject !== undefined && fromMaxOutputTokens != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'maxOutputTokens'],\n      fromMaxOutputTokens,\n    );\n  }\n\n  const fromMediaResolution = common.getValueByPath(fromObject, [\n    'mediaResolution',\n  ]);\n  if (parentObject !== undefined && fromMediaResolution != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'mediaResolution'],\n      fromMediaResolution,\n    );\n  }\n\n  const fromSeed = common.getValueByPath(fromObject, ['seed']);\n  if (parentObject !== undefined && fromSeed != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'seed'],\n      fromSeed,\n    );\n  }\n\n  const fromSpeechConfig = common.getValueByPath(fromObject, ['speechConfig']);\n  if (parentObject !== undefined && fromSpeechConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'speechConfig'],\n      t.tLiveSpeechConfig(fromSpeechConfig),\n    );\n  }\n\n  const fromThinkingConfig = common.getValueByPath(fromObject, [\n    'thinkingConfig',\n  ]);\n  if (parentObject !== undefined && fromThinkingConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'thinkingConfig'],\n      fromThinkingConfig,\n    );\n  }\n\n  const fromEnableAffectiveDialog = common.getValueByPath(fromObject, [\n    'enableAffectiveDialog',\n  ]);\n  if (parentObject !== undefined && fromEnableAffectiveDialog != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'generationConfig', 'enableAffectiveDialog'],\n      fromEnableAffectiveDialog,\n    );\n  }\n\n  const fromSystemInstruction = common.getValueByPath(fromObject, [\n    'systemInstruction',\n  ]);\n  if (parentObject !== undefined && fromSystemInstruction != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'systemInstruction'],\n      contentToMldev(t.tContent(fromSystemInstruction)),\n    );\n  }\n\n  const fromTools = common.getValueByPath(fromObject, ['tools']);\n  if (parentObject !== undefined && fromTools != null) {\n    let transformedList = t.tTools(fromTools);\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return toolToMldev(t.tTool(item));\n      });\n    }\n    common.setValueByPath(parentObject, ['setup', 'tools'], transformedList);\n  }\n\n  const fromSessionResumption = common.getValueByPath(fromObject, [\n    'sessionResumption',\n  ]);\n  if (parentObject !== undefined && fromSessionResumption != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'sessionResumption'],\n      sessionResumptionConfigToMldev(fromSessionResumption),\n    );\n  }\n\n  const fromInputAudioTranscription = common.getValueByPath(fromObject, [\n    'inputAudioTranscription',\n  ]);\n  if (parentObject !== undefined && fromInputAudioTranscription != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'inputAudioTranscription'],\n      fromInputAudioTranscription,\n    );\n  }\n\n  const fromOutputAudioTranscription = common.getValueByPath(fromObject, [\n    'outputAudioTranscription',\n  ]);\n  if (parentObject !== undefined && fromOutputAudioTranscription != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'outputAudioTranscription'],\n      fromOutputAudioTranscription,\n    );\n  }\n\n  const fromRealtimeInputConfig = common.getValueByPath(fromObject, [\n    'realtimeInputConfig',\n  ]);\n  if (parentObject !== undefined && fromRealtimeInputConfig != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'realtimeInputConfig'],\n      fromRealtimeInputConfig,\n    );\n  }\n\n  const fromContextWindowCompression = common.getValueByPath(fromObject, [\n    'contextWindowCompression',\n  ]);\n  if (parentObject !== undefined && fromContextWindowCompression != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'contextWindowCompression'],\n      fromContextWindowCompression,\n    );\n  }\n\n  const fromProactivity = common.getValueByPath(fromObject, ['proactivity']);\n  if (parentObject !== undefined && fromProactivity != null) {\n    common.setValueByPath(\n      parentObject,\n      ['setup', 'proactivity'],\n      fromProactivity,\n    );\n  }\n\n  return toObject;\n}\n\nexport function liveConnectConstraintsToMldev(\n  apiClient: ApiClient,\n  fromObject: types.LiveConnectConstraints,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['model']);\n  if (fromModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['setup', 'model'],\n      t.tModel(apiClient, fromModel),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    common.setValueByPath(\n      toObject,\n      ['config'],\n      liveConnectConfigToMldev(fromConfig, toObject),\n    );\n  }\n\n  return toObject;\n}\n\nexport function partToMldev(fromObject: types.Part): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromVideoMetadata = common.getValueByPath(fromObject, [\n    'videoMetadata',\n  ]);\n  if (fromVideoMetadata != null) {\n    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);\n  }\n\n  const fromThought = common.getValueByPath(fromObject, ['thought']);\n  if (fromThought != null) {\n    common.setValueByPath(toObject, ['thought'], fromThought);\n  }\n\n  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);\n  if (fromInlineData != null) {\n    common.setValueByPath(\n      toObject,\n      ['inlineData'],\n      blobToMldev(fromInlineData),\n    );\n  }\n\n  const fromFileData = common.getValueByPath(fromObject, ['fileData']);\n  if (fromFileData != null) {\n    common.setValueByPath(\n      toObject,\n      ['fileData'],\n      fileDataToMldev(fromFileData),\n    );\n  }\n\n  const fromThoughtSignature = common.getValueByPath(fromObject, [\n    'thoughtSignature',\n  ]);\n  if (fromThoughtSignature != null) {\n    common.setValueByPath(toObject, ['thoughtSignature'], fromThoughtSignature);\n  }\n\n  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);\n  if (fromFunctionCall != null) {\n    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);\n  }\n\n  const fromCodeExecutionResult = common.getValueByPath(fromObject, [\n    'codeExecutionResult',\n  ]);\n  if (fromCodeExecutionResult != null) {\n    common.setValueByPath(\n      toObject,\n      ['codeExecutionResult'],\n      fromCodeExecutionResult,\n    );\n  }\n\n  const fromExecutableCode = common.getValueByPath(fromObject, [\n    'executableCode',\n  ]);\n  if (fromExecutableCode != null) {\n    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);\n  }\n\n  const fromFunctionResponse = common.getValueByPath(fromObject, [\n    'functionResponse',\n  ]);\n  if (fromFunctionResponse != null) {\n    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);\n  }\n\n  const fromText = common.getValueByPath(fromObject, ['text']);\n  if (fromText != null) {\n    common.setValueByPath(toObject, ['text'], fromText);\n  }\n\n  return toObject;\n}\n\nexport function sessionResumptionConfigToMldev(\n  fromObject: types.SessionResumptionConfig,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromHandle = common.getValueByPath(fromObject, ['handle']);\n  if (fromHandle != null) {\n    common.setValueByPath(toObject, ['handle'], fromHandle);\n  }\n\n  if (common.getValueByPath(fromObject, ['transparent']) !== undefined) {\n    throw new Error('transparent parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function toolToMldev(fromObject: types.Tool): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromFunctionDeclarations = common.getValueByPath(fromObject, [\n    'functionDeclarations',\n  ]);\n  if (fromFunctionDeclarations != null) {\n    let transformedList = fromFunctionDeclarations;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['functionDeclarations'], transformedList);\n  }\n\n  if (common.getValueByPath(fromObject, ['retrieval']) !== undefined) {\n    throw new Error('retrieval parameter is not supported in Gemini API.');\n  }\n\n  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);\n  if (fromGoogleSearch != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearch'],\n      googleSearchToMldev(fromGoogleSearch),\n    );\n  }\n\n  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [\n    'googleSearchRetrieval',\n  ]);\n  if (fromGoogleSearchRetrieval != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleSearchRetrieval'],\n      fromGoogleSearchRetrieval,\n    );\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['enterpriseWebSearch']) !== undefined\n  ) {\n    throw new Error(\n      'enterpriseWebSearch parameter is not supported in Gemini API.',\n    );\n  }\n\n  const fromGoogleMaps = common.getValueByPath(fromObject, ['googleMaps']);\n  if (fromGoogleMaps != null) {\n    common.setValueByPath(\n      toObject,\n      ['googleMaps'],\n      googleMapsToMldev(fromGoogleMaps),\n    );\n  }\n\n  const fromUrlContext = common.getValueByPath(fromObject, ['urlContext']);\n  if (fromUrlContext != null) {\n    common.setValueByPath(toObject, ['urlContext'], fromUrlContext);\n  }\n\n  const fromComputerUse = common.getValueByPath(fromObject, ['computerUse']);\n  if (fromComputerUse != null) {\n    common.setValueByPath(toObject, ['computerUse'], fromComputerUse);\n  }\n\n  const fromCodeExecution = common.getValueByPath(fromObject, [\n    'codeExecution',\n  ]);\n  if (fromCodeExecution != null) {\n    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);\n  }\n\n  return toObject;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ApiClient} from './_api_client.js';\nimport * as common from './_common.js';\nimport {BaseModule} from './_common.js';\nimport * as converters from './converters/_tokens_converters.js';\nimport * as types from './types.js';\n\n/**\n * Returns a comma-separated list of field masks from a given object.\n *\n * @param setup The object to extract field masks from.\n * @return A comma-separated list of field masks.\n */\nfunction getFieldMasks(setup: Record<string, unknown>): string {\n  const fields: string[] = [];\n\n  for (const key in setup) {\n    if (Object.prototype.hasOwnProperty.call(setup, key)) {\n      const value = setup[key];\n      // 2nd layer, recursively get field masks see TODO(b/418290100)\n      if (\n        typeof value === 'object' &&\n        value != null &&\n        Object.keys(value).length > 0\n      ) {\n        const field = Object.keys(value).map((kk) => `${key}.${kk}`);\n        fields.push(...field);\n      } else {\n        fields.push(key); // 1st layer\n      }\n    }\n  }\n\n  return fields.join(',');\n}\n\n/**\n * Converts bidiGenerateContentSetup.\n * @param requestDict - The request dictionary.\n * @param config - The configuration object.\n * @return - The modified request dictionary.\n */\nfunction convertBidiSetupToTokenSetup(\n  requestDict: Record<string, unknown>,\n  config?: {lockAdditionalFields?: string[]},\n): Record<string, unknown> {\n  // Convert bidiGenerateContentSetup from bidiGenerateContentSetup.setup.\n  let setupForMaskGeneration: Record<string, unknown> | null = null;\n  const bidiGenerateContentSetupValue = requestDict['bidiGenerateContentSetup'];\n  if (\n    typeof bidiGenerateContentSetupValue === 'object' &&\n    bidiGenerateContentSetupValue !== null &&\n    'setup' in bidiGenerateContentSetupValue\n  ) {\n    // Now we know bidiGenerateContentSetupValue is an object and has a 'setup'\n    // property.\n    const innerSetup = (bidiGenerateContentSetupValue as {setup: unknown})\n      .setup;\n\n    if (typeof innerSetup === 'object' && innerSetup !== null) {\n      // Valid inner setup found.\n      requestDict['bidiGenerateContentSetup'] = innerSetup;\n      setupForMaskGeneration = innerSetup as Record<string, unknown>;\n    } else {\n      // `bidiGenerateContentSetupValue.setup` is not a valid object; treat as\n      // if bidiGenerateContentSetup is invalid.\n      delete requestDict['bidiGenerateContentSetup'];\n    }\n  } else if (bidiGenerateContentSetupValue !== undefined) {\n    // `bidiGenerateContentSetup` exists but not in the expected\n    // shape {setup: {...}}; treat as invalid.\n    delete requestDict['bidiGenerateContentSetup'];\n  }\n\n  const preExistingFieldMask = requestDict['fieldMask'];\n  // Handle mask generation setup.\n  if (setupForMaskGeneration) {\n    const generatedMaskFromBidi = getFieldMasks(setupForMaskGeneration);\n\n    if (\n      Array.isArray(config?.lockAdditionalFields) &&\n      config?.lockAdditionalFields.length === 0\n    ) {\n      // Case 1: lockAdditionalFields is an empty array. Lock only fields from\n      // bidi setup.\n      if (generatedMaskFromBidi) {\n        // Only assign if mask is not empty\n        requestDict['fieldMask'] = generatedMaskFromBidi;\n      } else {\n        delete requestDict['fieldMask']; // If mask is empty, effectively no\n        // specific fields locked by bidi\n      }\n    } else if (\n      config?.lockAdditionalFields &&\n      config.lockAdditionalFields.length > 0 &&\n      preExistingFieldMask !== null &&\n      Array.isArray(preExistingFieldMask) &&\n      preExistingFieldMask.length > 0\n    ) {\n      // Case 2: Lock fields from bidi setup + additional fields\n      // (preExistingFieldMask).\n\n      const generationConfigFields = [\n        'temperature',\n        'topK',\n        'topP',\n        'maxOutputTokens',\n        'responseModalities',\n        'seed',\n        'speechConfig',\n      ];\n\n      let mappedFieldsFromPreExisting: string[] = [];\n      if (preExistingFieldMask.length > 0) {\n        mappedFieldsFromPreExisting = preExistingFieldMask.map((field) => {\n          if (generationConfigFields.includes(field)) {\n            return `generationConfig.${field}`;\n          }\n          return field; // Keep original field name if not in\n          // generationConfigFields\n        });\n      }\n\n      const finalMaskParts: string[] = [];\n      if (generatedMaskFromBidi) {\n        finalMaskParts.push(generatedMaskFromBidi);\n      }\n      if (mappedFieldsFromPreExisting.length > 0) {\n        finalMaskParts.push(...mappedFieldsFromPreExisting);\n      }\n\n      if (finalMaskParts.length > 0) {\n        requestDict['fieldMask'] = finalMaskParts.join(',');\n      } else {\n        // If no fields from bidi and no valid additional fields from\n        // pre-existing mask.\n        delete requestDict['fieldMask'];\n      }\n    } else {\n      // Case 3: \"Lock all fields\" (meaning, don't send a field_mask, let server\n      // defaults apply or all are mutable). This is hit if:\n      //  - `config.lockAdditionalFields` is undefined.\n      //  - `config.lockAdditionalFields` is non-empty, BUT\n      //  `preExistingFieldMask` is null, not a string, or an empty string.\n      delete requestDict['fieldMask'];\n    }\n  } else {\n    // No valid `bidiGenerateContentSetup` was found or extracted.\n    // \"Lock additional null fields if any\".\n    if (\n      preExistingFieldMask !== null &&\n      Array.isArray(preExistingFieldMask) &&\n      preExistingFieldMask.length > 0\n    ) {\n      // If there's a pre-existing field mask, it's a string, and it's not\n      // empty, then we should lock all fields.\n      requestDict['fieldMask'] = preExistingFieldMask.join(',');\n    } else {\n      delete requestDict['fieldMask'];\n    }\n  }\n\n  return requestDict;\n}\n\nexport class Tokens extends BaseModule {\n  constructor(private readonly apiClient: ApiClient) {\n    super();\n  }\n  /**\n   * Creates an ephemeral auth token resource.\n   *\n   * @experimental\n   *\n   * @remarks\n   * Ephemeral auth tokens is only supported in the Gemini Developer API.\n   * It can be used for the session connection to the Live constrained API.\n   * Support in v1alpha only.\n   *\n   * @param params - The parameters for the create request.\n   * @return The created auth token.\n   *\n   * @example\n   * ```ts\n   * const ai = new GoogleGenAI({\n   *     apiKey: token.name,\n   *     httpOptions: { apiVersion: 'v1alpha' }  // Support in v1alpha only.\n   * });\n   *\n   * // Case 1: If LiveEphemeralParameters is unset, unlock LiveConnectConfig\n   * // when using the token in Live API sessions. Each session connection can\n   * // use a different configuration.\n   * const config: CreateAuthTokenConfig = {\n   *     uses: 3,\n   *     expireTime: '2025-05-01T00:00:00Z',\n   * }\n   * const token = await ai.tokens.create(config);\n   *\n   * // Case 2: If LiveEphemeralParameters is set, lock all fields in\n   * // LiveConnectConfig when using the token in Live API sessions. For\n   * // example, changing `outputAudioTranscription` in the Live API\n   * // connection will be ignored by the API.\n   * const config: CreateAuthTokenConfig =\n   *     uses: 3,\n   *     expireTime: '2025-05-01T00:00:00Z',\n   *     LiveEphemeralParameters: {\n   *        model: 'gemini-2.0-flash-001',\n   *        config: {\n   *           'responseModalities': ['AUDIO'],\n   *           'systemInstruction': 'Always answer in English.',\n   *        }\n   *     }\n   * }\n   * const token = await ai.tokens.create(config);\n   *\n   * // Case 3: If LiveEphemeralParameters is set and lockAdditionalFields is\n   * // set, lock LiveConnectConfig with set and additional fields (e.g.\n   * // responseModalities, systemInstruction, temperature in this example) when\n   * // using the token in Live API sessions.\n   * const config: CreateAuthTokenConfig =\n   *     uses: 3,\n   *     expireTime: '2025-05-01T00:00:00Z',\n   *     LiveEphemeralParameters: {\n   *        model: 'gemini-2.0-flash-001',\n   *        config: {\n   *           'responseModalities': ['AUDIO'],\n   *           'systemInstruction': 'Always answer in English.',\n   *        }\n   *     },\n   *     lockAdditionalFields: ['temperature'],\n   * }\n   * const token = await ai.tokens.create(config);\n   *\n   * // Case 4: If LiveEphemeralParameters is set and lockAdditionalFields is\n   * // empty array, lock LiveConnectConfig with set fields (e.g.\n   * // responseModalities, systemInstruction in this example) when using the\n   * // token in Live API sessions.\n   * const config: CreateAuthTokenConfig =\n   *     uses: 3,\n   *     expireTime: '2025-05-01T00:00:00Z',\n   *     LiveEphemeralParameters: {\n   *        model: 'gemini-2.0-flash-001',\n   *        config: {\n   *           'responseModalities': ['AUDIO'],\n   *           'systemInstruction': 'Always answer in English.',\n   *        }\n   *     },\n   *     lockAdditionalFields: [],\n   * }\n   * const token = await ai.tokens.create(config);\n   * ```\n   */\n\n  async create(\n    params: types.CreateAuthTokenParameters,\n  ): Promise<types.AuthToken> {\n    let response: Promise<types.AuthToken>;\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      throw new Error(\n        'The client.tokens.create method is only supported by the Gemini Developer API.',\n      );\n    } else {\n      const body = converters.createAuthTokenParametersToMldev(\n        this.apiClient,\n        params,\n      );\n      path = common.formatMap(\n        'auth_tokens',\n        body['_url'] as Record<string, unknown>,\n      );\n\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['config'];\n      delete body['_url'];\n      delete body['_query'];\n\n      const transformedBody = convertBidiSetupToTokenSetup(body, params.config);\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(transformedBody),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json();\n        }) as Promise<types.AuthToken>;\n\n      return response.then((resp) => {\n        return resp as types.AuthToken;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {GoogleAuth, GoogleAuthOptions} from 'google-auth-library';\n\nimport {Auth} from '../_auth.js';\n\nexport const GOOGLE_API_KEY_HEADER = 'x-goog-api-key';\nconst REQUIRED_VERTEX_AI_SCOPE =\n  'https://www.googleapis.com/auth/cloud-platform';\n\nexport interface NodeAuthOptions {\n  /**\n   * The API Key. This is required for Gemini API users.\n   */\n  apiKey?: string;\n  /**\n   * Optional. These are the authentication options provided by google-auth-library for Vertex AI users.\n   * Complete list of authentication options are documented in the\n   * GoogleAuthOptions interface:\n   * https://github.com/googleapis/google-auth-library-nodejs/blob/main/src/auth/googleauth.ts.\n   */\n  googleAuthOptions?: GoogleAuthOptions;\n}\n\nexport class NodeAuth implements Auth {\n  private readonly googleAuth?: GoogleAuth;\n  private readonly apiKey?: string;\n\n  constructor(opts: NodeAuthOptions) {\n    if (opts.apiKey !== undefined) {\n      this.apiKey = opts.apiKey;\n      return;\n    }\n    const vertexAuthOptions = buildGoogleAuthOptions(opts.googleAuthOptions);\n    this.googleAuth = new GoogleAuth(vertexAuthOptions);\n  }\n\n  async addAuthHeaders(headers: Headers, url?: string): Promise<void> {\n    if (this.apiKey !== undefined) {\n      if (this.apiKey.startsWith('auth_tokens/')) {\n        throw new Error('Ephemeral tokens are only supported by the live API.');\n      }\n      this.addKeyHeader(headers);\n      return;\n    }\n\n    return this.addGoogleAuthHeaders(headers, url);\n  }\n\n  private addKeyHeader(headers: Headers) {\n    if (headers.get(GOOGLE_API_KEY_HEADER) !== null) {\n      return;\n    }\n    if (this.apiKey === undefined) {\n      // This should never happen, this method is only called\n      // when apiKey is set.\n      throw new Error('Trying to set API key header but apiKey is not set');\n    }\n    headers.append(GOOGLE_API_KEY_HEADER, this.apiKey);\n  }\n\n  private async addGoogleAuthHeaders(\n    headers: Headers,\n    url?: string,\n  ): Promise<void> {\n    if (this.googleAuth === undefined) {\n      // This should never happen, addGoogleAuthHeaders should only be\n      // called when there is no apiKey set and in these cases googleAuth\n      // is set.\n      throw new Error(\n        'Trying to set google-auth headers but googleAuth is unset',\n      );\n    }\n    const authHeaders = await this.googleAuth.getRequestHeaders(url);\n    for (const [key, value] of authHeaders) {\n      if (headers.get(key) !== null) {\n        continue;\n      }\n      headers.append(key, value);\n    }\n  }\n}\n\nfunction buildGoogleAuthOptions(\n  googleAuthOptions?: GoogleAuthOptions,\n): GoogleAuthOptions {\n  let authOptions: GoogleAuthOptions;\n  if (!googleAuthOptions) {\n    authOptions = {\n      scopes: [REQUIRED_VERTEX_AI_SCOPE],\n    };\n    return authOptions;\n  } else {\n    authOptions = googleAuthOptions;\n    if (!authOptions.scopes) {\n      authOptions.scopes = [REQUIRED_VERTEX_AI_SCOPE];\n      return authOptions;\n    } else if (\n      (typeof authOptions.scopes === 'string' &&\n        authOptions.scopes !== REQUIRED_VERTEX_AI_SCOPE) ||\n      (Array.isArray(authOptions.scopes) &&\n        authOptions.scopes.indexOf(REQUIRED_VERTEX_AI_SCOPE) < 0)\n    ) {\n      throw new Error(\n        `Invalid auth scopes. Scopes must include: ${REQUIRED_VERTEX_AI_SCOPE}`,\n      );\n    }\n    return authOptions;\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {createWriteStream, writeFile} from 'fs';\nimport {Readable} from 'node:stream';\nimport type {ReadableStream} from 'node:stream/web';\n\nimport {ApiClient} from '../_api_client.js';\nimport {Downloader} from '../_downloader.js';\nimport {isGeneratedVideo, isVideo, tFileName} from '../_transformers.js';\nimport {\n  DownloadFileParameters,\n  GeneratedVideo,\n  HttpResponse,\n  Video,\n} from '../types.js';\n\nexport class NodeDownloader implements Downloader {\n  async download(\n    params: DownloadFileParameters,\n    apiClient: ApiClient,\n  ): Promise<void> {\n    if (params.downloadPath) {\n      const response = await downloadFile(params, apiClient);\n      if (response instanceof HttpResponse) {\n        const writer = createWriteStream(params.downloadPath);\n        Readable.fromWeb(\n          response.responseInternal.body as ReadableStream<Uint8Array>,\n        ).pipe(writer);\n      } else {\n        writeFile(\n          params.downloadPath,\n          response as string,\n          {encoding: 'base64'},\n          (error) => {\n            if (error) {\n              throw new Error(\n                `Failed to write file to ${params.downloadPath}: ${error}`,\n              );\n            }\n          },\n        );\n      }\n    }\n  }\n}\n\nasync function downloadFile(\n  params: DownloadFileParameters,\n  apiClient: ApiClient,\n): Promise<HttpResponse | string> {\n  const name = tFileName(params.file);\n  if (name !== undefined) {\n    return await apiClient.request({\n      path: `files/${name}:download`,\n      httpMethod: 'GET',\n      queryParams: {\n        'alt': 'media',\n      },\n      httpOptions: params.config?.httpOptions,\n      abortSignal: params.config?.abortSignal,\n    });\n  } else if (isGeneratedVideo(params.file)) {\n    const videoBytes = (params.file as GeneratedVideo).video?.videoBytes;\n    if (typeof videoBytes === 'string') {\n      return videoBytes;\n    } else {\n      throw new Error(\n        'Failed to download generated video, Uri or videoBytes not found.',\n      );\n    }\n  } else if (isVideo(params.file)) {\n    const videoBytes = (params.file as Video).videoBytes;\n    if (typeof videoBytes === 'string') {\n      return videoBytes;\n    } else {\n      throw new Error('Failed to download video, Uri or videoBytes not found.');\n    }\n  } else {\n    throw new Error('Unsupported file type');\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as NodeWs from 'ws';\n\nimport {\n  WebSocket,\n  WebSocketCallbacks,\n  WebSocketFactory,\n} from '../_websocket.js';\n\nexport class NodeWebSocketFactory implements WebSocketFactory {\n  create(\n    url: string,\n    headers: Record<string, string>,\n    callbacks: WebSocketCallbacks,\n  ): WebSocket {\n    return new NodeWebSocket(url, headers, callbacks);\n  }\n}\n\nexport class NodeWebSocket implements WebSocket {\n  private ws?: NodeWs.WebSocket;\n\n  constructor(\n    private readonly url: string,\n    private readonly headers: Record<string, string>,\n    private readonly callbacks: WebSocketCallbacks,\n  ) {}\n\n  connect(): void {\n    this.ws = new NodeWs.WebSocket(this.url, {headers: this.headers});\n\n    this.ws.onopen = this.callbacks.onopen;\n    this.ws.onerror = this.callbacks.onerror;\n    this.ws.onclose = this.callbacks.onclose;\n    this.ws.onmessage = this.callbacks.onmessage;\n  }\n\n  send(message: string) {\n    if (this.ws === undefined) {\n      throw new Error('WebSocket is not connected');\n    }\n\n    this.ws.send(message);\n  }\n\n  close() {\n    if (this.ws === undefined) {\n      throw new Error('WebSocket is not connected');\n    }\n\n    this.ws.close();\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport * as common from '../_common.js';\nimport * as t from '../_transformers.js';\nimport type * as types from '../types.js';\n\nexport function cancelTuningJobParametersToMldev(\n  fromObject: types.CancelTuningJobParameters,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['_url', 'name'], fromName);\n  }\n\n  return toObject;\n}\n\nexport function cancelTuningJobParametersToVertex(\n  fromObject: types.CancelTuningJobParameters,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['_url', 'name'], fromName);\n  }\n\n  return toObject;\n}\n\nexport function createTuningJobConfigToMldev(\n  fromObject: types.CreateTuningJobConfig,\n  parentObject: Record<string, unknown>,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['validationDataset']) !== undefined) {\n    throw new Error(\n      'validationDataset parameter is not supported in Gemini API.',\n    );\n  }\n\n  const fromTunedModelDisplayName = common.getValueByPath(fromObject, [\n    'tunedModelDisplayName',\n  ]);\n  if (parentObject !== undefined && fromTunedModelDisplayName != null) {\n    common.setValueByPath(\n      parentObject,\n      ['displayName'],\n      fromTunedModelDisplayName,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['description']) !== undefined) {\n    throw new Error('description parameter is not supported in Gemini API.');\n  }\n\n  const fromEpochCount = common.getValueByPath(fromObject, ['epochCount']);\n  if (parentObject !== undefined && fromEpochCount != null) {\n    common.setValueByPath(\n      parentObject,\n      ['tuningTask', 'hyperparameters', 'epochCount'],\n      fromEpochCount,\n    );\n  }\n\n  const fromLearningRateMultiplier = common.getValueByPath(fromObject, [\n    'learningRateMultiplier',\n  ]);\n  if (fromLearningRateMultiplier != null) {\n    common.setValueByPath(\n      toObject,\n      ['tuningTask', 'hyperparameters', 'learningRateMultiplier'],\n      fromLearningRateMultiplier,\n    );\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['exportLastCheckpointOnly']) !==\n    undefined\n  ) {\n    throw new Error(\n      'exportLastCheckpointOnly parameter is not supported in Gemini API.',\n    );\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['preTunedModelCheckpointId']) !==\n    undefined\n  ) {\n    throw new Error(\n      'preTunedModelCheckpointId parameter is not supported in Gemini API.',\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['adapterSize']) !== undefined) {\n    throw new Error('adapterSize parameter is not supported in Gemini API.');\n  }\n\n  const fromBatchSize = common.getValueByPath(fromObject, ['batchSize']);\n  if (parentObject !== undefined && fromBatchSize != null) {\n    common.setValueByPath(\n      parentObject,\n      ['tuningTask', 'hyperparameters', 'batchSize'],\n      fromBatchSize,\n    );\n  }\n\n  const fromLearningRate = common.getValueByPath(fromObject, ['learningRate']);\n  if (parentObject !== undefined && fromLearningRate != null) {\n    common.setValueByPath(\n      parentObject,\n      ['tuningTask', 'hyperparameters', 'learningRate'],\n      fromLearningRate,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['labels']) !== undefined) {\n    throw new Error('labels parameter is not supported in Gemini API.');\n  }\n\n  return toObject;\n}\n\nexport function createTuningJobConfigToVertex(\n  fromObject: types.CreateTuningJobConfig,\n  parentObject: Record<string, unknown>,\n  rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromValidationDataset = common.getValueByPath(fromObject, [\n    'validationDataset',\n  ]);\n  if (parentObject !== undefined && fromValidationDataset != null) {\n    common.setValueByPath(\n      parentObject,\n      ['supervisedTuningSpec'],\n      tuningValidationDatasetToVertex(fromValidationDataset, rootObject),\n    );\n  }\n\n  const fromTunedModelDisplayName = common.getValueByPath(fromObject, [\n    'tunedModelDisplayName',\n  ]);\n  if (parentObject !== undefined && fromTunedModelDisplayName != null) {\n    common.setValueByPath(\n      parentObject,\n      ['tunedModelDisplayName'],\n      fromTunedModelDisplayName,\n    );\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (parentObject !== undefined && fromDescription != null) {\n    common.setValueByPath(parentObject, ['description'], fromDescription);\n  }\n\n  const fromEpochCount = common.getValueByPath(fromObject, ['epochCount']);\n  if (parentObject !== undefined && fromEpochCount != null) {\n    common.setValueByPath(\n      parentObject,\n      ['supervisedTuningSpec', 'hyperParameters', 'epochCount'],\n      fromEpochCount,\n    );\n  }\n\n  const fromLearningRateMultiplier = common.getValueByPath(fromObject, [\n    'learningRateMultiplier',\n  ]);\n  if (parentObject !== undefined && fromLearningRateMultiplier != null) {\n    common.setValueByPath(\n      parentObject,\n      ['supervisedTuningSpec', 'hyperParameters', 'learningRateMultiplier'],\n      fromLearningRateMultiplier,\n    );\n  }\n\n  const fromExportLastCheckpointOnly = common.getValueByPath(fromObject, [\n    'exportLastCheckpointOnly',\n  ]);\n  if (parentObject !== undefined && fromExportLastCheckpointOnly != null) {\n    common.setValueByPath(\n      parentObject,\n      ['supervisedTuningSpec', 'exportLastCheckpointOnly'],\n      fromExportLastCheckpointOnly,\n    );\n  }\n\n  const fromAdapterSize = common.getValueByPath(fromObject, ['adapterSize']);\n  if (parentObject !== undefined && fromAdapterSize != null) {\n    common.setValueByPath(\n      parentObject,\n      ['supervisedTuningSpec', 'hyperParameters', 'adapterSize'],\n      fromAdapterSize,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['batchSize']) !== undefined) {\n    throw new Error('batchSize parameter is not supported in Vertex AI.');\n  }\n\n  if (common.getValueByPath(fromObject, ['learningRate']) !== undefined) {\n    throw new Error('learningRate parameter is not supported in Vertex AI.');\n  }\n\n  const fromLabels = common.getValueByPath(fromObject, ['labels']);\n  if (parentObject !== undefined && fromLabels != null) {\n    common.setValueByPath(parentObject, ['labels'], fromLabels);\n  }\n\n  return toObject;\n}\n\nexport function createTuningJobParametersPrivateToMldev(\n  fromObject: types.CreateTuningJobParametersPrivate,\n  rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);\n  if (fromBaseModel != null) {\n    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);\n  }\n\n  const fromPreTunedModel = common.getValueByPath(fromObject, [\n    'preTunedModel',\n  ]);\n  if (fromPreTunedModel != null) {\n    common.setValueByPath(toObject, ['preTunedModel'], fromPreTunedModel);\n  }\n\n  const fromTrainingDataset = common.getValueByPath(fromObject, [\n    'trainingDataset',\n  ]);\n  if (fromTrainingDataset != null) {\n    common.setValueByPath(\n      toObject,\n      ['tuningTask', 'trainingData'],\n      tuningDatasetToMldev(fromTrainingDataset, rootObject),\n    );\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    createTuningJobConfigToMldev(fromConfig, toObject, rootObject);\n  }\n\n  return toObject;\n}\n\nexport function createTuningJobParametersPrivateToVertex(\n  fromObject: types.CreateTuningJobParametersPrivate,\n  rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);\n  if (fromBaseModel != null) {\n    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);\n  }\n\n  const fromPreTunedModel = common.getValueByPath(fromObject, [\n    'preTunedModel',\n  ]);\n  if (fromPreTunedModel != null) {\n    common.setValueByPath(toObject, ['preTunedModel'], fromPreTunedModel);\n  }\n\n  const fromTrainingDataset = common.getValueByPath(fromObject, [\n    'trainingDataset',\n  ]);\n  if (fromTrainingDataset != null) {\n    tuningDatasetToVertex(fromTrainingDataset, toObject, rootObject);\n  }\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    createTuningJobConfigToVertex(fromConfig, toObject, rootObject);\n  }\n\n  return toObject;\n}\n\nexport function getTuningJobParametersToMldev(\n  fromObject: types.GetTuningJobParameters,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['_url', 'name'], fromName);\n  }\n\n  return toObject;\n}\n\nexport function getTuningJobParametersToVertex(\n  fromObject: types.GetTuningJobParameters,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['_url', 'name'], fromName);\n  }\n\n  return toObject;\n}\n\nexport function listTuningJobsConfigToMldev(\n  fromObject: types.ListTuningJobsConfig,\n  parentObject: Record<string, unknown>,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  const fromFilter = common.getValueByPath(fromObject, ['filter']);\n  if (parentObject !== undefined && fromFilter != null) {\n    common.setValueByPath(parentObject, ['_query', 'filter'], fromFilter);\n  }\n\n  return toObject;\n}\n\nexport function listTuningJobsConfigToVertex(\n  fromObject: types.ListTuningJobsConfig,\n  parentObject: Record<string, unknown>,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);\n  if (parentObject !== undefined && fromPageSize != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);\n  }\n\n  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);\n  if (parentObject !== undefined && fromPageToken != null) {\n    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);\n  }\n\n  const fromFilter = common.getValueByPath(fromObject, ['filter']);\n  if (parentObject !== undefined && fromFilter != null) {\n    common.setValueByPath(parentObject, ['_query', 'filter'], fromFilter);\n  }\n\n  return toObject;\n}\n\nexport function listTuningJobsParametersToMldev(\n  fromObject: types.ListTuningJobsParameters,\n  rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    listTuningJobsConfigToMldev(fromConfig, toObject, rootObject);\n  }\n\n  return toObject;\n}\n\nexport function listTuningJobsParametersToVertex(\n  fromObject: types.ListTuningJobsParameters,\n  rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromConfig = common.getValueByPath(fromObject, ['config']);\n  if (fromConfig != null) {\n    listTuningJobsConfigToVertex(fromConfig, toObject, rootObject);\n  }\n\n  return toObject;\n}\n\nexport function listTuningJobsResponseFromMldev(\n  fromObject: types.ListTuningJobsResponse,\n  rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromNextPageToken = common.getValueByPath(fromObject, [\n    'nextPageToken',\n  ]);\n  if (fromNextPageToken != null) {\n    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n\n  const fromTuningJobs = common.getValueByPath(fromObject, ['tunedModels']);\n  if (fromTuningJobs != null) {\n    let transformedList = fromTuningJobs;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return tuningJobFromMldev(item, rootObject);\n      });\n    }\n    common.setValueByPath(toObject, ['tuningJobs'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function listTuningJobsResponseFromVertex(\n  fromObject: types.ListTuningJobsResponse,\n  rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromNextPageToken = common.getValueByPath(fromObject, [\n    'nextPageToken',\n  ]);\n  if (fromNextPageToken != null) {\n    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);\n  }\n\n  const fromTuningJobs = common.getValueByPath(fromObject, ['tuningJobs']);\n  if (fromTuningJobs != null) {\n    let transformedList = fromTuningJobs;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return tuningJobFromVertex(item, rootObject);\n      });\n    }\n    common.setValueByPath(toObject, ['tuningJobs'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function tunedModelFromMldev(\n  fromObject: types.TunedModel,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromModel = common.getValueByPath(fromObject, ['name']);\n  if (fromModel != null) {\n    common.setValueByPath(toObject, ['model'], fromModel);\n  }\n\n  const fromEndpoint = common.getValueByPath(fromObject, ['name']);\n  if (fromEndpoint != null) {\n    common.setValueByPath(toObject, ['endpoint'], fromEndpoint);\n  }\n\n  return toObject;\n}\n\nexport function tuningDatasetToMldev(\n  fromObject: types.TuningDataset,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  if (common.getValueByPath(fromObject, ['gcsUri']) !== undefined) {\n    throw new Error('gcsUri parameter is not supported in Gemini API.');\n  }\n\n  if (\n    common.getValueByPath(fromObject, ['vertexDatasetResource']) !== undefined\n  ) {\n    throw new Error(\n      'vertexDatasetResource parameter is not supported in Gemini API.',\n    );\n  }\n\n  const fromExamples = common.getValueByPath(fromObject, ['examples']);\n  if (fromExamples != null) {\n    let transformedList = fromExamples;\n    if (Array.isArray(transformedList)) {\n      transformedList = transformedList.map((item) => {\n        return item;\n      });\n    }\n    common.setValueByPath(toObject, ['examples', 'examples'], transformedList);\n  }\n\n  return toObject;\n}\n\nexport function tuningDatasetToVertex(\n  fromObject: types.TuningDataset,\n  parentObject: Record<string, unknown>,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);\n  if (parentObject !== undefined && fromGcsUri != null) {\n    common.setValueByPath(\n      parentObject,\n      ['supervisedTuningSpec', 'trainingDatasetUri'],\n      fromGcsUri,\n    );\n  }\n\n  const fromVertexDatasetResource = common.getValueByPath(fromObject, [\n    'vertexDatasetResource',\n  ]);\n  if (parentObject !== undefined && fromVertexDatasetResource != null) {\n    common.setValueByPath(\n      parentObject,\n      ['supervisedTuningSpec', 'trainingDatasetUri'],\n      fromVertexDatasetResource,\n    );\n  }\n\n  if (common.getValueByPath(fromObject, ['examples']) !== undefined) {\n    throw new Error('examples parameter is not supported in Vertex AI.');\n  }\n\n  return toObject;\n}\n\nexport function tuningJobFromMldev(\n  fromObject: types.TuningJob,\n  rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromState = common.getValueByPath(fromObject, ['state']);\n  if (fromState != null) {\n    common.setValueByPath(toObject, ['state'], t.tTuningJobStatus(fromState));\n  }\n\n  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    common.setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n\n  const fromStartTime = common.getValueByPath(fromObject, [\n    'tuningTask',\n    'startTime',\n  ]);\n  if (fromStartTime != null) {\n    common.setValueByPath(toObject, ['startTime'], fromStartTime);\n  }\n\n  const fromEndTime = common.getValueByPath(fromObject, [\n    'tuningTask',\n    'completeTime',\n  ]);\n  if (fromEndTime != null) {\n    common.setValueByPath(toObject, ['endTime'], fromEndTime);\n  }\n\n  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);\n  if (fromBaseModel != null) {\n    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);\n  }\n\n  const fromTunedModel = common.getValueByPath(fromObject, ['_self']);\n  if (fromTunedModel != null) {\n    common.setValueByPath(\n      toObject,\n      ['tunedModel'],\n      tunedModelFromMldev(fromTunedModel, rootObject),\n    );\n  }\n\n  return toObject;\n}\n\nexport function tuningJobFromVertex(\n  fromObject: types.TuningJob,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromState = common.getValueByPath(fromObject, ['state']);\n  if (fromState != null) {\n    common.setValueByPath(toObject, ['state'], t.tTuningJobStatus(fromState));\n  }\n\n  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);\n  if (fromCreateTime != null) {\n    common.setValueByPath(toObject, ['createTime'], fromCreateTime);\n  }\n\n  const fromStartTime = common.getValueByPath(fromObject, ['startTime']);\n  if (fromStartTime != null) {\n    common.setValueByPath(toObject, ['startTime'], fromStartTime);\n  }\n\n  const fromEndTime = common.getValueByPath(fromObject, ['endTime']);\n  if (fromEndTime != null) {\n    common.setValueByPath(toObject, ['endTime'], fromEndTime);\n  }\n\n  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);\n  if (fromUpdateTime != null) {\n    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);\n  }\n\n  const fromError = common.getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    common.setValueByPath(toObject, ['error'], fromError);\n  }\n\n  const fromDescription = common.getValueByPath(fromObject, ['description']);\n  if (fromDescription != null) {\n    common.setValueByPath(toObject, ['description'], fromDescription);\n  }\n\n  const fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);\n  if (fromBaseModel != null) {\n    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);\n  }\n\n  const fromTunedModel = common.getValueByPath(fromObject, ['tunedModel']);\n  if (fromTunedModel != null) {\n    common.setValueByPath(toObject, ['tunedModel'], fromTunedModel);\n  }\n\n  const fromPreTunedModel = common.getValueByPath(fromObject, [\n    'preTunedModel',\n  ]);\n  if (fromPreTunedModel != null) {\n    common.setValueByPath(toObject, ['preTunedModel'], fromPreTunedModel);\n  }\n\n  const fromSupervisedTuningSpec = common.getValueByPath(fromObject, [\n    'supervisedTuningSpec',\n  ]);\n  if (fromSupervisedTuningSpec != null) {\n    common.setValueByPath(\n      toObject,\n      ['supervisedTuningSpec'],\n      fromSupervisedTuningSpec,\n    );\n  }\n\n  const fromTuningDataStats = common.getValueByPath(fromObject, [\n    'tuningDataStats',\n  ]);\n  if (fromTuningDataStats != null) {\n    common.setValueByPath(toObject, ['tuningDataStats'], fromTuningDataStats);\n  }\n\n  const fromEncryptionSpec = common.getValueByPath(fromObject, [\n    'encryptionSpec',\n  ]);\n  if (fromEncryptionSpec != null) {\n    common.setValueByPath(toObject, ['encryptionSpec'], fromEncryptionSpec);\n  }\n\n  const fromPartnerModelTuningSpec = common.getValueByPath(fromObject, [\n    'partnerModelTuningSpec',\n  ]);\n  if (fromPartnerModelTuningSpec != null) {\n    common.setValueByPath(\n      toObject,\n      ['partnerModelTuningSpec'],\n      fromPartnerModelTuningSpec,\n    );\n  }\n\n  const fromCustomBaseModel = common.getValueByPath(fromObject, [\n    'customBaseModel',\n  ]);\n  if (fromCustomBaseModel != null) {\n    common.setValueByPath(toObject, ['customBaseModel'], fromCustomBaseModel);\n  }\n\n  const fromExperiment = common.getValueByPath(fromObject, ['experiment']);\n  if (fromExperiment != null) {\n    common.setValueByPath(toObject, ['experiment'], fromExperiment);\n  }\n\n  const fromLabels = common.getValueByPath(fromObject, ['labels']);\n  if (fromLabels != null) {\n    common.setValueByPath(toObject, ['labels'], fromLabels);\n  }\n\n  const fromOutputUri = common.getValueByPath(fromObject, ['outputUri']);\n  if (fromOutputUri != null) {\n    common.setValueByPath(toObject, ['outputUri'], fromOutputUri);\n  }\n\n  const fromPipelineJob = common.getValueByPath(fromObject, ['pipelineJob']);\n  if (fromPipelineJob != null) {\n    common.setValueByPath(toObject, ['pipelineJob'], fromPipelineJob);\n  }\n\n  const fromServiceAccount = common.getValueByPath(fromObject, [\n    'serviceAccount',\n  ]);\n  if (fromServiceAccount != null) {\n    common.setValueByPath(toObject, ['serviceAccount'], fromServiceAccount);\n  }\n\n  const fromTunedModelDisplayName = common.getValueByPath(fromObject, [\n    'tunedModelDisplayName',\n  ]);\n  if (fromTunedModelDisplayName != null) {\n    common.setValueByPath(\n      toObject,\n      ['tunedModelDisplayName'],\n      fromTunedModelDisplayName,\n    );\n  }\n\n  const fromVeoTuningSpec = common.getValueByPath(fromObject, [\n    'veoTuningSpec',\n  ]);\n  if (fromVeoTuningSpec != null) {\n    common.setValueByPath(toObject, ['veoTuningSpec'], fromVeoTuningSpec);\n  }\n\n  return toObject;\n}\n\nexport function tuningOperationFromMldev(\n  fromObject: types.TuningOperation,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromSdkHttpResponse = common.getValueByPath(fromObject, [\n    'sdkHttpResponse',\n  ]);\n  if (fromSdkHttpResponse != null) {\n    common.setValueByPath(toObject, ['sdkHttpResponse'], fromSdkHttpResponse);\n  }\n\n  const fromName = common.getValueByPath(fromObject, ['name']);\n  if (fromName != null) {\n    common.setValueByPath(toObject, ['name'], fromName);\n  }\n\n  const fromMetadata = common.getValueByPath(fromObject, ['metadata']);\n  if (fromMetadata != null) {\n    common.setValueByPath(toObject, ['metadata'], fromMetadata);\n  }\n\n  const fromDone = common.getValueByPath(fromObject, ['done']);\n  if (fromDone != null) {\n    common.setValueByPath(toObject, ['done'], fromDone);\n  }\n\n  const fromError = common.getValueByPath(fromObject, ['error']);\n  if (fromError != null) {\n    common.setValueByPath(toObject, ['error'], fromError);\n  }\n\n  return toObject;\n}\n\nexport function tuningValidationDatasetToVertex(\n  fromObject: types.TuningValidationDataset,\n  _rootObject?: unknown,\n): Record<string, unknown> {\n  const toObject: Record<string, unknown> = {};\n\n  const fromGcsUri = common.getValueByPath(fromObject, ['gcsUri']);\n  if (fromGcsUri != null) {\n    common.setValueByPath(toObject, ['validationDatasetUri'], fromGcsUri);\n  }\n\n  const fromVertexDatasetResource = common.getValueByPath(fromObject, [\n    'vertexDatasetResource',\n  ]);\n  if (fromVertexDatasetResource != null) {\n    common.setValueByPath(\n      toObject,\n      ['validationDatasetUri'],\n      fromVertexDatasetResource,\n    );\n  }\n\n  return toObject;\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Code generated by the Google Gen AI SDK generator DO NOT EDIT.\n\nimport {ApiClient} from './_api_client.js';\nimport * as common from './_common.js';\nimport {BaseModule} from './_common.js';\nimport * as converters from './converters/_tunings_converters.js';\nimport {PagedItem, Pager} from './pagers.js';\nimport * as types from './types.js';\n\nexport class Tunings extends BaseModule {\n  constructor(private readonly apiClient: ApiClient) {\n    super();\n  }\n\n  /**\n   * Gets a TuningJob.\n   *\n   * @param name - The resource name of the tuning job.\n   * @return - A TuningJob object.\n   *\n   * @experimental - The SDK's tuning implementation is experimental, and may\n   * change in future versions.\n   */\n  get = async (\n    params: types.GetTuningJobParameters,\n  ): Promise<types.TuningJob> => {\n    return await this.getInternal(params);\n  };\n\n  /**\n   * Lists tuning jobs.\n   *\n   * @param config - The configuration for the list request.\n   * @return - A list of tuning jobs.\n   *\n   * @experimental - The SDK's tuning implementation is experimental, and may\n   * change in future versions.\n   */\n  list = async (\n    params: types.ListTuningJobsParameters = {},\n  ): Promise<Pager<types.TuningJob>> => {\n    return new Pager<types.TuningJob>(\n      PagedItem.PAGED_ITEM_TUNING_JOBS,\n      (x: types.ListTuningJobsParameters) => this.listInternal(x),\n      await this.listInternal(params),\n      params,\n    );\n  };\n\n  /**\n   * Creates a supervised fine-tuning job.\n   *\n   * @param params - The parameters for the tuning job.\n   * @return - A TuningJob operation.\n   *\n   * @experimental - The SDK's tuning implementation is experimental, and may\n   * change in future versions.\n   */\n  tune = async (\n    params: types.CreateTuningJobParameters,\n  ): Promise<types.TuningJob> => {\n    if (this.apiClient.isVertexAI()) {\n      if (params.baseModel.startsWith('projects/')) {\n        const preTunedModel: types.PreTunedModel = {\n          tunedModelName: params.baseModel,\n        };\n        if (params.config?.preTunedModelCheckpointId) {\n          preTunedModel.checkpointId = params.config.preTunedModelCheckpointId;\n        }\n        const paramsPrivate: types.CreateTuningJobParametersPrivate = {\n          ...params,\n          preTunedModel: preTunedModel,\n        };\n        paramsPrivate.baseModel = undefined;\n        return await this.tuneInternal(paramsPrivate);\n      } else {\n        const paramsPrivate: types.CreateTuningJobParametersPrivate = {\n          ...params,\n        };\n        return await this.tuneInternal(paramsPrivate);\n      }\n    } else {\n      const paramsPrivate: types.CreateTuningJobParametersPrivate = {\n        ...params,\n      };\n      const operation = await this.tuneMldevInternal(paramsPrivate);\n      let tunedModelName = '';\n      if (\n        operation['metadata'] !== undefined &&\n        operation['metadata']['tunedModel'] !== undefined\n      ) {\n        tunedModelName = operation['metadata']['tunedModel'] as string;\n      } else if (\n        operation['name'] !== undefined &&\n        operation['name'].includes('/operations/')\n      ) {\n        tunedModelName = operation['name'].split('/operations/')[0];\n      }\n      const tuningJob: types.TuningJob = {\n        name: tunedModelName,\n        state: types.JobState.JOB_STATE_QUEUED,\n      };\n\n      return tuningJob;\n    }\n  };\n\n  private async getInternal(\n    params: types.GetTuningJobParameters,\n  ): Promise<types.TuningJob> {\n    let response: Promise<types.TuningJob>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.getTuningJobParametersToVertex(params, params);\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.TuningJob;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.TuningJob>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.tuningJobFromVertex(apiResponse);\n\n        return resp as types.TuningJob;\n      });\n    } else {\n      const body = converters.getTuningJobParametersToMldev(params, params);\n      path = common.formatMap(\n        '{name}',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.TuningJob;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.TuningJob>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.tuningJobFromMldev(apiResponse);\n\n        return resp as types.TuningJob;\n      });\n    }\n  }\n\n  private async listInternal(\n    params: types.ListTuningJobsParameters,\n  ): Promise<types.ListTuningJobsResponse> {\n    let response: Promise<types.ListTuningJobsResponse>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.listTuningJobsParametersToVertex(params, params);\n      path = common.formatMap(\n        'tuningJobs',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.ListTuningJobsResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.ListTuningJobsResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.listTuningJobsResponseFromVertex(apiResponse);\n        const typedResp = new types.ListTuningJobsResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    } else {\n      const body = converters.listTuningJobsParametersToMldev(params, params);\n      path = common.formatMap(\n        'tunedModels',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'GET',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.ListTuningJobsResponse;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.ListTuningJobsResponse>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.listTuningJobsResponseFromMldev(apiResponse);\n        const typedResp = new types.ListTuningJobsResponse();\n        Object.assign(typedResp, resp);\n        return typedResp;\n      });\n    }\n  }\n\n  /**\n   * Cancels a tuning job.\n   *\n   * @param params - The parameters for the cancel request.\n   * @return The empty response returned by the API.\n   *\n   * @example\n   * ```ts\n   * await ai.tunings.cancel({name: '...'}); // The server-generated resource name.\n   * ```\n   */\n  async cancel(params: types.CancelTuningJobParameters): Promise<void> {\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.cancelTuningJobParametersToVertex(params, params);\n      path = common.formatMap(\n        '{name}:cancel',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      await this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: params.config?.httpOptions,\n        abortSignal: params.config?.abortSignal,\n      });\n    } else {\n      const body = converters.cancelTuningJobParametersToMldev(params, params);\n      path = common.formatMap(\n        '{name}:cancel',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      await this.apiClient.request({\n        path: path,\n        queryParams: queryParams,\n        body: JSON.stringify(body),\n        httpMethod: 'POST',\n        httpOptions: params.config?.httpOptions,\n        abortSignal: params.config?.abortSignal,\n      });\n    }\n  }\n\n  private async tuneInternal(\n    params: types.CreateTuningJobParametersPrivate,\n  ): Promise<types.TuningJob> {\n    let response: Promise<types.TuningJob>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      const body = converters.createTuningJobParametersPrivateToVertex(\n        params,\n        params,\n      );\n      path = common.formatMap(\n        'tuningJobs',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.TuningJob;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.TuningJob>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.tuningJobFromVertex(apiResponse);\n\n        return resp as types.TuningJob;\n      });\n    } else {\n      throw new Error('This method is only supported by the Vertex AI.');\n    }\n  }\n\n  private async tuneMldevInternal(\n    params: types.CreateTuningJobParametersPrivate,\n  ): Promise<types.TuningOperation> {\n    let response: Promise<types.TuningOperation>;\n\n    let path: string = '';\n    let queryParams: Record<string, string> = {};\n    if (this.apiClient.isVertexAI()) {\n      throw new Error(\n        'This method is only supported by the Gemini Developer API.',\n      );\n    } else {\n      const body = converters.createTuningJobParametersPrivateToMldev(\n        params,\n        params,\n      );\n      path = common.formatMap(\n        'tunedModels',\n        body['_url'] as Record<string, unknown>,\n      );\n      queryParams = body['_query'] as Record<string, string>;\n      delete body['_url'];\n      delete body['_query'];\n\n      response = this.apiClient\n        .request({\n          path: path,\n          queryParams: queryParams,\n          body: JSON.stringify(body),\n          httpMethod: 'POST',\n          httpOptions: params.config?.httpOptions,\n          abortSignal: params.config?.abortSignal,\n        })\n        .then((httpResponse) => {\n          return httpResponse.json().then((jsonResponse) => {\n            const response = jsonResponse as types.TuningOperation;\n            response.sdkHttpResponse = {\n              headers: httpResponse.headers,\n            } as types.HttpResponse;\n            return response;\n          });\n        }) as Promise<types.TuningOperation>;\n\n      return response.then((apiResponse) => {\n        const resp = converters.tuningOperationFromMldev(apiResponse);\n\n        return resp as types.TuningOperation;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {ApiClient} from '../_api_client.js';\nimport {FileStat, Uploader} from '../_uploader.js';\nimport {File, HttpResponse} from '../types.js';\n\nimport {crossError} from './_cross_error.js';\n\nexport const MAX_CHUNK_SIZE = 1024 * 1024 * 8; // bytes\nexport const MAX_RETRY_COUNT = 3;\nexport const INITIAL_RETRY_DELAY_MS = 1000;\nexport const DELAY_MULTIPLIER = 2;\nexport const X_GOOG_UPLOAD_STATUS_HEADER_FIELD = 'x-goog-upload-status';\n\nexport class CrossUploader implements Uploader {\n  async upload(\n    file: string | Blob,\n    uploadUrl: string,\n    apiClient: ApiClient,\n  ): Promise<File> {\n    if (typeof file === 'string') {\n      throw crossError();\n    } else {\n      return uploadBlob(file, uploadUrl, apiClient);\n    }\n  }\n\n  async stat(file: string | Blob): Promise<FileStat> {\n    if (typeof file === 'string') {\n      throw crossError();\n    } else {\n      return getBlobStat(file);\n    }\n  }\n}\n\nexport async function uploadBlob(\n  file: Blob,\n  uploadUrl: string,\n  apiClient: ApiClient,\n): Promise<File> {\n  let fileSize = 0;\n  let offset = 0;\n  let response: HttpResponse = new HttpResponse(new Response());\n  let uploadCommand = 'upload';\n  fileSize = file.size;\n  while (offset < fileSize) {\n    const chunkSize = Math.min(MAX_CHUNK_SIZE, fileSize - offset);\n    const chunk = file.slice(offset, offset + chunkSize);\n    if (offset + chunkSize >= fileSize) {\n      uploadCommand += ', finalize';\n    }\n    let retryCount = 0;\n    let currentDelayMs = INITIAL_RETRY_DELAY_MS;\n    while (retryCount < MAX_RETRY_COUNT) {\n      response = await apiClient.request({\n        path: '',\n        body: chunk,\n        httpMethod: 'POST',\n        httpOptions: {\n          apiVersion: '',\n          baseUrl: uploadUrl,\n          headers: {\n            'X-Goog-Upload-Command': uploadCommand,\n            'X-Goog-Upload-Offset': String(offset),\n            'Content-Length': String(chunkSize),\n          },\n        },\n      });\n      if (response?.headers?.[X_GOOG_UPLOAD_STATUS_HEADER_FIELD]) {\n        break;\n      }\n      retryCount++;\n      await sleep(currentDelayMs);\n      currentDelayMs = currentDelayMs * DELAY_MULTIPLIER;\n    }\n    offset += chunkSize;\n    // The `x-goog-upload-status` header field can be `active`, `final` and\n    //`cancelled` in resposne.\n    if (response?.headers?.[X_GOOG_UPLOAD_STATUS_HEADER_FIELD] !== 'active') {\n      break;\n    }\n    // TODO(b/401391430) Investigate why the upload status is not finalized\n    // even though all content has been uploaded.\n    if (fileSize <= offset) {\n      throw new Error(\n        'All content has been uploaded, but the upload status is not finalized.',\n      );\n    }\n  }\n  const responseJson = (await response?.json()) as Record<\n    string,\n    File | unknown\n  >;\n  if (response?.headers?.[X_GOOG_UPLOAD_STATUS_HEADER_FIELD] !== 'final') {\n    throw new Error('Failed to upload file: Upload status is not finalized.');\n  }\n  return responseJson['file'] as File;\n}\n\nexport async function getBlobStat(file: Blob): Promise<FileStat> {\n  const fileStat: FileStat = {size: file.size, type: file.type};\n  return fileStat;\n}\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolvePromise) => setTimeout(resolvePromise, ms));\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as fs from 'fs/promises';\n\nimport {ApiClient} from '../_api_client.js';\nimport {FileStat, Uploader} from '../_uploader.js';\nimport {\n  DELAY_MULTIPLIER,\n  INITIAL_RETRY_DELAY_MS,\n  MAX_CHUNK_SIZE,\n  MAX_RETRY_COUNT,\n  X_GOOG_UPLOAD_STATUS_HEADER_FIELD,\n  getBlobStat,\n  sleep,\n  uploadBlob,\n} from '../cross/_cross_uploader.js';\nimport {File, HttpResponse} from '../types.js';\n\nexport class NodeUploader implements Uploader {\n  async stat(file: string | Blob): Promise<FileStat> {\n    const fileStat: FileStat = {size: 0, type: undefined};\n    if (typeof file === 'string') {\n      const originalStat = await fs.stat(file);\n      fileStat.size = originalStat.size;\n      fileStat.type = this.inferMimeType(file);\n      return fileStat;\n    } else {\n      return await getBlobStat(file);\n    }\n  }\n\n  async upload(\n    file: string | Blob,\n    uploadUrl: string,\n    apiClient: ApiClient,\n  ): Promise<File> {\n    if (typeof file === 'string') {\n      return await this.uploadFileFromPath(file, uploadUrl, apiClient);\n    } else {\n      return uploadBlob(file, uploadUrl, apiClient);\n    }\n  }\n\n  /**\n   * Infers the MIME type of a file based on its extension.\n   *\n   * @param filePath The path to the file.\n   * @returns The MIME type of the file, or undefined if it cannot be inferred.\n   */\n  private inferMimeType(filePath: string): string | undefined {\n    // Get the file extension.\n    const fileExtension = filePath.slice(filePath.lastIndexOf('.') + 1);\n\n    // Create a map of file extensions to MIME types.\n    const mimeTypes: {[key: string]: string} = {\n      'aac': 'audio/aac',\n      'abw': 'application/x-abiword',\n      'arc': 'application/x-freearc',\n      'avi': 'video/x-msvideo',\n      'azw': 'application/vnd.amazon.ebook',\n      'bin': 'application/octet-stream',\n      'bmp': 'image/bmp',\n      'bz': 'application/x-bzip',\n      'bz2': 'application/x-bzip2',\n      'csh': 'application/x-csh',\n      'css': 'text/css',\n      'csv': 'text/csv',\n      'doc': 'application/msword',\n      'docx':\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'eot': 'application/vnd.ms-fontobject',\n      'epub': 'application/epub+zip',\n      'gz': 'application/gzip',\n      'gif': 'image/gif',\n      'htm': 'text/html',\n      'html': 'text/html',\n      'ico': 'image/vnd.microsoft.icon',\n      'ics': 'text/calendar',\n      'jar': 'application/java-archive',\n      'jpeg': 'image/jpeg',\n      'jpg': 'image/jpeg',\n      'js': 'text/javascript',\n      'json': 'application/json',\n      'jsonld': 'application/ld+json',\n      'kml': 'application/vnd.google-earth.kml+xml',\n      'kmz': 'application/vnd.google-earth.kmz+xml',\n      'mjs': 'text/javascript',\n      'mp3': 'audio/mpeg',\n      'mp4': 'video/mp4',\n      'mpeg': 'video/mpeg',\n      'mpkg': 'application/vnd.apple.installer+xml',\n      'odt': 'application/vnd.oasis.opendocument.text',\n      'oga': 'audio/ogg',\n      'ogv': 'video/ogg',\n      'ogx': 'application/ogg',\n      'opus': 'audio/opus',\n      'otf': 'font/otf',\n      'png': 'image/png',\n      'pdf': 'application/pdf',\n      'php': 'application/x-httpd-php',\n      'ppt': 'application/vnd.ms-powerpoint',\n      'pptx':\n        'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      'rar': 'application/vnd.rar',\n      'rtf': 'application/rtf',\n      'sh': 'application/x-sh',\n      'svg': 'image/svg+xml',\n      'swf': 'application/x-shockwave-flash',\n      'tar': 'application/x-tar',\n      'tif': 'image/tiff',\n      'tiff': 'image/tiff',\n      'ts': 'video/mp2t',\n      'ttf': 'font/ttf',\n      'txt': 'text/plain',\n      'vsd': 'application/vnd.visio',\n      'wav': 'audio/wav',\n      'weba': 'audio/webm',\n      'webm': 'video/webm',\n      'webp': 'image/webp',\n      'woff': 'font/woff',\n      'woff2': 'font/woff2',\n      'xhtml': 'application/xhtml+xml',\n      'xls': 'application/vnd.ms-excel',\n      'xlsx':\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'xml': 'application/xml',\n      'xul': 'application/vnd.mozilla.xul+xml',\n      'zip': 'application/zip',\n      '3gp': 'video/3gpp',\n      '3g2': 'video/3gpp2',\n      '7z': 'application/x-7z-compressed',\n    };\n\n    // Look up the MIME type based on the file extension.\n    const mimeType = mimeTypes[fileExtension.toLowerCase()];\n\n    // Return the MIME type.\n    return mimeType;\n  }\n\n  private async uploadFileFromPath(\n    file: string,\n    uploadUrl: string,\n    apiClient: ApiClient,\n  ): Promise<File> {\n    let fileSize = 0;\n    let offset = 0;\n    let response: HttpResponse = new HttpResponse(new Response());\n    let uploadCommand = 'upload';\n    let fileHandle: fs.FileHandle | undefined;\n    try {\n      fileHandle = await fs.open(file, 'r');\n      if (!fileHandle) {\n        throw new Error(`Failed to open file`);\n      }\n      fileSize = (await fileHandle.stat()).size;\n      while (offset < fileSize) {\n        const chunkSize = Math.min(MAX_CHUNK_SIZE, fileSize - offset);\n        if (offset + chunkSize >= fileSize) {\n          uploadCommand += ', finalize';\n        }\n        const buffer = new Uint8Array(chunkSize);\n        const {bytesRead: bytesRead} = await fileHandle.read(\n          buffer,\n          0,\n          chunkSize,\n          offset,\n        );\n\n        if (bytesRead !== chunkSize) {\n          throw new Error(\n            `Failed to read ${chunkSize} bytes from file at offset ${\n              offset\n            }. bytes actually read: ${bytesRead}`,\n          );\n        }\n\n        const chunk = new Blob([buffer]);\n        let retryCount = 0;\n        let currentDelayMs = INITIAL_RETRY_DELAY_MS;\n        while (retryCount < MAX_RETRY_COUNT) {\n          response = await apiClient.request({\n            path: '',\n            body: chunk,\n            httpMethod: 'POST',\n            httpOptions: {\n              apiVersion: '',\n              baseUrl: uploadUrl,\n              headers: {\n                'X-Goog-Upload-Command': uploadCommand,\n                'X-Goog-Upload-Offset': String(offset),\n                'Content-Length': String(bytesRead),\n              },\n            },\n          });\n          if (response?.headers?.[X_GOOG_UPLOAD_STATUS_HEADER_FIELD]) {\n            break;\n          }\n          retryCount++;\n          await sleep(currentDelayMs);\n          currentDelayMs = currentDelayMs * DELAY_MULTIPLIER;\n        }\n        offset += bytesRead;\n        // The `x-goog-upload-status` header field can be `active`, `final` and\n        //`cancelled` in resposne.\n        if (\n          response?.headers?.[X_GOOG_UPLOAD_STATUS_HEADER_FIELD] !== 'active'\n        ) {\n          break;\n        }\n        if (fileSize <= offset) {\n          throw new Error(\n            'All content has been uploaded, but the upload status is not finalized.',\n          );\n        }\n      }\n      const responseJson = (await response?.json()) as Record<\n        string,\n        File | unknown\n      >;\n      if (response?.headers?.[X_GOOG_UPLOAD_STATUS_HEADER_FIELD] !== 'final') {\n        throw new Error(\n          'Failed to upload file: Upload status is not finalized.',\n        );\n      }\n      return responseJson['file'] as File;\n    } finally {\n      // Ensure the file handle is always closed\n      if (fileHandle) {\n        await fileHandle.close();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {GoogleAuthOptions} from 'google-auth-library';\n\nimport {ApiClient} from '../_api_client.js';\nimport {getBaseUrl} from '../_base_url.js';\nimport {Batches} from '../batches.js';\nimport {Caches} from '../caches.js';\nimport {Chats} from '../chats.js';\nimport {GoogleGenAIOptions} from '../client.js';\nimport {Files} from '../files.js';\nimport {Live} from '../live.js';\nimport {Models} from '../models.js';\nimport {NodeAuth} from '../node/_node_auth.js';\nimport {NodeDownloader} from '../node/_node_downloader.js';\nimport {NodeWebSocketFactory} from '../node/_node_websocket.js';\nimport {Operations} from '../operations.js';\nimport {Tokens} from '../tokens.js';\nimport {Tunings} from '../tunings.js';\n\nimport {NodeUploader} from './_node_uploader.js';\n\nconst LANGUAGE_LABEL_PREFIX = 'gl-node/';\n\n/**\n * The Google GenAI SDK.\n *\n * @remarks\n * Provides access to the GenAI features through either the {@link\n * https://cloud.google.com/vertex-ai/docs/reference/rest | Gemini API} or\n * the {@link https://cloud.google.com/vertex-ai/docs/reference/rest | Vertex AI\n * API}.\n *\n * The {@link GoogleGenAIOptions.vertexai} value determines which of the API\n * services to use.\n *\n * When using the Gemini API, a {@link GoogleGenAIOptions.apiKey} must also be\n * set. When using Vertex AI, both {@link GoogleGenAIOptions.project} and {@link\n * GoogleGenAIOptions.location} must be set, or a {@link\n * GoogleGenAIOptions.apiKey} must be set when using Express Mode.\n *\n * Explicitly passed in values in {@link GoogleGenAIOptions} will always take\n * precedence over environment variables. If both project/location and api_key\n * exist in the environment variables, the project/location will be used.\n *\n * @example\n * Initializing the SDK for using the Gemini API:\n * ```ts\n * import {GoogleGenAI} from '@google/genai';\n * const ai = new GoogleGenAI({apiKey: 'GEMINI_API_KEY'});\n * ```\n *\n * @example\n * Initializing the SDK for using the Vertex AI API:\n * ```ts\n * import {GoogleGenAI} from '@google/genai';\n * const ai = new GoogleGenAI({\n *   vertexai: true,\n *   project: 'PROJECT_ID',\n *   location: 'PROJECT_LOCATION'\n * });\n * ```\n *\n */\nexport class GoogleGenAI {\n  protected readonly apiClient: ApiClient;\n  private readonly apiKey?: string;\n  public readonly vertexai: boolean;\n  private readonly googleAuthOptions?: GoogleAuthOptions;\n  private readonly project?: string;\n  private readonly location?: string;\n  private readonly apiVersion?: string;\n  readonly models: Models;\n  readonly live: Live;\n  readonly batches: Batches;\n  readonly chats: Chats;\n  readonly caches: Caches;\n  readonly files: Files;\n  readonly operations: Operations;\n  readonly authTokens: Tokens;\n  readonly tunings: Tunings;\n\n  constructor(options: GoogleGenAIOptions) {\n    // Validate explicitly set initializer values.\n    if ((options.project || options.location) && options.apiKey) {\n      throw new Error(\n        'Project/location and API key are mutually exclusive in the client initializer.',\n      );\n    }\n\n    this.vertexai =\n      options.vertexai ?? getBooleanEnv('GOOGLE_GENAI_USE_VERTEXAI') ?? false;\n    const envApiKey = getApiKeyFromEnv();\n    const envProject = getEnv('GOOGLE_CLOUD_PROJECT');\n    const envLocation = getEnv('GOOGLE_CLOUD_LOCATION');\n\n    this.apiKey = options.apiKey ?? envApiKey;\n    this.project = options.project ?? envProject;\n    this.location = options.location ?? envLocation;\n\n    // Handle when to use Vertex AI in express mode (api key)\n    if (options.vertexai) {\n      if (options.googleAuthOptions?.credentials) {\n        // Explicit credentials take precedence over implicit api_key.\n        console.debug(\n          'The user provided Google Cloud credentials will take precedence' +\n            ' over the API key from the environment variable.',\n        );\n        this.apiKey = undefined;\n      }\n      // Explicit api_key and explicit project/location already handled above.\n      if ((envProject || envLocation) && options.apiKey) {\n        // Explicit api_key takes precedence over implicit project/location.\n        console.debug(\n          'The user provided Vertex AI API key will take precedence over' +\n            ' the project/location from the environment variables.',\n        );\n        this.project = undefined;\n        this.location = undefined;\n      } else if ((options.project || options.location) && envApiKey) {\n        // Explicit project/location takes precedence over implicit api_key.\n        console.debug(\n          'The user provided project/location will take precedence over' +\n            ' the API key from the environment variables.',\n        );\n        this.apiKey = undefined;\n      } else if ((envProject || envLocation) && envApiKey) {\n        // Implicit project/location takes precedence over implicit api_key.\n        console.debug(\n          'The project/location from the environment variables will take' +\n            ' precedence over the API key from the environment variables.',\n        );\n        this.apiKey = undefined;\n      }\n    }\n\n    const baseUrl = getBaseUrl(\n      options.httpOptions,\n      options.vertexai,\n      getEnv('GOOGLE_VERTEX_BASE_URL'),\n      getEnv('GOOGLE_GEMINI_BASE_URL'),\n    );\n    if (baseUrl) {\n      if (options.httpOptions) {\n        options.httpOptions.baseUrl = baseUrl;\n      } else {\n        options.httpOptions = {baseUrl: baseUrl};\n      }\n    }\n\n    this.apiVersion = options.apiVersion;\n    const auth = new NodeAuth({\n      apiKey: this.apiKey,\n      googleAuthOptions: options.googleAuthOptions,\n    });\n    this.apiClient = new ApiClient({\n      auth: auth,\n      project: this.project,\n      location: this.location,\n      apiVersion: this.apiVersion,\n      apiKey: this.apiKey,\n      vertexai: this.vertexai,\n      httpOptions: options.httpOptions,\n      userAgentExtra: LANGUAGE_LABEL_PREFIX + process.version,\n      uploader: new NodeUploader(),\n      downloader: new NodeDownloader(),\n    });\n    this.models = new Models(this.apiClient);\n    this.live = new Live(this.apiClient, auth, new NodeWebSocketFactory());\n    this.batches = new Batches(this.apiClient);\n    this.chats = new Chats(this.models, this.apiClient);\n    this.caches = new Caches(this.apiClient);\n    this.files = new Files(this.apiClient);\n    this.operations = new Operations(this.apiClient);\n    this.authTokens = new Tokens(this.apiClient);\n    this.tunings = new Tunings(this.apiClient);\n  }\n}\n\nfunction getEnv(env: string): string | undefined {\n  return process?.env?.[env]?.trim() ?? undefined;\n}\n\nfunction getBooleanEnv(env: string): boolean {\n  return stringToBoolean(getEnv(env));\n}\n\nfunction stringToBoolean(str?: string): boolean {\n  if (str === undefined) {\n    return false;\n  }\n  return str.toLowerCase() === 'true';\n}\n\nfunction getApiKeyFromEnv(): string | undefined {\n  const envGoogleApiKey = getEnv('GOOGLE_API_KEY');\n  const envGeminiApiKey = getEnv('GEMINI_API_KEY');\n  if (envGoogleApiKey && envGeminiApiKey) {\n    console.warn(\n      'Both GOOGLE_API_KEY and GEMINI_API_KEY are set. Using GOOGLE_API_KEY.',\n    );\n  }\n  return envGoogleApiKey || envGeminiApiKey || undefined;\n}\n"],"names":["tBytes","common.getValueByPath","common.setValueByPath","generateVideosOperationFromMldev","generateVideosResponseFromMldev","generateVideosOperationFromVertex","generateVideosResponseFromVertex","generatedVideoFromMldev","generatedVideoFromVertex","videoFromMldev","videoFromVertex","t.tBytes","types.Type","baseTransformers.tBytes","t.tJobState","t.tRecvBatchJobDestination","blobToMldev","t.tBatchJobName","candidateFromMldev","citationMetadataFromMldev","contentToMldev","partToMldev","t.tBatchJobDestination","t.tModel","t.tBatchJobSource","t.tContentsForEmbed","embedContentConfigToMldev","common.moveValueByPath","fileDataToMldev","generateContentConfigToMldev","t.tContent","t.tSchema","safetySettingToMldev","t.tTools","toolToMldev","t.tTool","t.tCachedContentName","t.tSpeechConfig","generateContentResponseFromMldev","googleMapsToMldev","googleSearchToMldev","t.tContents","converters.createBatchJobParametersToMldev","common.formatMap","converters.createBatchJobParametersToVertex","converters.batchJobFromVertex","converters.batchJobFromMldev","converters.createEmbeddingsBatchJobParametersToMldev","converters.getBatchJobParametersToVertex","converters.getBatchJobParametersToMldev","converters.cancelBatchJobParametersToVertex","converters.cancelBatchJobParametersToMldev","converters.listBatchJobsParametersToVertex","converters.listBatchJobsResponseFromVertex","types.ListBatchJobsResponse","converters.listBatchJobsParametersToMldev","converters.listBatchJobsResponseFromMldev","converters.deleteBatchJobParametersToVertex","converters.deleteResourceJobFromVertex","converters.deleteBatchJobParametersToMldev","converters.deleteResourceJobFromMldev","toolToVertex","t.tCachesModel","functionDeclarationToVertex","converters.createCachedContentParametersToVertex","converters.createCachedContentParametersToMldev","converters.getCachedContentParametersToVertex","converters.getCachedContentParametersToMldev","converters.deleteCachedContentParametersToVertex","converters.deleteCachedContentResponseFromVertex","types.DeleteCachedContentResponse","converters.deleteCachedContentParametersToMldev","converters.deleteCachedContentResponseFromMldev","converters.updateCachedContentParametersToVertex","converters.updateCachedContentParametersToMldev","converters.listCachedContentsParametersToVertex","converters.listCachedContentsResponseFromVertex","types.ListCachedContentsResponse","converters.listCachedContentsParametersToMldev","converters.listCachedContentsResponseFromMldev","t.tFileName","converters.listFilesParametersToMldev","converters.listFilesResponseFromMldev","types.ListFilesResponse","converters.createFileParametersToMldev","converters.createFileResponseFromMldev","types.CreateFileResponse","converters.getFileParametersToMldev","converters.deleteFileParametersToMldev","converters.deleteFileResponseFromMldev","types.DeleteFileResponse","generationConfigToVertex","speechConfigToVertex","liveConnectConfigToMldev","t.tLiveSpeechConfig","sessionResumptionConfigToMldev","t.tBlobs","t.tAudioBlob","t.tImageBlob","t.tModelsUrl","t.tExtractModels","handleWebSocketMessage","types.LiveMusicServerMessage","mapToHeaders","headersToMap","converters.liveMusicSetWeightedPromptsParametersToMldev","converters.liveMusicSetConfigParametersToMldev","types.LiveMusicPlaybackControl","types.LiveServerMessage","converters.liveServerMessageFromVertex","types.Modality","converters.liveConnectParametersToVertex","converters.liveConnectParametersToMldev","converters.liveSendRealtimeInputParametersToVertex","converters.liveSendRealtimeInputParametersToMldev","types.GenerateContentResponse","converters.generateContentParametersToVertex","converters.generateContentResponseFromVertex","converters.generateContentParametersToMldev","converters.generateContentResponseFromMldev","converters.embedContentParametersToVertex","converters.embedContentResponseFromVertex","types.EmbedContentResponse","converters.embedContentParametersToMldev","converters.embedContentResponseFromMldev","converters.generateImagesParametersToVertex","converters.generateImagesResponseFromVertex","types.GenerateImagesResponse","converters.generateImagesParametersToMldev","converters.generateImagesResponseFromMldev","converters.editImageParametersInternalToVertex","converters.editImageResponseFromVertex","types.EditImageResponse","converters.upscaleImageAPIParametersInternalToVertex","converters.upscaleImageResponseFromVertex","types.UpscaleImageResponse","converters.recontextImageParametersToVertex","converters.recontextImageResponseFromVertex","types.RecontextImageResponse","converters.segmentImageParametersToVertex","converters.segmentImageResponseFromVertex","types.SegmentImageResponse","converters.getModelParametersToVertex","converters.modelFromVertex","converters.getModelParametersToMldev","converters.modelFromMldev","converters.listModelsParametersToVertex","converters.listModelsResponseFromVertex","types.ListModelsResponse","converters.listModelsParametersToMldev","converters.listModelsResponseFromMldev","converters.updateModelParametersToVertex","converters.updateModelParametersToMldev","converters.deleteModelParametersToVertex","converters.deleteModelResponseFromVertex","types.DeleteModelResponse","converters.deleteModelParametersToMldev","converters.deleteModelResponseFromMldev","converters.countTokensParametersToVertex","converters.countTokensResponseFromVertex","types.CountTokensResponse","converters.countTokensParametersToMldev","converters.countTokensResponseFromMldev","converters.computeTokensParametersToVertex","converters.computeTokensResponseFromVertex","types.ComputeTokensResponse","converters.generateVideosParametersToVertex","converters.generateVideosOperationFromVertex","types.GenerateVideosOperation","converters.generateVideosParametersToMldev","converters.generateVideosOperationFromMldev","converters.getOperationParametersToVertex","converters.getOperationParametersToMldev","converters.fetchPredictOperationParametersToVertex","converters.createAuthTokenParametersToMldev","t.tTuningJobStatus","types.JobState","converters.getTuningJobParametersToVertex","converters.tuningJobFromVertex","converters.getTuningJobParametersToMldev","converters.tuningJobFromMldev","converters.listTuningJobsParametersToVertex","converters.listTuningJobsResponseFromVertex","types.ListTuningJobsResponse","converters.listTuningJobsParametersToMldev","converters.listTuningJobsResponseFromMldev","converters.cancelTuningJobParametersToVertex","converters.cancelTuningJobParametersToMldev","converters.createTuningJobParametersPrivateToVertex","converters.createTuningJobParametersPrivateToMldev","converters.tuningOperationFromMldev"],"mappings":"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","debugId":null}}]
}